/**
 *
 *   Copyright (c) 2019 Aspose.PDF Cloud
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */


package com.aspose.asposecloudpdfandroid.api;

import com.aspose.asposecloudpdfandroid.ApiCallback;
import com.aspose.asposecloudpdfandroid.ApiClient;
import com.aspose.asposecloudpdfandroid.ApiException;
import com.aspose.asposecloudpdfandroid.ApiResponse;
import com.aspose.asposecloudpdfandroid.Configuration;
import com.aspose.asposecloudpdfandroid.Pair;
import com.aspose.asposecloudpdfandroid.ProgressRequestBody;
import com.aspose.asposecloudpdfandroid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.asposecloudpdfandroid.model.AnnotationsInfoResponse;
import com.aspose.asposecloudpdfandroid.model.AppendDocument;
import com.aspose.asposecloudpdfandroid.model.AsposeResponse;
import com.aspose.asposecloudpdfandroid.model.AttachmentResponse;
import com.aspose.asposecloudpdfandroid.model.AttachmentsResponse;
import com.aspose.asposecloudpdfandroid.model.CaretAnnotation;
import com.aspose.asposecloudpdfandroid.model.CaretAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.CaretAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.CircleAnnotation;
import com.aspose.asposecloudpdfandroid.model.CircleAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.CircleAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.DiscUsageResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentPageResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentPagesResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentPrivilege;
import com.aspose.asposecloudpdfandroid.model.DocumentPropertiesResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentPropertyResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentResponse;
import com.aspose.asposecloudpdfandroid.model.Field;
import com.aspose.asposecloudpdfandroid.model.FieldResponse;
import com.aspose.asposecloudpdfandroid.model.Fields;
import com.aspose.asposecloudpdfandroid.model.FieldsResponse;
import java.io.File;
import com.aspose.asposecloudpdfandroid.model.FileAttachmentAnnotation;
import com.aspose.asposecloudpdfandroid.model.FileAttachmentAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.FileAttachmentAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.FileExistResponse;
import com.aspose.asposecloudpdfandroid.model.FileVersionsResponse;
import com.aspose.asposecloudpdfandroid.model.FilesResponse;
import com.aspose.asposecloudpdfandroid.model.FreeTextAnnotation;
import com.aspose.asposecloudpdfandroid.model.FreeTextAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.FreeTextAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.HighlightAnnotation;
import com.aspose.asposecloudpdfandroid.model.HighlightAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.HighlightAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.ImageResponse;
import com.aspose.asposecloudpdfandroid.model.ImageTemplatesRequest;
import com.aspose.asposecloudpdfandroid.model.ImagesResponse;
import com.aspose.asposecloudpdfandroid.model.InkAnnotation;
import com.aspose.asposecloudpdfandroid.model.InkAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.InkAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.LineAnnotation;
import com.aspose.asposecloudpdfandroid.model.LineAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.LineAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.LinkAnnotation;
import com.aspose.asposecloudpdfandroid.model.LinkAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.LinkAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.MergeDocuments;
import com.aspose.asposecloudpdfandroid.model.MovieAnnotation;
import com.aspose.asposecloudpdfandroid.model.MovieAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.MovieAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.OptimizeOptions;
import com.aspose.asposecloudpdfandroid.model.Paragraph;
import com.aspose.asposecloudpdfandroid.model.PolyLineAnnotation;
import com.aspose.asposecloudpdfandroid.model.PolyLineAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.PolyLineAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.PolygonAnnotation;
import com.aspose.asposecloudpdfandroid.model.PolygonAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.PolygonAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.PopupAnnotation;
import com.aspose.asposecloudpdfandroid.model.PopupAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.PopupAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.RedactionAnnotation;
import com.aspose.asposecloudpdfandroid.model.RedactionAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.RedactionAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.Signature;
import com.aspose.asposecloudpdfandroid.model.SignatureVerifyResponse;
import com.aspose.asposecloudpdfandroid.model.SoundAnnotation;
import com.aspose.asposecloudpdfandroid.model.SoundAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.SoundAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.SplitResultResponse;
import com.aspose.asposecloudpdfandroid.model.SquareAnnotation;
import com.aspose.asposecloudpdfandroid.model.SquareAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.SquareAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.SquigglyAnnotation;
import com.aspose.asposecloudpdfandroid.model.SquigglyAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.SquigglyAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.Stamp;
import com.aspose.asposecloudpdfandroid.model.StorageExistResponse;
import com.aspose.asposecloudpdfandroid.model.StrikeOutAnnotation;
import com.aspose.asposecloudpdfandroid.model.StrikeOutAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.StrikeOutAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.TextAnnotation;
import com.aspose.asposecloudpdfandroid.model.TextAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.TextAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.TextRectsResponse;
import com.aspose.asposecloudpdfandroid.model.TextReplaceListRequest;
import com.aspose.asposecloudpdfandroid.model.TextReplaceResponse;
import com.aspose.asposecloudpdfandroid.model.UnderlineAnnotation;
import com.aspose.asposecloudpdfandroid.model.UnderlineAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.UnderlineAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.WordCountResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PdfApi {
    private ApiClient apiClient;

    public PdfApi(String appKey, String appSid) {
        this(Configuration.getDefaultApiClient());
        apiClient.setAppKey(appKey);
        apiClient.setAppSid(appSid);
    }

    public PdfApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling deleteAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document annotation by ID
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deleteAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document annotation by ID
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document annotation by ID (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all annotations from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteDocumentAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteDocumentAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deleteDocumentAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all annotations from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteDocumentAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all annotations from the document (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentAnnotationsAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentLinkAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentLinkAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/links"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentLinkAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentLinkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentLinkAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all link annotations from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteDocumentLinkAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteDocumentLinkAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deleteDocumentLinkAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all link annotations from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteDocumentLinkAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentLinkAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all link annotations from the document (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentLinkAnnotationsAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentLinkAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteField
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling deleteField(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deleteFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFile
     * @param path Path of the file including file name and extension e.g. /Folder1/file.ext (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileCall(String path, String versionId, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFileValidateBeforeCall(String path, String versionId, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFileCall(path, versionId, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a specific file 
     * 
     * @param path Path of the file including file name and extension e.g. /Folder1/file.ext (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteFile(String path, String versionId, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteFileWithHttpInfo(path, versionId, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deleteFileWithHttpInfo(path, versionId, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Remove a specific file 
     * 
     * @param path Path of the file including file name and extension e.g. /Folder1/file.ext (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteFileWithHttpInfo(String path, String versionId, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileValidateBeforeCall(path, versionId, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove a specific file  (asynchronously)
     * 
     * @param path Path of the file including file name and extension e.g. /Folder1/file.ext (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileAsync(String path, String versionId, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileValidateBeforeCall(path, versionId, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFolder
     * @param path Folder path e.g. /Folder1 (required)
     * @param storage User&#39;s storage name (optional)
     * @param recursive Remove recursivelly inner folder/files. If false and folder contains data than exception is raised. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFolderCall(String path, String storage, Boolean recursive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (recursive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recursive", recursive));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFolderValidateBeforeCall(String path, String storage, Boolean recursive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFolderCall(path, storage, recursive, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a specific folder 
     * 
     * @param path Folder path e.g. /Folder1 (required)
     * @param storage User&#39;s storage name (optional)
     * @param recursive Remove recursivelly inner folder/files. If false and folder contains data than exception is raised. (optional, default to false)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteFolder(String path, String storage, Boolean recursive) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteFolderWithHttpInfo(path, storage, recursive);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deleteFolderWithHttpInfo(path, storage, recursive);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Remove a specific folder 
     * 
     * @param path Folder path e.g. /Folder1 (required)
     * @param storage User&#39;s storage name (optional)
     * @param recursive Remove recursivelly inner folder/files. If false and folder contains data than exception is raised. (optional, default to false)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteFolderWithHttpInfo(String path, String storage, Boolean recursive) throws ApiException {
        com.squareup.okhttp.Call call = deleteFolderValidateBeforeCall(path, storage, recursive, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove a specific folder  (asynchronously)
     * 
     * @param path Folder path e.g. /Folder1 (required)
     * @param storage User&#39;s storage name (optional)
     * @param recursive Remove recursivelly inner folder/files. If false and folder contains data than exception is raised. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFolderAsync(String path, String storage, Boolean recursive, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFolderValidateBeforeCall(path, storage, recursive, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteImage
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteImageCall(String name, String imageId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteImageValidateBeforeCall(String name, String imageId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteImage(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling deleteImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteImageCall(name, imageId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete image from document page.
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteImage(String name, String imageId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteImageWithHttpInfo(name, imageId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deleteImageWithHttpInfo(name, imageId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete image from document page.
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteImageWithHttpInfo(String name, String imageId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteImageValidateBeforeCall(name, imageId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete image from document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteImageAsync(String name, String imageId, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteImageValidateBeforeCall(name, imageId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLinkAnnotation
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLinkAnnotationCall(String name, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/links/{linkId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLinkAnnotationValidateBeforeCall(String name, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling deleteLinkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLinkAnnotationCall(name, linkId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document page link annotation by ID
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteLinkAnnotation(String name, String linkId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deleteLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document page link annotation by ID
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteLinkAnnotationWithHttpInfo(String name, String linkId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteLinkAnnotationValidateBeforeCall(name, linkId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document page link annotation by ID (asynchronously)
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLinkAnnotationAsync(String name, String linkId, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLinkAnnotationValidateBeforeCall(name, linkId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePageCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePageValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling deletePage(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePageCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document page by its number.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deletePage(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePageWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deletePageWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document page by its number.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePageWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePageValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document page by its number. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePageAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePageValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePageAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePageAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePageAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePageAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling deletePageAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePageAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all annotations from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deletePageAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deletePageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all annotations from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePageAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePageAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all annotations from the page (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePageAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePageAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePageLinkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePageLinkAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/links"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePageLinkAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePageLinkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling deletePageLinkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePageLinkAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all link annotations from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deletePageLinkAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deletePageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all link annotations from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePageLinkAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePageLinkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all link annotations from the page (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePageLinkAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePageLinkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProperties
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePropertiesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePropertiesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePropertiesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete custom document properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteProperties(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePropertiesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deletePropertiesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete custom document properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePropertiesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePropertiesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete custom document properties. (asynchronously)
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePropertiesAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePropertiesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProperty
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePropertyCall(String name, String propertyName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePropertyValidateBeforeCall(String name, String propertyName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling deleteProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePropertyCall(name, propertyName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document property.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteProperty(String name, String propertyName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePropertyWithHttpInfo(name, propertyName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = deletePropertyWithHttpInfo(name, propertyName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document property.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePropertyWithHttpInfo(String name, String propertyName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePropertyValidateBeforeCall(name, propertyName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document property. (asynchronously)
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePropertyAsync(String name, String propertyName, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePropertyValidateBeforeCall(name, propertyName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCaretAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCaretAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/caret/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCaretAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getCaretAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getCaretAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getCaretAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page caret annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CaretAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CaretAnnotationResponse getCaretAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CaretAnnotationResponse> resp = getCaretAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<CaretAnnotationResponse> resp = getCaretAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page caret annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CaretAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CaretAnnotationResponse> getCaretAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getCaretAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CaretAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page caret annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCaretAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<CaretAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCaretAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CaretAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCircleAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCircleAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/circle/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCircleAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getCircleAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getCircleAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getCircleAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page circle annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CircleAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CircleAnnotationResponse getCircleAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CircleAnnotationResponse> resp = getCircleAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<CircleAnnotationResponse> resp = getCircleAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page circle annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CircleAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CircleAnnotationResponse> getCircleAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getCircleAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CircleAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page circle annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCircleAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<CircleAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCircleAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CircleAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscUsage
     * @param storage User&#39;s storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageCall(String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/disc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscUsageValidateBeforeCall(String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDiscUsageCall(storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check the disk usage of the current account 
     * 
     * @param storage User&#39;s storage name (optional)
     * @return DiscUsageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscUsageResponse getDiscUsage(String storage) throws ApiException {
        try
        {
            ApiResponse<DiscUsageResponse> resp = getDiscUsageWithHttpInfo(storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DiscUsageResponse> resp = getDiscUsageWithHttpInfo(storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Check the disk usage of the current account 
     * 
     * @param storage User&#39;s storage name (optional)
     * @return ApiResponse&lt;DiscUsageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscUsageResponse> getDiscUsageWithHttpInfo(String storage) throws ApiException {
        com.squareup.okhttp.Call call = getDiscUsageValidateBeforeCall(storage, null, null);
        Type localVarReturnType = new TypeToken<DiscUsageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check the disk usage of the current account  (asynchronously)
     * 
     * @param storage User&#39;s storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageAsync(String storage, final ApiCallback<DiscUsageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscUsageValidateBeforeCall(storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscUsageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocument
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read common document info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse getDocument(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentResponse> resp = getDocumentWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentResponse> resp = getDocumentWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read common document info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> getDocumentWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read common document info. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAsync(String name, String storage, String folder, final ApiCallback<DocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AnnotationsInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnnotationsInfoResponse getDocumentAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AnnotationsInfoResponse> resp = getDocumentAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AnnotationsInfoResponse> resp = getDocumentAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AnnotationsInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnnotationsInfoResponse> getDocumentAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AnnotationsInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAnnotationsAsync(String name, String storage, String folder, final ApiCallback<AnnotationsInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnotationsInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentAttachmentByIndex
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentAttachmentByIndexCall(String name, Integer attachmentIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/attachments/{attachmentIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "attachmentIndex" + "\\}", apiClient.escapeString(attachmentIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentAttachmentByIndexValidateBeforeCall(String name, Integer attachmentIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentAttachmentByIndex(Async)");
        }
        
        // verify the required parameter 'attachmentIndex' is set
        if (attachmentIndex == null) {
            throw new ApiException("Missing the required parameter 'attachmentIndex' when calling getDocumentAttachmentByIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentAttachmentByIndexCall(name, attachmentIndex, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document attachment info by its index.
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentResponse getDocumentAttachmentByIndex(String name, Integer attachmentIndex, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AttachmentResponse> resp = getDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AttachmentResponse> resp = getDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document attachment info by its index.
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentResponse> getDocumentAttachmentByIndexWithHttpInfo(String name, Integer attachmentIndex, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentAttachmentByIndexValidateBeforeCall(name, attachmentIndex, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AttachmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document attachment info by its index. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAttachmentByIndexAsync(String name, Integer attachmentIndex, String storage, String folder, final ApiCallback<AttachmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentAttachmentByIndexValidateBeforeCall(name, attachmentIndex, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentAttachments
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentAttachmentsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/attachments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentAttachmentsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentAttachments(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentAttachmentsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document attachments info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AttachmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentsResponse getDocumentAttachments(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AttachmentsResponse> resp = getDocumentAttachmentsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AttachmentsResponse> resp = getDocumentAttachmentsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document attachments info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AttachmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentsResponse> getDocumentAttachmentsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentAttachmentsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AttachmentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document attachments info. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAttachmentsAsync(String name, String storage, String folder, final ApiCallback<AttachmentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentAttachmentsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentBookmarks
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentBookmarksCall(String name, String bookmarkPath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/bookmarks"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bookmarkPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bookmarkPath", bookmarkPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentBookmarksValidateBeforeCall(String name, String bookmarkPath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentBookmarks(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentBookmarksCall(name, bookmarkPath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document bookmark/bookmarks (including children).
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getDocumentBookmarks(String name, String bookmarkPath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getDocumentBookmarksWithHttpInfo(name, bookmarkPath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getDocumentBookmarksWithHttpInfo(name, bookmarkPath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document bookmark/bookmarks (including children).
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getDocumentBookmarksWithHttpInfo(String name, String bookmarkPath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentBookmarksValidateBeforeCall(name, bookmarkPath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document bookmark/bookmarks (including children). (asynchronously)
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. Leave it empty if you want to get all the bookmarks in the document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentBookmarksAsync(String name, String bookmarkPath, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentBookmarksValidateBeforeCall(name, bookmarkPath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentCaretAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentCaretAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/caret"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentCaretAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentCaretAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCaretAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document caret annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CaretAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CaretAnnotationsResponse getDocumentCaretAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CaretAnnotationsResponse> resp = getDocumentCaretAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<CaretAnnotationsResponse> resp = getDocumentCaretAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document caret annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CaretAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CaretAnnotationsResponse> getDocumentCaretAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentCaretAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CaretAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document caret annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentCaretAnnotationsAsync(String name, String storage, String folder, final ApiCallback<CaretAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentCaretAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CaretAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentCircleAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentCircleAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/circle"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentCircleAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentCircleAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCircleAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document circle annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CircleAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CircleAnnotationsResponse getDocumentCircleAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CircleAnnotationsResponse> resp = getDocumentCircleAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<CircleAnnotationsResponse> resp = getDocumentCircleAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document circle annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CircleAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CircleAnnotationsResponse> getDocumentCircleAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentCircleAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CircleAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document circle annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentCircleAnnotationsAsync(String name, String storage, String folder, final ApiCallback<CircleAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentCircleAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CircleAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentFileAttachmentAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentFileAttachmentAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentFileAttachmentAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentFileAttachmentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentFileAttachmentAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FileAttachmentAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileAttachmentAnnotationsResponse getDocumentFileAttachmentAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FileAttachmentAnnotationsResponse> resp = getDocumentFileAttachmentAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FileAttachmentAnnotationsResponse> resp = getDocumentFileAttachmentAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FileAttachmentAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileAttachmentAnnotationsResponse> getDocumentFileAttachmentAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentFileAttachmentAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document FileAttachment annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentFileAttachmentAnnotationsAsync(String name, String storage, String folder, final ApiCallback<FileAttachmentAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentFileAttachmentAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentFreeTextAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentFreeTextAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/freetext"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentFreeTextAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentFreeTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentFreeTextAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document free text annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FreeTextAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTextAnnotationsResponse getDocumentFreeTextAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FreeTextAnnotationsResponse> resp = getDocumentFreeTextAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FreeTextAnnotationsResponse> resp = getDocumentFreeTextAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document free text annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FreeTextAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTextAnnotationsResponse> getDocumentFreeTextAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentFreeTextAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document free text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentFreeTextAnnotationsAsync(String name, String storage, String folder, final ApiCallback<FreeTextAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentFreeTextAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentHighlightAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentHighlightAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/highlight"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentHighlightAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentHighlightAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentHighlightAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document highlight annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return HighlightAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HighlightAnnotationsResponse getDocumentHighlightAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<HighlightAnnotationsResponse> resp = getDocumentHighlightAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<HighlightAnnotationsResponse> resp = getDocumentHighlightAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document highlight annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;HighlightAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HighlightAnnotationsResponse> getDocumentHighlightAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentHighlightAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<HighlightAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document highlight annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentHighlightAnnotationsAsync(String name, String storage, String folder, final ApiCallback<HighlightAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentHighlightAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HighlightAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentInkAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentInkAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/ink"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentInkAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentInkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentInkAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document ink annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return InkAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InkAnnotationsResponse getDocumentInkAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<InkAnnotationsResponse> resp = getDocumentInkAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<InkAnnotationsResponse> resp = getDocumentInkAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document ink annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;InkAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InkAnnotationsResponse> getDocumentInkAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentInkAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<InkAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document ink annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentInkAnnotationsAsync(String name, String storage, String folder, final ApiCallback<InkAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentInkAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InkAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentLineAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentLineAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/line"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentLineAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentLineAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document line annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineAnnotationsResponse getDocumentLineAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LineAnnotationsResponse> resp = getDocumentLineAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<LineAnnotationsResponse> resp = getDocumentLineAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document line annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineAnnotationsResponse> getDocumentLineAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentLineAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document line annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentLineAnnotationsAsync(String name, String storage, String folder, final ApiCallback<LineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentLineAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentMovieAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentMovieAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/movie"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentMovieAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentMovieAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentMovieAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document movie annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return MovieAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MovieAnnotationsResponse getDocumentMovieAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<MovieAnnotationsResponse> resp = getDocumentMovieAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<MovieAnnotationsResponse> resp = getDocumentMovieAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document movie annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;MovieAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MovieAnnotationsResponse> getDocumentMovieAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentMovieAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<MovieAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document movie annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentMovieAnnotationsAsync(String name, String storage, String folder, final ApiCallback<MovieAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentMovieAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MovieAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentPolyLineAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPolyLineAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polyline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPolyLineAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentPolyLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPolyLineAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document polyline annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolyLineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolyLineAnnotationsResponse getDocumentPolyLineAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolyLineAnnotationsResponse> resp = getDocumentPolyLineAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PolyLineAnnotationsResponse> resp = getDocumentPolyLineAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document polyline annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolyLineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolyLineAnnotationsResponse> getDocumentPolyLineAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPolyLineAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document polyline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPolyLineAnnotationsAsync(String name, String storage, String folder, final ApiCallback<PolyLineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPolyLineAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentPolygonAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPolygonAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polygon"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPolygonAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentPolygonAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPolygonAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document polygon annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolygonAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolygonAnnotationsResponse getDocumentPolygonAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolygonAnnotationsResponse> resp = getDocumentPolygonAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PolygonAnnotationsResponse> resp = getDocumentPolygonAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document polygon annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolygonAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolygonAnnotationsResponse> getDocumentPolygonAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPolygonAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolygonAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document polygon annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPolygonAnnotationsAsync(String name, String storage, String folder, final ApiCallback<PolygonAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPolygonAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolygonAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentPopupAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPopupAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/popup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPopupAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentPopupAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document popup annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationsResponse getDocumentPopupAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationsResponse> resp = getDocumentPopupAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PopupAnnotationsResponse> resp = getDocumentPopupAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document popup annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationsResponse> getDocumentPopupAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document popup annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPopupAnnotationsAsync(String name, String storage, String folder, final ApiCallback<PopupAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentPopupAnnotationsByParent
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPopupAnnotationsByParentCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/{annotationId}/popup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPopupAnnotationsByParentValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentPopupAnnotationsByParent(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getDocumentPopupAnnotationsByParent(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsByParentCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document popup annotations by parent id.
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationsResponse getDocumentPopupAnnotationsByParent(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationsResponse> resp = getDocumentPopupAnnotationsByParentWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PopupAnnotationsResponse> resp = getDocumentPopupAnnotationsByParentWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document popup annotations by parent id.
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationsResponse> getDocumentPopupAnnotationsByParentWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsByParentValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document popup annotations by parent id. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPopupAnnotationsByParentAsync(String name, String annotationId, String storage, String folder, final ApiCallback<PopupAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsByParentValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentProperties
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPropertiesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPropertiesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return DocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPropertiesResponse getDocumentProperties(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPropertiesResponse> resp = getDocumentPropertiesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentPropertiesResponse> resp = getDocumentPropertiesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;DocumentPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPropertiesResponse> getDocumentPropertiesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPropertiesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPropertiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document properties. (asynchronously)
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesAsync(String name, String storage, String folder, final ApiCallback<DocumentPropertiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertiesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPropertiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentProperty
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyCall(String name, String propertyName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPropertyValidateBeforeCall(String name, String propertyName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling getDocumentProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPropertyCall(name, propertyName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document property by name.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPropertyResponse getDocumentProperty(String name, String propertyName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPropertyResponse> resp = getDocumentPropertyWithHttpInfo(name, propertyName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentPropertyResponse> resp = getDocumentPropertyWithHttpInfo(name, propertyName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document property by name.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;DocumentPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPropertyResponse> getDocumentPropertyWithHttpInfo(String name, String propertyName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPropertyValidateBeforeCall(name, propertyName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document property by name. (asynchronously)
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyAsync(String name, String propertyName, String storage, String folder, final ApiCallback<DocumentPropertyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertyValidateBeforeCall(name, propertyName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentRedactionAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentRedactionAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/redaction"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentRedactionAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentRedactionAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentRedactionAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document redaction annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RedactionAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedactionAnnotationsResponse getDocumentRedactionAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RedactionAnnotationsResponse> resp = getDocumentRedactionAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<RedactionAnnotationsResponse> resp = getDocumentRedactionAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document redaction annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RedactionAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedactionAnnotationsResponse> getDocumentRedactionAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentRedactionAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RedactionAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document redaction annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentRedactionAnnotationsAsync(String name, String storage, String folder, final ApiCallback<RedactionAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentRedactionAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedactionAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentSoundAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentSoundAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentSoundAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentSoundAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentSoundAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document sound annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SoundAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoundAnnotationsResponse getDocumentSoundAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SoundAnnotationsResponse> resp = getDocumentSoundAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SoundAnnotationsResponse> resp = getDocumentSoundAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document sound annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SoundAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoundAnnotationsResponse> getDocumentSoundAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentSoundAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SoundAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document sound annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentSoundAnnotationsAsync(String name, String storage, String folder, final ApiCallback<SoundAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentSoundAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoundAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentSquareAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentSquareAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/square"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentSquareAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentSquareAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentSquareAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document square annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquareAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquareAnnotationsResponse getDocumentSquareAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquareAnnotationsResponse> resp = getDocumentSquareAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SquareAnnotationsResponse> resp = getDocumentSquareAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document square annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquareAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquareAnnotationsResponse> getDocumentSquareAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentSquareAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquareAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document square annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentSquareAnnotationsAsync(String name, String storage, String folder, final ApiCallback<SquareAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentSquareAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquareAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentSquigglyAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentSquigglyAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/squiggly"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentSquigglyAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentSquigglyAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentSquigglyAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquigglyAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquigglyAnnotationsResponse getDocumentSquigglyAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquigglyAnnotationsResponse> resp = getDocumentSquigglyAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SquigglyAnnotationsResponse> resp = getDocumentSquigglyAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquigglyAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquigglyAnnotationsResponse> getDocumentSquigglyAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentSquigglyAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document squiggly annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentSquigglyAnnotationsAsync(String name, String storage, String folder, final ApiCallback<SquigglyAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentSquigglyAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentStrikeOutAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentStrikeOutAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/strikeout"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentStrikeOutAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentStrikeOutAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentStrikeOutAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StrikeOutAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrikeOutAnnotationsResponse getDocumentStrikeOutAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StrikeOutAnnotationsResponse> resp = getDocumentStrikeOutAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<StrikeOutAnnotationsResponse> resp = getDocumentStrikeOutAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StrikeOutAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrikeOutAnnotationsResponse> getDocumentStrikeOutAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentStrikeOutAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document StrikeOut annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentStrikeOutAnnotationsAsync(String name, String storage, String folder, final ApiCallback<StrikeOutAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentStrikeOutAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentTextAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentTextAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentTextAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentTextAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document text annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextAnnotationsResponse getDocumentTextAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextAnnotationsResponse> resp = getDocumentTextAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<TextAnnotationsResponse> resp = getDocumentTextAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document text annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextAnnotationsResponse> getDocumentTextAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentTextAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentTextAnnotationsAsync(String name, String storage, String folder, final ApiCallback<TextAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentTextAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentUnderlineAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentUnderlineAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/underline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentUnderlineAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentUnderlineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentUnderlineAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document underline annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return UnderlineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnderlineAnnotationsResponse getDocumentUnderlineAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<UnderlineAnnotationsResponse> resp = getDocumentUnderlineAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<UnderlineAnnotationsResponse> resp = getDocumentUnderlineAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document underline annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;UnderlineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnderlineAnnotationsResponse> getDocumentUnderlineAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentUnderlineAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document underline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentUnderlineAnnotationsAsync(String name, String storage, String folder, final ApiCallback<UnderlineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentUnderlineAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDownload
     * @param path Path of the file including the file name and extension e.g. /file.ext (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDownloadCall(String path, String versionId, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDownloadValidateBeforeCall(String path, String versionId, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getDownload(Async)");
        }
        

        com.squareup.okhttp.Call call = getDownloadCall(path, versionId, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download a specific file 
     * 
     * @param path Path of the file including the file name and extension e.g. /file.ext (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getDownload(String path, String versionId, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getDownloadWithHttpInfo(path, versionId, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getDownloadWithHttpInfo(path, versionId, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Download a specific file 
     * 
     * @param path Path of the file including the file name and extension e.g. /file.ext (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getDownloadWithHttpInfo(String path, String versionId, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getDownloadValidateBeforeCall(path, versionId, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download a specific file  (asynchronously)
     * 
     * @param path Path of the file including the file name and extension e.g. /file.ext (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDownloadAsync(String path, String versionId, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDownloadValidateBeforeCall(path, versionId, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDownloadDocumentAttachmentByIndex
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDownloadDocumentAttachmentByIndexCall(String name, Integer attachmentIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/attachments/{attachmentIndex}/download"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "attachmentIndex" + "\\}", apiClient.escapeString(attachmentIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDownloadDocumentAttachmentByIndexValidateBeforeCall(String name, Integer attachmentIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDownloadDocumentAttachmentByIndex(Async)");
        }
        
        // verify the required parameter 'attachmentIndex' is set
        if (attachmentIndex == null) {
            throw new ApiException("Missing the required parameter 'attachmentIndex' when calling getDownloadDocumentAttachmentByIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = getDownloadDocumentAttachmentByIndexCall(name, attachmentIndex, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download document attachment content by its index.
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getDownloadDocumentAttachmentByIndex(String name, Integer attachmentIndex, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getDownloadDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getDownloadDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Download document attachment content by its index.
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getDownloadDocumentAttachmentByIndexWithHttpInfo(String name, Integer attachmentIndex, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDownloadDocumentAttachmentByIndexValidateBeforeCall(name, attachmentIndex, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download document attachment content by its index. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDownloadDocumentAttachmentByIndexAsync(String name, Integer attachmentIndex, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDownloadDocumentAttachmentByIndexValidateBeforeCall(name, attachmentIndex, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEpubInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEpubInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/epub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEpubInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getEpubInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getEpubInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getEpubInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getEpubInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getEpubInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getEpubInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getEpubInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert EPUB file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEpubInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEpubInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getField
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getField(Async)");
        }
        

        com.squareup.okhttp.Call call = getFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get document field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResponse getField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FieldResponse> resp = getFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FieldResponse> resp = getFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get document field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResponse> getFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get document field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<FieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFields
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getFieldsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get document fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldsResponse getFields(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FieldsResponse> resp = getFieldsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FieldsResponse> resp = getFieldsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get document fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldsResponse> getFieldsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get document fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldsAsync(String name, String storage, String folder, final ApiCallback<FieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileAttachmentAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileAttachmentAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileAttachmentAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFileAttachmentAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getFileAttachmentAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileAttachmentAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page FileAttachment annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FileAttachmentAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileAttachmentAnnotationResponse getFileAttachmentAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FileAttachmentAnnotationResponse> resp = getFileAttachmentAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FileAttachmentAnnotationResponse> resp = getFileAttachmentAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page FileAttachment annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FileAttachmentAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileAttachmentAnnotationResponse> getFileAttachmentAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFileAttachmentAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page FileAttachment annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileAttachmentAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<FileAttachmentAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileAttachmentAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileAttachmentAnnotationData
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileAttachmentAnnotationDataCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment/{annotationId}/data"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileAttachmentAnnotationDataValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFileAttachmentAnnotationData(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getFileAttachmentAnnotationData(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileAttachmentAnnotationDataCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page FileAttachment annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getFileAttachmentAnnotationData(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getFileAttachmentAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getFileAttachmentAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page FileAttachment annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getFileAttachmentAnnotationDataWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFileAttachmentAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page FileAttachment annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileAttachmentAnnotationDataAsync(String name, String annotationId, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileAttachmentAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFreeTextAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFreeTextAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/freetext/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFreeTextAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFreeTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getFreeTextAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getFreeTextAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page free text annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FreeTextAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTextAnnotationResponse getFreeTextAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FreeTextAnnotationResponse> resp = getFreeTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FreeTextAnnotationResponse> resp = getFreeTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page free text annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FreeTextAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTextAnnotationResponse> getFreeTextAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFreeTextAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page free text annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFreeTextAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<FreeTextAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFreeTextAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHighlightAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHighlightAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/highlight/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHighlightAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getHighlightAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getHighlightAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getHighlightAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page highlight annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return HighlightAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HighlightAnnotationResponse getHighlightAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<HighlightAnnotationResponse> resp = getHighlightAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<HighlightAnnotationResponse> resp = getHighlightAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page highlight annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;HighlightAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HighlightAnnotationResponse> getHighlightAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getHighlightAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<HighlightAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page highlight annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHighlightAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<HighlightAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHighlightAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HighlightAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHtmlInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHtmlInStorageToPdfCall(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (htmlFileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlFileName", htmlFileName));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHtmlInStorageToPdfValidateBeforeCall(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getHtmlInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getHtmlInStorageToPdfCall(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert HTML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getHtmlInStorageToPdf(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getHtmlInStorageToPdfWithHttpInfo(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getHtmlInStorageToPdfWithHttpInfo(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert HTML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getHtmlInStorageToPdfWithHttpInfo(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getHtmlInStorageToPdfValidateBeforeCall(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert HTML file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHtmlInStorageToPdfAsync(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHtmlInStorageToPdfValidateBeforeCall(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImage
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageCall(String name, String imageId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageValidateBeforeCall(String name, String imageId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImage(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImage(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageCall(name, imageId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document image by ID.
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponse getImage(String name, String imageId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ImageResponse> resp = getImageWithHttpInfo(name, imageId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<ImageResponse> resp = getImageWithHttpInfo(name, imageId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document image by ID.
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponse> getImageWithHttpInfo(String name, String imageId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageValidateBeforeCall(name, imageId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document image by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageAsync(String name, String imageId, String storage, String folder, final ApiCallback<ImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageValidateBeforeCall(name, imageId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImageExtractAsGif
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsGifCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageExtractAsGifValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImageExtractAsGif(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageExtractAsGif(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageExtractAsGifCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in GIF format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImageExtractAsGif(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in GIF format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImageExtractAsGifWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageExtractAsGifValidateBeforeCall(name, imageId, width, height, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in GIF format (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsGifAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageExtractAsGifValidateBeforeCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImageExtractAsJpeg
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsJpegCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageExtractAsJpegValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImageExtractAsJpeg(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageExtractAsJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageExtractAsJpegCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in JPEG format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImageExtractAsJpeg(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in JPEG format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImageExtractAsJpegWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageExtractAsJpegValidateBeforeCall(name, imageId, width, height, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in JPEG format (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsJpegAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageExtractAsJpegValidateBeforeCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImageExtractAsPng
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsPngCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageExtractAsPngValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImageExtractAsPng(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageExtractAsPng(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageExtractAsPngCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in PNG format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImageExtractAsPng(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in PNG format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImageExtractAsPngWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageExtractAsPngValidateBeforeCall(name, imageId, width, height, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in PNG format (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsPngAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageExtractAsPngValidateBeforeCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImageExtractAsTiff
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsTiffCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageExtractAsTiffValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImageExtractAsTiff(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageExtractAsTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageExtractAsTiffCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in TIFF format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImageExtractAsTiff(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in TIFF format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImageExtractAsTiffWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageExtractAsTiffValidateBeforeCall(name, imageId, width, height, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in TIFF format (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsTiffAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageExtractAsTiffValidateBeforeCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImages
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImagesCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImagesValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImages(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getImages(Async)");
        }
        

        com.squareup.okhttp.Call call = getImagesCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document images.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImagesResponse getImages(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ImagesResponse> resp = getImagesWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<ImagesResponse> resp = getImagesWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document images.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImagesResponse> getImagesWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImagesValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document images. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImagesAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<ImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImagesValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInkAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInkAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/ink/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInkAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getInkAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getInkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getInkAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page ink annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return InkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InkAnnotationResponse getInkAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<InkAnnotationResponse> resp = getInkAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<InkAnnotationResponse> resp = getInkAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page ink annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;InkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InkAnnotationResponse> getInkAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getInkAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<InkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page ink annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInkAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<InkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInkAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIsExist
     * @param path File or folder path e.g. /file.ext or /Folder1 (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIsExistCall(String path, String versionId, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/exist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIsExistValidateBeforeCall(String path, String versionId, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getIsExist(Async)");
        }
        

        com.squareup.okhttp.Call call = getIsExistCall(path, versionId, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check if a specific file or folder exists
     * 
     * @param path File or folder path e.g. /file.ext or /Folder1 (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @return FileExistResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileExistResponse getIsExist(String path, String versionId, String storage) throws ApiException {
        try
        {
            ApiResponse<FileExistResponse> resp = getIsExistWithHttpInfo(path, versionId, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FileExistResponse> resp = getIsExistWithHttpInfo(path, versionId, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Check if a specific file or folder exists
     * 
     * @param path File or folder path e.g. /file.ext or /Folder1 (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @return ApiResponse&lt;FileExistResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileExistResponse> getIsExistWithHttpInfo(String path, String versionId, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getIsExistValidateBeforeCall(path, versionId, storage, null, null);
        Type localVarReturnType = new TypeToken<FileExistResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if a specific file or folder exists (asynchronously)
     * 
     * @param path File or folder path e.g. /file.ext or /Folder1 (required)
     * @param versionId File&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIsExistAsync(String path, String versionId, String storage, final ApiCallback<FileExistResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIsExistValidateBeforeCall(path, versionId, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileExistResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIsStorageExist
     * @param name Storage name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIsStorageExistCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{name}/exist"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIsStorageExistValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getIsStorageExist(Async)");
        }
        

        com.squareup.okhttp.Call call = getIsStorageExistCall(name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check if storage exists 
     * 
     * @param name Storage name (required)
     * @return StorageExistResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageExistResponse getIsStorageExist(String name) throws ApiException {
        try
        {
            ApiResponse<StorageExistResponse> resp = getIsStorageExistWithHttpInfo(name);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<StorageExistResponse> resp = getIsStorageExistWithHttpInfo(name);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Check if storage exists 
     * 
     * @param name Storage name (required)
     * @return ApiResponse&lt;StorageExistResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageExistResponse> getIsStorageExistWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = getIsStorageExistValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<StorageExistResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if storage exists  (asynchronously)
     * 
     * @param name Storage name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIsStorageExistAsync(String name, final ApiCallback<StorageExistResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIsStorageExistValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageExistResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLaTeXInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLaTeXInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/latex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLaTeXInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getLaTeXInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getLaTeXInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getLaTeXInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getLaTeXInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getLaTeXInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert LaTeX file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getLaTeXInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getLaTeXInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert LaTeX file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLaTeXInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLaTeXInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLineAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/line/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLineAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getLineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getLineAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page line annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineAnnotationResponse getLineAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LineAnnotationResponse> resp = getLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<LineAnnotationResponse> resp = getLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page line annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineAnnotationResponse> getLineAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getLineAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page line annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLineAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<LineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLineAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLinkAnnotation
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLinkAnnotationCall(String name, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/links/{linkId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLinkAnnotationValidateBeforeCall(String name, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling getLinkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getLinkAnnotationCall(name, linkId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document link annotation by ID.
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LinkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkAnnotationResponse getLinkAnnotation(String name, String linkId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LinkAnnotationResponse> resp = getLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<LinkAnnotationResponse> resp = getLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document link annotation by ID.
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LinkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkAnnotationResponse> getLinkAnnotationWithHttpInfo(String name, String linkId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getLinkAnnotationValidateBeforeCall(name, linkId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document link annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLinkAnnotationAsync(String name, String linkId, String storage, String folder, final ApiCallback<LinkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLinkAnnotationValidateBeforeCall(name, linkId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListFileVersions
     * @param path File path e.g. /file.ext or /Folder1/file.ext (required)
     * @param storage User&#39;s storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListFileVersionsCall(String path, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListFileVersionsValidateBeforeCall(String path, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getListFileVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = getListFileVersionsCall(path, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the file&#39;s versions list 
     * 
     * @param path File path e.g. /file.ext or /Folder1/file.ext (required)
     * @param storage User&#39;s storage name (optional)
     * @return FileVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileVersionsResponse getListFileVersions(String path, String storage) throws ApiException {
        try
        {
            ApiResponse<FileVersionsResponse> resp = getListFileVersionsWithHttpInfo(path, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FileVersionsResponse> resp = getListFileVersionsWithHttpInfo(path, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get the file&#39;s versions list 
     * 
     * @param path File path e.g. /file.ext or /Folder1/file.ext (required)
     * @param storage User&#39;s storage name (optional)
     * @return ApiResponse&lt;FileVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileVersionsResponse> getListFileVersionsWithHttpInfo(String path, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getListFileVersionsValidateBeforeCall(path, storage, null, null);
        Type localVarReturnType = new TypeToken<FileVersionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the file&#39;s versions list  (asynchronously)
     * 
     * @param path File path e.g. /file.ext or /Folder1/file.ext (required)
     * @param storage User&#39;s storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListFileVersionsAsync(String path, String storage, final ApiCallback<FileVersionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListFileVersionsValidateBeforeCall(path, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileVersionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListFiles
     * @param path Start with name of storage e.g. root folder &#39;/&#39;or some folder &#39;/folder1/..&#39; (optional, default to /)
     * @param storage User&#39;s storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListFilesCall(String path, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListFilesValidateBeforeCall(String path, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getListFilesCall(path, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the file listing of a specific folder 
     * 
     * @param path Start with name of storage e.g. root folder &#39;/&#39;or some folder &#39;/folder1/..&#39; (optional, default to /)
     * @param storage User&#39;s storage name (optional)
     * @return FilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesResponse getListFiles(String path, String storage) throws ApiException {
        try
        {
            ApiResponse<FilesResponse> resp = getListFilesWithHttpInfo(path, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FilesResponse> resp = getListFilesWithHttpInfo(path, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get the file listing of a specific folder 
     * 
     * @param path Start with name of storage e.g. root folder &#39;/&#39;or some folder &#39;/folder1/..&#39; (optional, default to /)
     * @param storage User&#39;s storage name (optional)
     * @return ApiResponse&lt;FilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesResponse> getListFilesWithHttpInfo(String path, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getListFilesValidateBeforeCall(path, storage, null, null);
        Type localVarReturnType = new TypeToken<FilesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the file listing of a specific folder  (asynchronously)
     * 
     * @param path Start with name of storage e.g. root folder &#39;/&#39;or some folder &#39;/folder1/..&#39; (optional, default to /)
     * @param storage User&#39;s storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListFilesAsync(String path, String storage, final ApiCallback<FilesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListFilesValidateBeforeCall(path, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMhtInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMhtInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/mht";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMhtInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getMhtInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getMhtInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert MHT file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getMhtInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getMhtInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getMhtInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert MHT file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getMhtInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getMhtInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert MHT file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMhtInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMhtInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMovieAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMovieAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/movie/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMovieAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMovieAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getMovieAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getMovieAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page movie annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return MovieAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MovieAnnotationResponse getMovieAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<MovieAnnotationResponse> resp = getMovieAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<MovieAnnotationResponse> resp = getMovieAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page movie annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;MovieAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MovieAnnotationResponse> getMovieAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getMovieAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<MovieAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page movie annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMovieAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<MovieAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMovieAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MovieAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPage(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page info.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DocumentPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPageResponse getPage(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPageResponse> resp = getPageWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentPageResponse> resp = getPageWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page info.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DocumentPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPageResponse> getPageWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page info. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<DocumentPageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AnnotationsInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnnotationsInfoResponse getPageAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AnnotationsInfoResponse> resp = getPageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AnnotationsInfoResponse> resp = getPageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AnnotationsInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnnotationsInfoResponse> getPageAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AnnotationsInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read documant page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AnnotationsInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnotationsInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageCaretAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageCaretAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/caret"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageCaretAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageCaretAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageCaretAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageCaretAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page caret annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CaretAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CaretAnnotationsResponse getPageCaretAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CaretAnnotationsResponse> resp = getPageCaretAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<CaretAnnotationsResponse> resp = getPageCaretAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page caret annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CaretAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CaretAnnotationsResponse> getPageCaretAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageCaretAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CaretAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page caret annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageCaretAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<CaretAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageCaretAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CaretAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageCircleAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageCircleAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/circle"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageCircleAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageCircleAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageCircleAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageCircleAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page circle annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CircleAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CircleAnnotationsResponse getPageCircleAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CircleAnnotationsResponse> resp = getPageCircleAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<CircleAnnotationsResponse> resp = getPageCircleAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page circle annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CircleAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CircleAnnotationsResponse> getPageCircleAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageCircleAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CircleAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page circle annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageCircleAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<CircleAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageCircleAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CircleAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToBmp
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToBmpCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToBmpValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToBmp(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToBmp(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToBmpCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Bmp image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToBmp(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToBmpWithHttpInfo(name, pageNumber, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPageConvertToBmpWithHttpInfo(name, pageNumber, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Bmp image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToBmpWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToBmpValidateBeforeCall(name, pageNumber, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Bmp image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToBmpAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToBmpValidateBeforeCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToEmf
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToEmfCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToEmfValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToEmf(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToEmf(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToEmfCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Emf image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToEmf(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToEmfWithHttpInfo(name, pageNumber, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPageConvertToEmfWithHttpInfo(name, pageNumber, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Emf image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToEmfWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToEmfValidateBeforeCall(name, pageNumber, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Emf image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToEmfAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToEmfValidateBeforeCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToGif
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToGifCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToGifValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToGif(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToGif(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToGifCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Gif image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToGif(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToGifWithHttpInfo(name, pageNumber, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPageConvertToGifWithHttpInfo(name, pageNumber, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Gif image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToGifWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToGifValidateBeforeCall(name, pageNumber, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Gif image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToGifAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToGifValidateBeforeCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToJpeg
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToJpegCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToJpegValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToJpeg(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToJpegCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Jpeg image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToJpeg(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToJpegWithHttpInfo(name, pageNumber, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPageConvertToJpegWithHttpInfo(name, pageNumber, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Jpeg image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToJpegWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToJpegValidateBeforeCall(name, pageNumber, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Jpeg image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToJpegAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToJpegValidateBeforeCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToPng
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToPngCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToPngValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToPng(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToPng(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToPngCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Png image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToPng(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToPngWithHttpInfo(name, pageNumber, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPageConvertToPngWithHttpInfo(name, pageNumber, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Png image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToPngWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToPngValidateBeforeCall(name, pageNumber, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Png image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToPngAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToPngValidateBeforeCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToTiff
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToTiffCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToTiffValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToTiff(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToTiffCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Tiff image  and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToTiff(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToTiffWithHttpInfo(name, pageNumber, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPageConvertToTiffWithHttpInfo(name, pageNumber, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Tiff image  and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToTiffWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToTiffValidateBeforeCall(name, pageNumber, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Tiff image  and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToTiffAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToTiffValidateBeforeCall(name, pageNumber, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageFileAttachmentAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageFileAttachmentAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/fileattachment"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageFileAttachmentAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageFileAttachmentAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageFileAttachmentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageFileAttachmentAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FileAttachmentAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileAttachmentAnnotationsResponse getPageFileAttachmentAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FileAttachmentAnnotationsResponse> resp = getPageFileAttachmentAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FileAttachmentAnnotationsResponse> resp = getPageFileAttachmentAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FileAttachmentAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileAttachmentAnnotationsResponse> getPageFileAttachmentAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageFileAttachmentAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page FileAttachment annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageFileAttachmentAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<FileAttachmentAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageFileAttachmentAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageFreeTextAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageFreeTextAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/freetext"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageFreeTextAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageFreeTextAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageFreeTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageFreeTextAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page free text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FreeTextAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTextAnnotationsResponse getPageFreeTextAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FreeTextAnnotationsResponse> resp = getPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FreeTextAnnotationsResponse> resp = getPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page free text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FreeTextAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTextAnnotationsResponse> getPageFreeTextAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageFreeTextAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page free text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageFreeTextAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<FreeTextAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageFreeTextAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageHighlightAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageHighlightAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/highlight"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageHighlightAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageHighlightAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageHighlightAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageHighlightAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page highlight annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return HighlightAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HighlightAnnotationsResponse getPageHighlightAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<HighlightAnnotationsResponse> resp = getPageHighlightAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<HighlightAnnotationsResponse> resp = getPageHighlightAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page highlight annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;HighlightAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HighlightAnnotationsResponse> getPageHighlightAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageHighlightAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<HighlightAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page highlight annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageHighlightAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<HighlightAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageHighlightAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HighlightAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageInkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageInkAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/ink"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageInkAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageInkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageInkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageInkAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page ink annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return InkAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InkAnnotationsResponse getPageInkAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<InkAnnotationsResponse> resp = getPageInkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<InkAnnotationsResponse> resp = getPageInkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page ink annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;InkAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InkAnnotationsResponse> getPageInkAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageInkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<InkAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page ink annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageInkAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<InkAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageInkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InkAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageLineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageLineAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/line"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageLineAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageLineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageLineAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page line annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineAnnotationsResponse getPageLineAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LineAnnotationsResponse> resp = getPageLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<LineAnnotationsResponse> resp = getPageLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page line annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineAnnotationsResponse> getPageLineAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageLineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page line annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageLineAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<LineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageLineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageLinkAnnotation
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getPageLinkAnnotationCall(String name, Integer pageNumber, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/links/{linkId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()))
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageLinkAnnotationValidateBeforeCall(String name, Integer pageNumber, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling getPageLinkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageLinkAnnotationCall(name, pageNumber, linkId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page link annotation by ID.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LinkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public LinkAnnotationResponse getPageLinkAnnotation(String name, Integer pageNumber, String linkId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LinkAnnotationResponse> resp = getPageLinkAnnotationWithHttpInfo(name, pageNumber, linkId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<LinkAnnotationResponse> resp = getPageLinkAnnotationWithHttpInfo(name, pageNumber, linkId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page link annotation by ID.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LinkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<LinkAnnotationResponse> getPageLinkAnnotationWithHttpInfo(String name, Integer pageNumber, String linkId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageLinkAnnotationValidateBeforeCall(name, pageNumber, linkId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page link annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getPageLinkAnnotationAsync(String name, Integer pageNumber, String linkId, String storage, String folder, final ApiCallback<LinkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageLinkAnnotationValidateBeforeCall(name, pageNumber, linkId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageLinkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageLinkAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/links"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageLinkAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageLinkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageLinkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageLinkAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page link annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LinkAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkAnnotationsResponse getPageLinkAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LinkAnnotationsResponse> resp = getPageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<LinkAnnotationsResponse> resp = getPageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page link annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LinkAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkAnnotationsResponse> getPageLinkAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageLinkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LinkAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page link annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageLinkAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<LinkAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageLinkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageMovieAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageMovieAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/movie"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageMovieAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageMovieAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageMovieAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageMovieAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page movie annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return MovieAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MovieAnnotationsResponse getPageMovieAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<MovieAnnotationsResponse> resp = getPageMovieAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<MovieAnnotationsResponse> resp = getPageMovieAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page movie annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;MovieAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MovieAnnotationsResponse> getPageMovieAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageMovieAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<MovieAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page movie annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageMovieAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<MovieAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageMovieAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MovieAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPagePolyLineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPagePolyLineAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polyline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPagePolyLineAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPagePolyLineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPagePolyLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPagePolyLineAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page polyline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolyLineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolyLineAnnotationsResponse getPagePolyLineAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolyLineAnnotationsResponse> resp = getPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PolyLineAnnotationsResponse> resp = getPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page polyline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolyLineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolyLineAnnotationsResponse> getPagePolyLineAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPagePolyLineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page polyline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagePolyLineAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<PolyLineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagePolyLineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPagePolygonAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPagePolygonAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polygon"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPagePolygonAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPagePolygonAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPagePolygonAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPagePolygonAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page polygon annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolygonAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolygonAnnotationsResponse getPagePolygonAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolygonAnnotationsResponse> resp = getPagePolygonAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PolygonAnnotationsResponse> resp = getPagePolygonAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page polygon annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolygonAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolygonAnnotationsResponse> getPagePolygonAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPagePolygonAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolygonAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page polygon annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagePolygonAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<PolygonAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagePolygonAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolygonAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPagePopupAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPagePopupAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/popup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPagePopupAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPagePopupAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPagePopupAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPagePopupAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page popup annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationsResponse getPagePopupAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationsResponse> resp = getPagePopupAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PopupAnnotationsResponse> resp = getPagePopupAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page popup annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationsResponse> getPagePopupAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPagePopupAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page popup annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagePopupAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<PopupAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagePopupAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageRedactionAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageRedactionAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/redaction"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageRedactionAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageRedactionAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageRedactionAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageRedactionAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page redaction annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RedactionAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedactionAnnotationsResponse getPageRedactionAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RedactionAnnotationsResponse> resp = getPageRedactionAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<RedactionAnnotationsResponse> resp = getPageRedactionAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page redaction annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RedactionAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedactionAnnotationsResponse> getPageRedactionAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageRedactionAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RedactionAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page redaction annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageRedactionAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<RedactionAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageRedactionAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedactionAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageSoundAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageSoundAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/sound"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageSoundAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageSoundAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageSoundAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageSoundAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page sound annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SoundAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoundAnnotationsResponse getPageSoundAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SoundAnnotationsResponse> resp = getPageSoundAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SoundAnnotationsResponse> resp = getPageSoundAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page sound annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SoundAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoundAnnotationsResponse> getPageSoundAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageSoundAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SoundAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page sound annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageSoundAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<SoundAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageSoundAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoundAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageSquareAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageSquareAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/square"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageSquareAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageSquareAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageSquareAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageSquareAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page square annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquareAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquareAnnotationsResponse getPageSquareAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquareAnnotationsResponse> resp = getPageSquareAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SquareAnnotationsResponse> resp = getPageSquareAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page square annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquareAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquareAnnotationsResponse> getPageSquareAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageSquareAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquareAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page square annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageSquareAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<SquareAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageSquareAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquareAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageSquigglyAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageSquigglyAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/squiggly"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageSquigglyAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageSquigglyAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageSquigglyAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageSquigglyAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquigglyAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquigglyAnnotationsResponse getPageSquigglyAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquigglyAnnotationsResponse> resp = getPageSquigglyAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SquigglyAnnotationsResponse> resp = getPageSquigglyAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquigglyAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquigglyAnnotationsResponse> getPageSquigglyAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageSquigglyAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page squiggly annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageSquigglyAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<SquigglyAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageSquigglyAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageStrikeOutAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageStrikeOutAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/strikeout"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageStrikeOutAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageStrikeOutAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageStrikeOutAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageStrikeOutAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StrikeOutAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrikeOutAnnotationsResponse getPageStrikeOutAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StrikeOutAnnotationsResponse> resp = getPageStrikeOutAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<StrikeOutAnnotationsResponse> resp = getPageStrikeOutAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StrikeOutAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrikeOutAnnotationsResponse> getPageStrikeOutAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageStrikeOutAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page StrikeOut annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageStrikeOutAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<StrikeOutAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageStrikeOutAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageText
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageTextCall(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "format", format));
        if (regex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("regex", regex));
        if (splitRects != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitRects", splitRects));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (LLX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LLX", LLX));
        if (LLY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LLY", LLY));
        if (URX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("URX", URX));
        if (URY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("URY", URY));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageTextValidateBeforeCall(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'LLX' is set
        if (LLX == null) {
            throw new ApiException("Missing the required parameter 'LLX' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'LLY' is set
        if (LLY == null) {
            throw new ApiException("Missing the required parameter 'LLY' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'URX' is set
        if (URX == null) {
            throw new ApiException("Missing the required parameter 'URX' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'URY' is set
        if (URY == null) {
            throw new ApiException("Missing the required parameter 'URY' when calling getPageText(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageTextCall(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read page text items.
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return TextRectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextRectsResponse getPageText(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<TextRectsResponse> resp = getPageTextWithHttpInfo(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<TextRectsResponse> resp = getPageTextWithHttpInfo(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read page text items.
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;TextRectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextRectsResponse> getPageTextWithHttpInfo(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPageTextValidateBeforeCall(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TextRectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read page text items. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageTextAsync(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ApiCallback<TextRectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageTextValidateBeforeCall(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextRectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageTextAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageTextAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageTextAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageTextAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageTextAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextAnnotationsResponse getPageTextAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextAnnotationsResponse> resp = getPageTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<TextAnnotationsResponse> resp = getPageTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextAnnotationsResponse> getPageTextAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageTextAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageTextAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<TextAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageTextAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageUnderlineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageUnderlineAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/underline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageUnderlineAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageUnderlineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageUnderlineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageUnderlineAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page underline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return UnderlineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnderlineAnnotationsResponse getPageUnderlineAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<UnderlineAnnotationsResponse> resp = getPageUnderlineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<UnderlineAnnotationsResponse> resp = getPageUnderlineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page underline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;UnderlineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnderlineAnnotationsResponse> getPageUnderlineAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageUnderlineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page underline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageUnderlineAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<UnderlineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageUnderlineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPages
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPagesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPagesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPages(Async)");
        }
        

        com.squareup.okhttp.Call call = getPagesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document pages info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DocumentPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPagesResponse getPages(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPagesResponse> resp = getPagesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentPagesResponse> resp = getPagesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document pages info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DocumentPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPagesResponse> getPagesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPagesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document pages info. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagesAsync(String name, String storage, String folder, final ApiCallback<DocumentPagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPclInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPclInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/pcl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPclInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getPclInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getPclInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PCL file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPclInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPclInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPclInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PCL file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPclInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPclInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PCL file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPclInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPclInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToDoc
     * @param name The document name. (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToDocCall(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/doc"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addReturnToLineEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addReturnToLineEnd", addReturnToLineEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (imageResolutionX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionX", imageResolutionX));
        if (imageResolutionY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionY", imageResolutionY));
        if (maxDistanceBetweenTextLines != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxDistanceBetweenTextLines", maxDistanceBetweenTextLines));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        if (recognizeBullets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recognizeBullets", recognizeBullets));
        if (relativeHorizontalProximity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("relativeHorizontalProximity", relativeHorizontalProximity));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToDocValidateBeforeCall(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToDocCall(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to DOC format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToDoc(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToDocWithHttpInfo(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToDocWithHttpInfo(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to DOC format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToDocWithHttpInfo(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToDocValidateBeforeCall(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to DOC format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToDocAsync(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToDocValidateBeforeCall(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToEpub
     * @param name The document name. (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToEpubCall(String name, String contentRecognitionMode, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/epub"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contentRecognitionMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentRecognitionMode", contentRecognitionMode));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToEpubValidateBeforeCall(String name, String contentRecognitionMode, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToEpub(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToEpubCall(name, contentRecognitionMode, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToEpub(String name, String contentRecognitionMode, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToEpubWithHttpInfo(name, contentRecognitionMode, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToEpubWithHttpInfo(name, contentRecognitionMode, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToEpubWithHttpInfo(String name, String contentRecognitionMode, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToEpubValidateBeforeCall(name, contentRecognitionMode, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to EPUB format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToEpubAsync(String name, String contentRecognitionMode, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToEpubValidateBeforeCall(name, contentRecognitionMode, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToHtml
     * @param name The document name. (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToHtmlCall(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/html"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (additionalMarginWidthInPoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additionalMarginWidthInPoints", additionalMarginWidthInPoints));
        if (compressSvgGraphicsIfAny != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressSvgGraphicsIfAny", compressSvgGraphicsIfAny));
        if (convertMarkedContentToLayers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convertMarkedContentToLayers", convertMarkedContentToLayers));
        if (defaultFontName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultFontName", defaultFontName));
        if (documentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("documentType", documentType));
        if (fixedLayout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fixedLayout", fixedLayout));
        if (imageResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolution", imageResolution));
        if (minimalLineWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimalLineWidth", minimalLineWidth));
        if (preventGlyphsGrouping != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preventGlyphsGrouping", preventGlyphsGrouping));
        if (splitCssIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitCssIntoPages", splitCssIntoPages));
        if (splitIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitIntoPages", splitIntoPages));
        if (useZOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useZOrder", useZOrder));
        if (antialiasingProcessing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("antialiasingProcessing", antialiasingProcessing));
        if (cssClassNamesPrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cssClassNamesPrefix", cssClassNamesPrefix));
        if (explicitListOfSavedPages != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "explicitListOfSavedPages", explicitListOfSavedPages));
        if (fontEncodingStrategy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontEncodingStrategy", fontEncodingStrategy));
        if (fontSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSavingMode", fontSavingMode));
        if (htmlMarkupGenerationMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlMarkupGenerationMode", htmlMarkupGenerationMode));
        if (lettersPositioningMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lettersPositioningMethod", lettersPositioningMethod));
        if (pagesFlowTypeDependsOnViewersScreenSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesFlowTypeDependsOnViewersScreenSize", pagesFlowTypeDependsOnViewersScreenSize));
        if (partsEmbeddingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partsEmbeddingMode", partsEmbeddingMode));
        if (rasterImagesSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rasterImagesSavingMode", rasterImagesSavingMode));
        if (removeEmptyAreasOnTopAndBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeEmptyAreasOnTopAndBottom", removeEmptyAreasOnTopAndBottom));
        if (saveShadowedTextsAsTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveShadowedTextsAsTransparentTexts", saveShadowedTextsAsTransparentTexts));
        if (saveTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveTransparentTexts", saveTransparentTexts));
        if (specialFolderForAllImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForAllImages", specialFolderForAllImages));
        if (specialFolderForSvgImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForSvgImages", specialFolderForSvgImages));
        if (trySaveTextUnderliningAndStrikeoutingInCss != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trySaveTextUnderliningAndStrikeoutingInCss", trySaveTextUnderliningAndStrikeoutingInCss));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToHtmlValidateBeforeCall(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToHtml(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToHtmlCall(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to Html format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToHtml(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToHtmlWithHttpInfo(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToHtmlWithHttpInfo(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to Html format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToHtmlWithHttpInfo(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToHtmlValidateBeforeCall(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to Html format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToHtmlAsync(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToHtmlValidateBeforeCall(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToLaTeX
     * @param name The document name. (required)
     * @param pagesCount Pages count. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToLaTeXCall(String name, Integer pagesCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/latex"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pagesCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesCount", pagesCount));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToLaTeXValidateBeforeCall(String name, Integer pagesCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToLaTeX(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToLaTeXCall(name, pagesCount, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param pagesCount Pages count. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToLaTeX(String name, Integer pagesCount, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToLaTeXWithHttpInfo(name, pagesCount, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToLaTeXWithHttpInfo(name, pagesCount, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param pagesCount Pages count. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToLaTeXWithHttpInfo(String name, Integer pagesCount, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToLaTeXValidateBeforeCall(name, pagesCount, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to LaTeX format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pagesCount Pages count. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToLaTeXAsync(String name, Integer pagesCount, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToLaTeXValidateBeforeCall(name, pagesCount, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToMobiXml
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToMobiXmlCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/mobixml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToMobiXmlValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToMobiXml(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToMobiXmlCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToMobiXml(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToMobiXmlWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToMobiXmlWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToMobiXmlWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToMobiXmlValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToMobiXmlAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToMobiXmlValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToPdfA
     * @param name The document name. (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToPdfACall(String name, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/pdfa"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToPdfAValidateBeforeCall(String name, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToPdfA(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPdfInStorageToPdfA(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToPdfACall(name, type, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToPdfA(String name, String type, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToPdfAWithHttpInfo(name, type, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToPdfAWithHttpInfo(name, type, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToPdfAWithHttpInfo(String name, String type, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToPdfAValidateBeforeCall(name, type, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to PdfA format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToPdfAAsync(String name, String type, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToPdfAValidateBeforeCall(name, type, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToPptx
     * @param name The document name. (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToPptxCall(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/pptx"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (separateImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separateImages", separateImages));
        if (slidesAsImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slidesAsImages", slidesAsImages));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToPptxValidateBeforeCall(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToPptx(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToPptxCall(name, separateImages, slidesAsImages, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToPptx(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToPptxWithHttpInfo(name, separateImages, slidesAsImages, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToPptxWithHttpInfo(name, separateImages, slidesAsImages, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToPptxWithHttpInfo(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToPptxValidateBeforeCall(name, separateImages, slidesAsImages, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to PPTX format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToPptxAsync(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToPptxValidateBeforeCall(name, separateImages, slidesAsImages, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToSvg
     * @param name The document name. (required)
     * @param compressOutputToZipArchive Specifies whether output will be created as one zip-archive. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToSvgCall(String name, Boolean compressOutputToZipArchive, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/svg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (compressOutputToZipArchive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressOutputToZipArchive", compressOutputToZipArchive));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToSvgValidateBeforeCall(String name, Boolean compressOutputToZipArchive, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToSvg(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToSvgCall(name, compressOutputToZipArchive, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to SVG format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param compressOutputToZipArchive Specifies whether output will be created as one zip-archive. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToSvg(String name, Boolean compressOutputToZipArchive, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToSvgWithHttpInfo(name, compressOutputToZipArchive, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToSvgWithHttpInfo(name, compressOutputToZipArchive, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to SVG format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param compressOutputToZipArchive Specifies whether output will be created as one zip-archive. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToSvgWithHttpInfo(String name, Boolean compressOutputToZipArchive, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToSvgValidateBeforeCall(name, compressOutputToZipArchive, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to SVG format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param compressOutputToZipArchive Specifies whether output will be created as one zip-archive. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToSvgAsync(String name, Boolean compressOutputToZipArchive, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToSvgValidateBeforeCall(name, compressOutputToZipArchive, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToTiff
     * @param name The document name. (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToTiffCall(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (brightness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("brightness", brightness));
        if (compression != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compression", compression));
        if (colorDepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("colorDepth", colorDepth));
        if (leftMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("leftMargin", leftMargin));
        if (rightMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rightMargin", rightMargin));
        if (topMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topMargin", topMargin));
        if (bottomMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bottomMargin", bottomMargin));
        if (orientation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orientation", orientation));
        if (skipBlankPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipBlankPages", skipBlankPages));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (xResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xResolution", xResolution));
        if (yResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yResolution", yResolution));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageCount", pageCount));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToTiffValidateBeforeCall(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToTiffCall(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToTiff(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToTiffWithHttpInfo(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToTiffWithHttpInfo(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToTiffWithHttpInfo(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToTiffValidateBeforeCall(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to TIFF format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToTiffAsync(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToTiffValidateBeforeCall(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToXls
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXlsCall(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xls"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToXlsValidateBeforeCall(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToXls(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToXlsCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XLS format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToXls(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToXlsWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToXlsWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XLS format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToXlsWithHttpInfo(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToXlsValidateBeforeCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XLS format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXlsAsync(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToXlsValidateBeforeCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToXml
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXmlCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToXmlValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToXmlCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XML format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToXml(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToXmlWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToXmlWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XML format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToXmlWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToXmlValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XML format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXmlAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToXmlValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToXps
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXpsCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToXpsValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToXps(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToXpsCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XPS format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToXps(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToXpsWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPdfInStorageToXpsWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XPS format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToXpsWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToXpsValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XPS format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXpsAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToXpsValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPolyLineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPolyLineAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polyline/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPolyLineAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPolyLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getPolyLineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getPolyLineAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page polyline annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolyLineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolyLineAnnotationResponse getPolyLineAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolyLineAnnotationResponse> resp = getPolyLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PolyLineAnnotationResponse> resp = getPolyLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page polyline annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolyLineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolyLineAnnotationResponse> getPolyLineAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPolyLineAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page polyline annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPolyLineAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<PolyLineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPolyLineAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPolygonAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPolygonAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polygon/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPolygonAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPolygonAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getPolygonAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getPolygonAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page polygon annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolygonAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolygonAnnotationResponse getPolygonAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolygonAnnotationResponse> resp = getPolygonAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PolygonAnnotationResponse> resp = getPolygonAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page polygon annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolygonAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolygonAnnotationResponse> getPolygonAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPolygonAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolygonAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page polygon annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPolygonAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<PolygonAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPolygonAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolygonAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPopupAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPopupAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/popup/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPopupAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getPopupAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getPopupAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page popup annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationResponse getPopupAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationResponse> resp = getPopupAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PopupAnnotationResponse> resp = getPopupAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page popup annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationResponse> getPopupAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPopupAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page popup annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPopupAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<PopupAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPopupAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPsInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPsInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/ps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPsInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getPsInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getPsInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PS file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPsInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPsInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getPsInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PS file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPsInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPsInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PS file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPsInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPsInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRedactionAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRedactionAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/redaction/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRedactionAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getRedactionAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getRedactionAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getRedactionAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page redaction annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RedactionAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedactionAnnotationResponse getRedactionAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RedactionAnnotationResponse> resp = getRedactionAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<RedactionAnnotationResponse> resp = getRedactionAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page redaction annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RedactionAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedactionAnnotationResponse> getRedactionAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getRedactionAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RedactionAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page redaction annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRedactionAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<RedactionAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRedactionAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedactionAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSoundAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSoundAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSoundAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSoundAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getSoundAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getSoundAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page sound annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SoundAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoundAnnotationResponse getSoundAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SoundAnnotationResponse> resp = getSoundAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SoundAnnotationResponse> resp = getSoundAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page sound annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SoundAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoundAnnotationResponse> getSoundAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSoundAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SoundAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page sound annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSoundAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<SoundAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSoundAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoundAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSoundAnnotationData
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSoundAnnotationDataCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound/{annotationId}/data"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSoundAnnotationDataValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSoundAnnotationData(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getSoundAnnotationData(Async)");
        }
        

        com.squareup.okhttp.Call call = getSoundAnnotationDataCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page sound annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getSoundAnnotationData(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getSoundAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getSoundAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page sound annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getSoundAnnotationDataWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSoundAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page sound annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSoundAnnotationDataAsync(String name, String annotationId, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSoundAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSquareAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSquareAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/square/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSquareAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSquareAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getSquareAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getSquareAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page square annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquareAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquareAnnotationResponse getSquareAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquareAnnotationResponse> resp = getSquareAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SquareAnnotationResponse> resp = getSquareAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page square annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquareAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquareAnnotationResponse> getSquareAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSquareAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquareAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page square annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSquareAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<SquareAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSquareAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquareAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSquigglyAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSquigglyAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/squiggly/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSquigglyAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSquigglyAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getSquigglyAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getSquigglyAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page squiggly annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquigglyAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquigglyAnnotationResponse getSquigglyAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquigglyAnnotationResponse> resp = getSquigglyAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SquigglyAnnotationResponse> resp = getSquigglyAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page squiggly annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquigglyAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquigglyAnnotationResponse> getSquigglyAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSquigglyAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page squiggly annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSquigglyAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<SquigglyAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSquigglyAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStrikeOutAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStrikeOutAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/strikeout/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStrikeOutAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStrikeOutAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getStrikeOutAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getStrikeOutAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page StrikeOut annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StrikeOutAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrikeOutAnnotationResponse getStrikeOutAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StrikeOutAnnotationResponse> resp = getStrikeOutAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<StrikeOutAnnotationResponse> resp = getStrikeOutAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page StrikeOut annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StrikeOutAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrikeOutAnnotationResponse> getStrikeOutAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getStrikeOutAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page StrikeOut annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStrikeOutAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<StrikeOutAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStrikeOutAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSvgInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSvgInStorageToPdfCall(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/svg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (adjustPageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("adjustPageSize", adjustPageSize));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSvgInStorageToPdfValidateBeforeCall(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getSvgInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getSvgInStorageToPdfCall(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert SVG file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getSvgInStorageToPdf(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getSvgInStorageToPdfWithHttpInfo(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getSvgInStorageToPdfWithHttpInfo(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert SVG file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getSvgInStorageToPdfWithHttpInfo(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSvgInStorageToPdfValidateBeforeCall(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert SVG file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSvgInStorageToPdfAsync(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSvgInStorageToPdfValidateBeforeCall(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getText
     * @param name The document name. (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTextCall(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "format", format));
        if (regex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("regex", regex));
        if (splitRects != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitRects", splitRects));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (LLX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LLX", LLX));
        if (LLY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LLY", LLY));
        if (URX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("URX", URX));
        if (URY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("URY", URY));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTextValidateBeforeCall(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getText(Async)");
        }
        
        // verify the required parameter 'LLX' is set
        if (LLX == null) {
            throw new ApiException("Missing the required parameter 'LLX' when calling getText(Async)");
        }
        
        // verify the required parameter 'LLY' is set
        if (LLY == null) {
            throw new ApiException("Missing the required parameter 'LLY' when calling getText(Async)");
        }
        
        // verify the required parameter 'URX' is set
        if (URX == null) {
            throw new ApiException("Missing the required parameter 'URX' when calling getText(Async)");
        }
        
        // verify the required parameter 'URY' is set
        if (URY == null) {
            throw new ApiException("Missing the required parameter 'URY' when calling getText(Async)");
        }
        

        com.squareup.okhttp.Call call = getTextCall(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document text.
     * 
     * @param name The document name. (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return TextRectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextRectsResponse getText(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<TextRectsResponse> resp = getTextWithHttpInfo(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<TextRectsResponse> resp = getTextWithHttpInfo(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document text.
     * 
     * @param name The document name. (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;TextRectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextRectsResponse> getTextWithHttpInfo(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getTextValidateBeforeCall(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TextRectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document text. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTextAsync(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ApiCallback<TextRectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTextValidateBeforeCall(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextRectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTextAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTextAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/text/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTextAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getTextAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getTextAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page text annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextAnnotationResponse getTextAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextAnnotationResponse> resp = getTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<TextAnnotationResponse> resp = getTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page text annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextAnnotationResponse> getTextAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getTextAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page text annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTextAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<TextAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTextAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUnderlineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUnderlineAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/underline/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUnderlineAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getUnderlineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getUnderlineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getUnderlineAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page underline annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return UnderlineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnderlineAnnotationResponse getUnderlineAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<UnderlineAnnotationResponse> resp = getUnderlineAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<UnderlineAnnotationResponse> resp = getUnderlineAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page underline annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;UnderlineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnderlineAnnotationResponse> getUnderlineAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getUnderlineAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page underline annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUnderlineAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<UnderlineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUnderlineAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVerifySignature
     * @param name The document name. (required)
     * @param signName Sign name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVerifySignatureCall(String name, String signName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/verifySignature"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (signName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signName", signName));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVerifySignatureValidateBeforeCall(String name, String signName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getVerifySignature(Async)");
        }
        
        // verify the required parameter 'signName' is set
        if (signName == null) {
            throw new ApiException("Missing the required parameter 'signName' when calling getVerifySignature(Async)");
        }
        

        com.squareup.okhttp.Call call = getVerifySignatureCall(name, signName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Verify signature document.
     * 
     * @param name The document name. (required)
     * @param signName Sign name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SignatureVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignatureVerifyResponse getVerifySignature(String name, String signName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SignatureVerifyResponse> resp = getVerifySignatureWithHttpInfo(name, signName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SignatureVerifyResponse> resp = getVerifySignatureWithHttpInfo(name, signName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Verify signature document.
     * 
     * @param name The document name. (required)
     * @param signName Sign name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SignatureVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignatureVerifyResponse> getVerifySignatureWithHttpInfo(String name, String signName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getVerifySignatureValidateBeforeCall(name, signName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SignatureVerifyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify signature document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param signName Sign name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVerifySignatureAsync(String name, String signName, String storage, String folder, final ApiCallback<SignatureVerifyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVerifySignatureValidateBeforeCall(name, signName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignatureVerifyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebInStorageToPdf
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebInStorageToPdfCall(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/web";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebInStorageToPdfValidateBeforeCall(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getWebInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getWebInStorageToPdfCall(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert web page to PDF format and return resulting file in response. 
     * 
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getWebInStorageToPdf(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getWebInStorageToPdfWithHttpInfo(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getWebInStorageToPdfWithHttpInfo(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert web page to PDF format and return resulting file in response. 
     * 
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getWebInStorageToPdfWithHttpInfo(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getWebInStorageToPdfValidateBeforeCall(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert web page to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebInStorageToPdfAsync(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebInStorageToPdfValidateBeforeCall(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWordsPerPage
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWordsPerPageCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/wordCount"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWordsPerPageValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getWordsPerPage(Async)");
        }
        

        com.squareup.okhttp.Call call = getWordsPerPageCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get number of words per document page.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return WordCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WordCountResponse getWordsPerPage(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<WordCountResponse> resp = getWordsPerPageWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<WordCountResponse> resp = getWordsPerPageWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get number of words per document page.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;WordCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WordCountResponse> getWordsPerPageWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getWordsPerPageValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<WordCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get number of words per document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWordsPerPageAsync(String name, String storage, String folder, final ApiCallback<WordCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWordsPerPageValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WordCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getXfaPdfInStorageToAcroForm
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getXfaPdfInStorageToAcroFormCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xfatoacroform"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getXfaPdfInStorageToAcroFormValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getXfaPdfInStorageToAcroForm(Async)");
        }
        

        com.squareup.okhttp.Call call = getXfaPdfInStorageToAcroFormCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getXfaPdfInStorageToAcroForm(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getXfaPdfInStorageToAcroFormWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getXfaPdfInStorageToAcroFormWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getXfaPdfInStorageToAcroFormWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getXfaPdfInStorageToAcroFormValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and returns resulting file response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getXfaPdfInStorageToAcroFormAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getXfaPdfInStorageToAcroFormValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getXmlInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getXmlInStorageToPdfCall(String srcPath, String xslFilePath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (xslFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xslFilePath", xslFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getXmlInStorageToPdfValidateBeforeCall(String srcPath, String xslFilePath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getXmlInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getXmlInStorageToPdfCall(srcPath, xslFilePath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getXmlInStorageToPdf(String srcPath, String xslFilePath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getXmlInStorageToPdfWithHttpInfo(srcPath, xslFilePath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getXmlInStorageToPdfWithHttpInfo(srcPath, xslFilePath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getXmlInStorageToPdfWithHttpInfo(String srcPath, String xslFilePath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getXmlInStorageToPdfValidateBeforeCall(srcPath, xslFilePath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XML file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getXmlInStorageToPdfAsync(String srcPath, String xslFilePath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getXmlInStorageToPdfValidateBeforeCall(srcPath, xslFilePath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getXpsInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getXpsInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/xps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getXpsInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getXpsInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getXpsInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XPS file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getXpsInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getXpsInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getXpsInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XPS file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getXpsInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getXpsInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XPS file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getXpsInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getXpsInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getXslFoInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xslfo) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getXslFoInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/xslfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getXslFoInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getXslFoInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getXslFoInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xslfo) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getXslFoInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getXslFoInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = getXslFoInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xslfo) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getXslFoInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getXslFoInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XslFo file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xslfo) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getXslFoInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getXslFoInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAppendDocument
     * @param name The original document name. (required)
     * @param appendDocument with the append document data. (optional)
     * @param appendFile Append file server path. (optional)
     * @param startPage Appending start page. (optional, default to 0)
     * @param endPage Appending end page. (optional, default to 0)
     * @param storage The documents storage. (optional)
     * @param folder The original document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAppendDocumentCall(String name, AppendDocument appendDocument, String appendFile, Integer startPage, Integer endPage, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = appendDocument;

        // create path and map variables
        String localVarPath = "/pdf/{name}/appendDocument"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appendFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appendFile", appendFile));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startPage", startPage));
        if (endPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endPage", endPage));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAppendDocumentValidateBeforeCall(String name, AppendDocument appendDocument, String appendFile, Integer startPage, Integer endPage, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAppendDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postAppendDocumentCall(name, appendDocument, appendFile, startPage, endPage, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Append document to existing one.
     * 
     * @param name The original document name. (required)
     * @param appendDocument with the append document data. (optional)
     * @param appendFile Append file server path. (optional)
     * @param startPage Appending start page. (optional, default to 0)
     * @param endPage Appending end page. (optional, default to 0)
     * @param storage The documents storage. (optional)
     * @param folder The original document folder. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse postAppendDocument(String name, AppendDocument appendDocument, String appendFile, Integer startPage, Integer endPage, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentResponse> resp = postAppendDocumentWithHttpInfo(name, appendDocument, appendFile, startPage, endPage, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentResponse> resp = postAppendDocumentWithHttpInfo(name, appendDocument, appendFile, startPage, endPage, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Append document to existing one.
     * 
     * @param name The original document name. (required)
     * @param appendDocument with the append document data. (optional)
     * @param appendFile Append file server path. (optional)
     * @param startPage Appending start page. (optional, default to 0)
     * @param endPage Appending end page. (optional, default to 0)
     * @param storage The documents storage. (optional)
     * @param folder The original document folder. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> postAppendDocumentWithHttpInfo(String name, AppendDocument appendDocument, String appendFile, Integer startPage, Integer endPage, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postAppendDocumentValidateBeforeCall(name, appendDocument, appendFile, startPage, endPage, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Append document to existing one. (asynchronously)
     * 
     * @param name The original document name. (required)
     * @param appendDocument with the append document data. (optional)
     * @param appendFile Append file server path. (optional)
     * @param startPage Appending start page. (optional, default to 0)
     * @param endPage Appending end page. (optional, default to 0)
     * @param storage The documents storage. (optional)
     * @param folder The original document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAppendDocumentAsync(String name, AppendDocument appendDocument, String appendFile, Integer startPage, Integer endPage, String storage, String folder, final ApiCallback<DocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAppendDocumentValidateBeforeCall(name, appendDocument, appendFile, startPage, endPage, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCreateField
     * @param name The document name. (required)
     * @param page Document page number. (required)
     * @param field with the field data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCreateFieldCall(String name, Integer page, Field field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCreateFieldValidateBeforeCall(String name, Integer page, Field field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postCreateField(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling postCreateField(Async)");
        }
        

        com.squareup.okhttp.Call call = postCreateFieldCall(name, page, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create field.
     * 
     * @param name The document name. (required)
     * @param page Document page number. (required)
     * @param field with the field data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postCreateField(String name, Integer page, Field field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postCreateFieldWithHttpInfo(name, page, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postCreateFieldWithHttpInfo(name, page, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Create field.
     * 
     * @param name The document name. (required)
     * @param page Document page number. (required)
     * @param field with the field data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postCreateFieldWithHttpInfo(String name, Integer page, Field field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postCreateFieldValidateBeforeCall(name, page, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create field. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param page Document page number. (required)
     * @param field with the field data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCreateFieldAsync(String name, Integer page, Field field, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCreateFieldValidateBeforeCall(name, page, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDocumentTextReplace
     * @param name  (required)
     * @param textReplace  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDocumentTextReplaceCall(String name, TextReplaceListRequest textReplace, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = textReplace;

        // create path and map variables
        String localVarPath = "/pdf/{name}/text/replace"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDocumentTextReplaceValidateBeforeCall(String name, TextReplaceListRequest textReplace, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postDocumentTextReplace(Async)");
        }
        
        // verify the required parameter 'textReplace' is set
        if (textReplace == null) {
            throw new ApiException("Missing the required parameter 'textReplace' when calling postDocumentTextReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = postDocumentTextReplaceCall(name, textReplace, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Document&#39;s replace text method.
     * 
     * @param name  (required)
     * @param textReplace  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return TextReplaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextReplaceResponse postDocumentTextReplace(String name, TextReplaceListRequest textReplace, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextReplaceResponse> resp = postDocumentTextReplaceWithHttpInfo(name, textReplace, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<TextReplaceResponse> resp = postDocumentTextReplaceWithHttpInfo(name, textReplace, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Document&#39;s replace text method.
     * 
     * @param name  (required)
     * @param textReplace  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;TextReplaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextReplaceResponse> postDocumentTextReplaceWithHttpInfo(String name, TextReplaceListRequest textReplace, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postDocumentTextReplaceValidateBeforeCall(name, textReplace, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextReplaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Document&#39;s replace text method. (asynchronously)
     * 
     * @param name  (required)
     * @param textReplace  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDocumentTextReplaceAsync(String name, TextReplaceListRequest textReplace, String storage, String folder, final ApiCallback<TextReplaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDocumentTextReplaceValidateBeforeCall(name, textReplace, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextReplaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFlattenDocument
     * @param name The document name. (required)
     * @param updateAppearances If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance.. (optional)
     * @param callEvents If set, formatting and other JavaScript events will be called. (optional)
     * @param hideButtons If set, buttons will be removed from flattened document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postFlattenDocumentCall(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/flatten"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateAppearances != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateAppearances", updateAppearances));
        if (callEvents != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("callEvents", callEvents));
        if (hideButtons != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hideButtons", hideButtons));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFlattenDocumentValidateBeforeCall(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postFlattenDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postFlattenDocumentCall(name, updateAppearances, callEvents, hideButtons, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flatten the document.
     * 
     * @param name The document name. (required)
     * @param updateAppearances If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance.. (optional)
     * @param callEvents If set, formatting and other JavaScript events will be called. (optional)
     * @param hideButtons If set, buttons will be removed from flattened document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postFlattenDocument(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postFlattenDocumentWithHttpInfo(name, updateAppearances, callEvents, hideButtons, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postFlattenDocumentWithHttpInfo(name, updateAppearances, callEvents, hideButtons, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Flatten the document.
     * 
     * @param name The document name. (required)
     * @param updateAppearances If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance.. (optional)
     * @param callEvents If set, formatting and other JavaScript events will be called. (optional)
     * @param hideButtons If set, buttons will be removed from flattened document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postFlattenDocumentWithHttpInfo(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postFlattenDocumentValidateBeforeCall(name, updateAppearances, callEvents, hideButtons, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flatten the document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param updateAppearances If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance.. (optional)
     * @param callEvents If set, formatting and other JavaScript events will be called. (optional)
     * @param hideButtons If set, buttons will be removed from flattened document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFlattenDocumentAsync(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFlattenDocumentValidateBeforeCall(name, updateAppearances, callEvents, hideButtons, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInsertImage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param llx Coordinate lower left X. (required)
     * @param lly Coordinate lower left Y. (required)
     * @param urx Coordinate upper right X. (required)
     * @param ury Coordinate upper right Y. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInsertImageCall(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = image;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (llx != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("llx", llx));
        if (lly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lly", lly));
        if (urx != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("urx", urx));
        if (ury != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ury", ury));
        if (imageFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageFilePath", imageFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInsertImageValidateBeforeCall(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'llx' is set
        if (llx == null) {
            throw new ApiException("Missing the required parameter 'llx' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'lly' is set
        if (lly == null) {
            throw new ApiException("Missing the required parameter 'lly' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'urx' is set
        if (urx == null) {
            throw new ApiException("Missing the required parameter 'urx' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'ury' is set
        if (ury == null) {
            throw new ApiException("Missing the required parameter 'ury' when calling postInsertImage(Async)");
        }
        

        com.squareup.okhttp.Call call = postInsertImageCall(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert image to document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param llx Coordinate lower left X. (required)
     * @param lly Coordinate lower left Y. (required)
     * @param urx Coordinate upper right X. (required)
     * @param ury Coordinate upper right Y. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postInsertImage(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postInsertImageWithHttpInfo(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postInsertImageWithHttpInfo(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Insert image to document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param llx Coordinate lower left X. (required)
     * @param lly Coordinate lower left Y. (required)
     * @param urx Coordinate upper right X. (required)
     * @param ury Coordinate upper right Y. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postInsertImageWithHttpInfo(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image) throws ApiException {
        com.squareup.okhttp.Call call = postInsertImageValidateBeforeCall(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert image to document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param llx Coordinate lower left X. (required)
     * @param lly Coordinate lower left Y. (required)
     * @param urx Coordinate upper right X. (required)
     * @param ury Coordinate upper right Y. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInsertImageAsync(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInsertImageValidateBeforeCall(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postMoveFile
     * @param src Source file path e.g. /fileSource.ext (required)
     * @param dest Destination file path e.g. /fileDestination.ext (required)
     * @param versionId Source file&#39;s version, (optional)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postMoveFileCall(String src, String dest, String versionId, String storage, String destStorage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (src != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("src", src));
        if (dest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dest", dest));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (destStorage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destStorage", destStorage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postMoveFileValidateBeforeCall(String src, String dest, String versionId, String storage, String destStorage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling postMoveFile(Async)");
        }
        
        // verify the required parameter 'dest' is set
        if (dest == null) {
            throw new ApiException("Missing the required parameter 'dest' when calling postMoveFile(Async)");
        }
        

        com.squareup.okhttp.Call call = postMoveFileCall(src, dest, versionId, storage, destStorage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Move a specific file
     * 
     * @param src Source file path e.g. /fileSource.ext (required)
     * @param dest Destination file path e.g. /fileDestination.ext (required)
     * @param versionId Source file&#39;s version, (optional)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postMoveFile(String src, String dest, String versionId, String storage, String destStorage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postMoveFileWithHttpInfo(src, dest, versionId, storage, destStorage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postMoveFileWithHttpInfo(src, dest, versionId, storage, destStorage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Move a specific file
     * 
     * @param src Source file path e.g. /fileSource.ext (required)
     * @param dest Destination file path e.g. /fileDestination.ext (required)
     * @param versionId Source file&#39;s version, (optional)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postMoveFileWithHttpInfo(String src, String dest, String versionId, String storage, String destStorage) throws ApiException {
        com.squareup.okhttp.Call call = postMoveFileValidateBeforeCall(src, dest, versionId, storage, destStorage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move a specific file (asynchronously)
     * 
     * @param src Source file path e.g. /fileSource.ext (required)
     * @param dest Destination file path e.g. /fileDestination.ext (required)
     * @param versionId Source file&#39;s version, (optional)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postMoveFileAsync(String src, String dest, String versionId, String storage, String destStorage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postMoveFileValidateBeforeCall(src, dest, versionId, storage, destStorage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postMoveFolder
     * @param src Source folder path e.g. /Folder1 (required)
     * @param dest Destination folder path e.g. /Folder2 (required)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postMoveFolderCall(String src, String dest, String storage, String destStorage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (src != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("src", src));
        if (dest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dest", dest));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (destStorage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destStorage", destStorage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postMoveFolderValidateBeforeCall(String src, String dest, String storage, String destStorage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling postMoveFolder(Async)");
        }
        
        // verify the required parameter 'dest' is set
        if (dest == null) {
            throw new ApiException("Missing the required parameter 'dest' when calling postMoveFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = postMoveFolderCall(src, dest, storage, destStorage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Move a specific folder 
     * 
     * @param src Source folder path e.g. /Folder1 (required)
     * @param dest Destination folder path e.g. /Folder2 (required)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postMoveFolder(String src, String dest, String storage, String destStorage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postMoveFolderWithHttpInfo(src, dest, storage, destStorage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postMoveFolderWithHttpInfo(src, dest, storage, destStorage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Move a specific folder 
     * 
     * @param src Source folder path e.g. /Folder1 (required)
     * @param dest Destination folder path e.g. /Folder2 (required)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postMoveFolderWithHttpInfo(String src, String dest, String storage, String destStorage) throws ApiException {
        com.squareup.okhttp.Call call = postMoveFolderValidateBeforeCall(src, dest, storage, destStorage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move a specific folder  (asynchronously)
     * 
     * @param src Source folder path e.g. /Folder1 (required)
     * @param dest Destination folder path e.g. /Folder2 (required)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postMoveFolderAsync(String src, String dest, String storage, String destStorage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postMoveFolderValidateBeforeCall(src, dest, storage, destStorage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postMovePage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param newIndex The new page position/index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postMovePageCall(String name, Integer pageNumber, Integer newIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/movePage"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (newIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newIndex", newIndex));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postMovePageValidateBeforeCall(String name, Integer pageNumber, Integer newIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postMovePage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postMovePage(Async)");
        }
        
        // verify the required parameter 'newIndex' is set
        if (newIndex == null) {
            throw new ApiException("Missing the required parameter 'newIndex' when calling postMovePage(Async)");
        }
        

        com.squareup.okhttp.Call call = postMovePageCall(name, pageNumber, newIndex, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Move page to new position.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param newIndex The new page position/index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postMovePage(String name, Integer pageNumber, Integer newIndex, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postMovePageWithHttpInfo(name, pageNumber, newIndex, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postMovePageWithHttpInfo(name, pageNumber, newIndex, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Move page to new position.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param newIndex The new page position/index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postMovePageWithHttpInfo(String name, Integer pageNumber, Integer newIndex, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postMovePageValidateBeforeCall(name, pageNumber, newIndex, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move page to new position. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param newIndex The new page position/index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postMovePageAsync(String name, Integer pageNumber, Integer newIndex, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postMovePageValidateBeforeCall(name, pageNumber, newIndex, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOptimizeDocument
     * @param name The document name. (required)
     * @param options The optimization options. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOptimizeDocumentCall(String name, OptimizeOptions options, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;

        // create path and map variables
        String localVarPath = "/pdf/{name}/optimize"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOptimizeDocumentValidateBeforeCall(String name, OptimizeOptions options, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postOptimizeDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postOptimizeDocumentCall(name, options, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Optimize document.
     * 
     * @param name The document name. (required)
     * @param options The optimization options. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postOptimizeDocument(String name, OptimizeOptions options, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postOptimizeDocumentWithHttpInfo(name, options, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postOptimizeDocumentWithHttpInfo(name, options, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Optimize document.
     * 
     * @param name The document name. (required)
     * @param options The optimization options. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postOptimizeDocumentWithHttpInfo(String name, OptimizeOptions options, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postOptimizeDocumentValidateBeforeCall(name, options, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Optimize document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param options The optimization options. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOptimizeDocumentAsync(String name, OptimizeOptions options, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOptimizeDocumentValidateBeforeCall(name, options, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageCaretAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageCaretAnnotationsCall(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/caret"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageCaretAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageCaretAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageCaretAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageCaretAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageCaretAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page caret annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageCaretAnnotations(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageCaretAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageCaretAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page caret annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageCaretAnnotationsWithHttpInfo(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageCaretAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page caret annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageCaretAnnotationsAsync(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageCaretAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageCircleAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageCircleAnnotationsCall(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/circle"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageCircleAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageCircleAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageCircleAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageCircleAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageCircleAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page circle annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageCircleAnnotations(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageCircleAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageCircleAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page circle annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageCircleAnnotationsWithHttpInfo(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageCircleAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page circle annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageCircleAnnotationsAsync(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageCircleAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageFileAttachmentAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageFileAttachmentAnnotationsCall(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/fileattachment"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageFileAttachmentAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageFileAttachmentAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageFileAttachmentAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageFileAttachmentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageFileAttachmentAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageFileAttachmentAnnotations(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageFileAttachmentAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageFileAttachmentAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageFileAttachmentAnnotationsWithHttpInfo(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageFileAttachmentAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page FileAttachment annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageFileAttachmentAnnotationsAsync(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageFileAttachmentAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageFreeTextAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageFreeTextAnnotationsCall(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/freetext"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageFreeTextAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageFreeTextAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageFreeTextAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageFreeTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageFreeTextAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page free text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageFreeTextAnnotations(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page free text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageFreeTextAnnotationsWithHttpInfo(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageFreeTextAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page free text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageFreeTextAnnotationsAsync(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageFreeTextAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageHighlightAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageHighlightAnnotationsCall(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/highlight"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageHighlightAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageHighlightAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageHighlightAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageHighlightAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageHighlightAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page highlight annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageHighlightAnnotations(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageHighlightAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageHighlightAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page highlight annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageHighlightAnnotationsWithHttpInfo(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageHighlightAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page highlight annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageHighlightAnnotationsAsync(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageHighlightAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageInkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageInkAnnotationsCall(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/ink"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageInkAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageInkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageInkAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageInkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageInkAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page ink annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageInkAnnotations(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageInkAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageInkAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page ink annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageInkAnnotationsWithHttpInfo(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageInkAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page ink annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageInkAnnotationsAsync(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageInkAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageLineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageLineAnnotationsCall(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/line"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageLineAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageLineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageLineAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageLineAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page line annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageLineAnnotations(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page line annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageLineAnnotationsWithHttpInfo(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageLineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page line annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageLineAnnotationsAsync(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageLineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageLinkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param links Array of link anotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageLinkAnnotationsCall(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = links;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/links"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageLinkAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageLinkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageLinkAnnotations(Async)");
        }
        
        // verify the required parameter 'links' is set
        if (links == null) {
            throw new ApiException("Missing the required parameter 'links' when calling postPageLinkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageLinkAnnotationsCall(name, pageNumber, links, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page link annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param links Array of link anotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageLinkAnnotations(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageLinkAnnotationsWithHttpInfo(name, pageNumber, links, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageLinkAnnotationsWithHttpInfo(name, pageNumber, links, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page link annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param links Array of link anotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageLinkAnnotationsWithHttpInfo(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageLinkAnnotationsValidateBeforeCall(name, pageNumber, links, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page link annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param links Array of link anotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageLinkAnnotationsAsync(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageLinkAnnotationsValidateBeforeCall(name, pageNumber, links, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageMovieAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageMovieAnnotationsCall(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/movie"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageMovieAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageMovieAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageMovieAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageMovieAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageMovieAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page movie annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageMovieAnnotations(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageMovieAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageMovieAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page movie annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageMovieAnnotationsWithHttpInfo(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageMovieAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page movie annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageMovieAnnotationsAsync(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageMovieAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPagePolyLineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPagePolyLineAnnotationsCall(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polyline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPagePolyLineAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPagePolyLineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPagePolyLineAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPagePolyLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPagePolyLineAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page polyline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPagePolyLineAnnotations(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page polyline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPagePolyLineAnnotationsWithHttpInfo(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPagePolyLineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page polyline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPagePolyLineAnnotationsAsync(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPagePolyLineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPagePolygonAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPagePolygonAnnotationsCall(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polygon"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPagePolygonAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPagePolygonAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPagePolygonAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPagePolygonAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPagePolygonAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page polygon annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPagePolygonAnnotations(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPagePolygonAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPagePolygonAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page polygon annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPagePolygonAnnotationsWithHttpInfo(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPagePolygonAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page polygon annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPagePolygonAnnotationsAsync(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPagePolygonAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageRedactionAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageRedactionAnnotationsCall(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/redaction"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageRedactionAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageRedactionAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageRedactionAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageRedactionAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageRedactionAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page redaction annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageRedactionAnnotations(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageRedactionAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageRedactionAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page redaction annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageRedactionAnnotationsWithHttpInfo(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageRedactionAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page redaction annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageRedactionAnnotationsAsync(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageRedactionAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageSoundAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageSoundAnnotationsCall(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/sound"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageSoundAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageSoundAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageSoundAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageSoundAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageSoundAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page sound annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageSoundAnnotations(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageSoundAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageSoundAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page sound annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageSoundAnnotationsWithHttpInfo(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageSoundAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page sound annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageSoundAnnotationsAsync(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageSoundAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageSquareAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageSquareAnnotationsCall(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/square"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageSquareAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageSquareAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageSquareAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageSquareAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageSquareAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page square annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageSquareAnnotations(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageSquareAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageSquareAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page square annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageSquareAnnotationsWithHttpInfo(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageSquareAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page square annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageSquareAnnotationsAsync(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageSquareAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageSquigglyAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageSquigglyAnnotationsCall(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/squiggly"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageSquigglyAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageSquigglyAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageSquigglyAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageSquigglyAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageSquigglyAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageSquigglyAnnotations(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageSquigglyAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageSquigglyAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageSquigglyAnnotationsWithHttpInfo(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageSquigglyAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page squiggly annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageSquigglyAnnotationsAsync(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageSquigglyAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageStrikeOutAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageStrikeOutAnnotationsCall(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/strikeout"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageStrikeOutAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageStrikeOutAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageStrikeOutAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageStrikeOutAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageStrikeOutAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageStrikeOutAnnotations(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageStrikeOutAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageStrikeOutAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageStrikeOutAnnotationsWithHttpInfo(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageStrikeOutAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page StrikeOut annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageStrikeOutAnnotationsAsync(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageStrikeOutAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageTextAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageTextAnnotationsCall(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageTextAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageTextAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageTextAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageTextAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageTextAnnotations(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageTextAnnotationsWithHttpInfo(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageTextAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageTextAnnotationsAsync(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageTextAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageTextReplace
     * @param name  (required)
     * @param pageNumber  (required)
     * @param textReplaceListRequest  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageTextReplaceCall(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = textReplaceListRequest;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/text/replace"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageTextReplaceValidateBeforeCall(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageTextReplace(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageTextReplace(Async)");
        }
        
        // verify the required parameter 'textReplaceListRequest' is set
        if (textReplaceListRequest == null) {
            throw new ApiException("Missing the required parameter 'textReplaceListRequest' when calling postPageTextReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageTextReplaceCall(name, pageNumber, textReplaceListRequest, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Page&#39;s replace text method.
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param textReplaceListRequest  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return TextReplaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextReplaceResponse postPageTextReplace(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextReplaceResponse> resp = postPageTextReplaceWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<TextReplaceResponse> resp = postPageTextReplaceWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Page&#39;s replace text method.
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param textReplaceListRequest  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;TextReplaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextReplaceResponse> postPageTextReplaceWithHttpInfo(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageTextReplaceValidateBeforeCall(name, pageNumber, textReplaceListRequest, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextReplaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Page&#39;s replace text method. (asynchronously)
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param textReplaceListRequest  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageTextReplaceAsync(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder, final ApiCallback<TextReplaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageTextReplaceValidateBeforeCall(name, pageNumber, textReplaceListRequest, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextReplaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageUnderlineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageUnderlineAnnotationsCall(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/underline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageUnderlineAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageUnderlineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageUnderlineAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageUnderlineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageUnderlineAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page underline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageUnderlineAnnotations(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageUnderlineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPageUnderlineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page underline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageUnderlineAnnotationsWithHttpInfo(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageUnderlineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page underline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageUnderlineAnnotationsAsync(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageUnderlineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPopupAnnotation
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param annotation The annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPopupAnnotationCall(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/{annotationId}/popup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPopupAnnotationValidateBeforeCall(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling postPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling postPopupAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = postPopupAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document popup annotations.
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param annotation The annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPopupAnnotation(String name, String annotationId, PopupAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPopupAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postPopupAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document popup annotations.
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param annotation The annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPopupAnnotationWithHttpInfo(String name, String annotationId, PopupAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPopupAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document popup annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param annotation The annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPopupAnnotationAsync(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPopupAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSignDocument
     * @param name The document name. (required)
     * @param signature Signature object containing signature data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSignDocumentCall(String name, Signature signature, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = signature;

        // create path and map variables
        String localVarPath = "/pdf/{name}/sign"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSignDocumentValidateBeforeCall(String name, Signature signature, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSignDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postSignDocumentCall(name, signature, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sign document.
     * 
     * @param name The document name. (required)
     * @param signature Signature object containing signature data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postSignDocument(String name, Signature signature, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postSignDocumentWithHttpInfo(name, signature, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postSignDocumentWithHttpInfo(name, signature, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Sign document.
     * 
     * @param name The document name. (required)
     * @param signature Signature object containing signature data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postSignDocumentWithHttpInfo(String name, Signature signature, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postSignDocumentValidateBeforeCall(name, signature, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sign document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param signature Signature object containing signature data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSignDocumentAsync(String name, Signature signature, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSignDocumentValidateBeforeCall(name, signature, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSignPage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param signature Signature object containing signature data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSignPageCall(String name, Integer pageNumber, Signature signature, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = signature;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/sign"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSignPageValidateBeforeCall(String name, Integer pageNumber, Signature signature, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSignPage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postSignPage(Async)");
        }
        

        com.squareup.okhttp.Call call = postSignPageCall(name, pageNumber, signature, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sign page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param signature Signature object containing signature data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postSignPage(String name, Integer pageNumber, Signature signature, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postSignPageWithHttpInfo(name, pageNumber, signature, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = postSignPageWithHttpInfo(name, pageNumber, signature, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Sign page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param signature Signature object containing signature data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postSignPageWithHttpInfo(String name, Integer pageNumber, Signature signature, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postSignPageValidateBeforeCall(name, pageNumber, signature, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sign page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param signature Signature object containing signature data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSignPageAsync(String name, Integer pageNumber, Signature signature, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSignPageValidateBeforeCall(name, pageNumber, signature, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSplitDocument
     * @param name Document name. (required)
     * @param format Resulting documents format. (optional)
     * @param from Start page if defined. (optional)
     * @param to End page if defined. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSplitDocumentCall(String name, String format, Integer from, Integer to, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/split"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSplitDocumentValidateBeforeCall(String name, String format, Integer from, Integer to, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSplitDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postSplitDocumentCall(name, format, from, to, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split document to parts.
     * 
     * @param name Document name. (required)
     * @param format Resulting documents format. (optional)
     * @param from Start page if defined. (optional)
     * @param to End page if defined. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SplitResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitResultResponse postSplitDocument(String name, String format, Integer from, Integer to, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SplitResultResponse> resp = postSplitDocumentWithHttpInfo(name, format, from, to, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SplitResultResponse> resp = postSplitDocumentWithHttpInfo(name, format, from, to, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Split document to parts.
     * 
     * @param name Document name. (required)
     * @param format Resulting documents format. (optional)
     * @param from Start page if defined. (optional)
     * @param to End page if defined. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SplitResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitResultResponse> postSplitDocumentWithHttpInfo(String name, String format, Integer from, Integer to, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postSplitDocumentValidateBeforeCall(name, format, from, to, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split document to parts. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param format Resulting documents format. (optional)
     * @param from Start page if defined. (optional)
     * @param to End page if defined. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSplitDocumentAsync(String name, String format, Integer from, Integer to, String storage, String folder, final ApiCallback<SplitResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSplitDocumentValidateBeforeCall(name, format, from, to, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAddNewPage
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAddNewPageCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAddNewPageValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putAddNewPage(Async)");
        }
        

        com.squareup.okhttp.Call call = putAddNewPageCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new page to end of the document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DocumentPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPagesResponse putAddNewPage(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPagesResponse> resp = putAddNewPageWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentPagesResponse> resp = putAddNewPageWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add new page to end of the document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DocumentPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPagesResponse> putAddNewPageWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putAddNewPageValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new page to end of the document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAddNewPageAsync(String name, String storage, String folder, final ApiCallback<DocumentPagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAddNewPageValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAddText
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param paragraph Paragraph data. (optional)
     * @param folder Document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAddTextCall(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = paragraph;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAddTextValidateBeforeCall(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putAddText(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putAddText(Async)");
        }
        

        com.squareup.okhttp.Call call = putAddTextCall(name, pageNumber, paragraph, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add text to PDF document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param paragraph Paragraph data. (optional)
     * @param folder Document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putAddText(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putAddTextWithHttpInfo(name, pageNumber, paragraph, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putAddTextWithHttpInfo(name, pageNumber, paragraph, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add text to PDF document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param paragraph Paragraph data. (optional)
     * @param folder Document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putAddTextWithHttpInfo(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putAddTextValidateBeforeCall(name, pageNumber, paragraph, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add text to PDF document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param paragraph Paragraph data. (optional)
     * @param folder Document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAddTextAsync(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAddTextValidateBeforeCall(name, pageNumber, paragraph, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCaretAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCaretAnnotationCall(String name, String annotationId, CaretAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/caret/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCaretAnnotationValidateBeforeCall(String name, String annotationId, CaretAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putCaretAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putCaretAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putCaretAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putCaretAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document caret annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CaretAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CaretAnnotationResponse putCaretAnnotation(String name, String annotationId, CaretAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CaretAnnotationResponse> resp = putCaretAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<CaretAnnotationResponse> resp = putCaretAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document caret annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CaretAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CaretAnnotationResponse> putCaretAnnotationWithHttpInfo(String name, String annotationId, CaretAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putCaretAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CaretAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document caret annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCaretAnnotationAsync(String name, String annotationId, CaretAnnotation annotation, String storage, String folder, final ApiCallback<CaretAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCaretAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CaretAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCircleAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCircleAnnotationCall(String name, String annotationId, CircleAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/circle/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCircleAnnotationValidateBeforeCall(String name, String annotationId, CircleAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putCircleAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putCircleAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putCircleAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putCircleAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document circle annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CircleAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CircleAnnotationResponse putCircleAnnotation(String name, String annotationId, CircleAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CircleAnnotationResponse> resp = putCircleAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<CircleAnnotationResponse> resp = putCircleAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document circle annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CircleAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CircleAnnotationResponse> putCircleAnnotationWithHttpInfo(String name, String annotationId, CircleAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putCircleAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CircleAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document circle annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCircleAnnotationAsync(String name, String annotationId, CircleAnnotation annotation, String storage, String folder, final ApiCallback<CircleAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCircleAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CircleAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCreate
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext (required)
     * @param file File to upload (required)
     * @param versionId Source file&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCreateCall(String path, File file, String versionId, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/storage/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCreateValidateBeforeCall(String path, File file, String versionId, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling putCreate(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling putCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = putCreateCall(path, file, versionId, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a specific file 
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext (required)
     * @param file File to upload (required)
     * @param versionId Source file&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putCreate(String path, File file, String versionId, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putCreateWithHttpInfo(path, file, versionId, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putCreateWithHttpInfo(path, file, versionId, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Upload a specific file 
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext (required)
     * @param file File to upload (required)
     * @param versionId Source file&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putCreateWithHttpInfo(String path, File file, String versionId, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putCreateValidateBeforeCall(path, file, versionId, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a specific file  (asynchronously)
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext (required)
     * @param file File to upload (required)
     * @param versionId Source file&#39;s version (optional)
     * @param storage User&#39;s storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCreateAsync(String path, File file, String versionId, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCreateValidateBeforeCall(path, file, versionId, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCreateDocument
     * @param name The new document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCreateDocumentCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCreateDocumentValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putCreateDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = putCreateDocumentCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create empty document.
     * 
     * @param name The new document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse putCreateDocument(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentResponse> resp = putCreateDocumentWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentResponse> resp = putCreateDocumentWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Create empty document.
     * 
     * @param name The new document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> putCreateDocumentWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putCreateDocumentValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create empty document. (asynchronously)
     * 
     * @param name The new document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCreateDocumentAsync(String name, String storage, String folder, final ApiCallback<DocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCreateDocumentValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCreateFolder
     * @param path Target folder&#39;s path e.g. Folder1/Folder2/. The folders will be created recursively (required)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCreateFolderCall(String path, String storage, String destStorage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/folder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (destStorage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destStorage", destStorage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCreateFolderValidateBeforeCall(String path, String storage, String destStorage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling putCreateFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = putCreateFolderCall(path, storage, destStorage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create the folder 
     * 
     * @param path Target folder&#39;s path e.g. Folder1/Folder2/. The folders will be created recursively (required)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putCreateFolder(String path, String storage, String destStorage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putCreateFolderWithHttpInfo(path, storage, destStorage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putCreateFolderWithHttpInfo(path, storage, destStorage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Create the folder 
     * 
     * @param path Target folder&#39;s path e.g. Folder1/Folder2/. The folders will be created recursively (required)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putCreateFolderWithHttpInfo(String path, String storage, String destStorage) throws ApiException {
        com.squareup.okhttp.Call call = putCreateFolderValidateBeforeCall(path, storage, destStorage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create the folder  (asynchronously)
     * 
     * @param path Target folder&#39;s path e.g. Folder1/Folder2/. The folders will be created recursively (required)
     * @param storage User&#39;s source storage name (optional)
     * @param destStorage User&#39;s destination storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCreateFolderAsync(String path, String storage, String destStorage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCreateFolderValidateBeforeCall(path, storage, destStorage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putEpubInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putEpubInStorageToPdfCall(String name, String srcPath, String storage, String dstFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/epub"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putEpubInStorageToPdfValidateBeforeCall(String name, String srcPath, String storage, String dstFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putEpubInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putEpubInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putEpubInStorageToPdfCall(name, srcPath, storage, dstFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putEpubInStorageToPdf(String name, String srcPath, String storage, String dstFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putEpubInStorageToPdfWithHttpInfo(name, srcPath, storage, dstFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putEpubInStorageToPdfWithHttpInfo(name, srcPath, storage, dstFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putEpubInStorageToPdfWithHttpInfo(String name, String srcPath, String storage, String dstFolder) throws ApiException {
        com.squareup.okhttp.Call call = putEpubInStorageToPdfValidateBeforeCall(name, srcPath, storage, dstFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putEpubInStorageToPdfAsync(String name, String srcPath, String storage, String dstFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putEpubInStorageToPdfValidateBeforeCall(name, srcPath, storage, dstFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFieldsFlatten
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFieldsFlattenCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/flatten"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFieldsFlattenValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putFieldsFlatten(Async)");
        }
        

        com.squareup.okhttp.Call call = putFieldsFlattenCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flatten form fields in document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putFieldsFlatten(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putFieldsFlattenWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putFieldsFlattenWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Flatten form fields in document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putFieldsFlattenWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putFieldsFlattenValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flatten form fields in document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFieldsFlattenAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFieldsFlattenValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFileAttachmentAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFileAttachmentAnnotationCall(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFileAttachmentAnnotationValidateBeforeCall(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putFileAttachmentAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putFileAttachmentAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putFileAttachmentAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putFileAttachmentAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document FileAttachment annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FileAttachmentAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileAttachmentAnnotationResponse putFileAttachmentAnnotation(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FileAttachmentAnnotationResponse> resp = putFileAttachmentAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FileAttachmentAnnotationResponse> resp = putFileAttachmentAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document FileAttachment annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FileAttachmentAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileAttachmentAnnotationResponse> putFileAttachmentAnnotationWithHttpInfo(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putFileAttachmentAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document FileAttachment annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFileAttachmentAnnotationAsync(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder, final ApiCallback<FileAttachmentAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFileAttachmentAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFileAttachmentAnnotationDataExtract
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFolder The output folder. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFileAttachmentAnnotationDataExtractCall(String name, String annotationId, String outFolder, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment/{annotationId}/data/extract"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outFolder", outFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFileAttachmentAnnotationDataExtractValidateBeforeCall(String name, String annotationId, String outFolder, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putFileAttachmentAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putFileAttachmentAnnotationDataExtract(Async)");
        }
        

        com.squareup.okhttp.Call call = putFileAttachmentAnnotationDataExtractCall(name, annotationId, outFolder, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document FileAttachment annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFolder The output folder. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putFileAttachmentAnnotationDataExtract(String name, String annotationId, String outFolder, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putFileAttachmentAnnotationDataExtractWithHttpInfo(name, annotationId, outFolder, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putFileAttachmentAnnotationDataExtractWithHttpInfo(name, annotationId, outFolder, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document FileAttachment annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFolder The output folder. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putFileAttachmentAnnotationDataExtractWithHttpInfo(String name, String annotationId, String outFolder, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putFileAttachmentAnnotationDataExtractValidateBeforeCall(name, annotationId, outFolder, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document FileAttachment annotation content to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFolder The output folder. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFileAttachmentAnnotationDataExtractAsync(String name, String annotationId, String outFolder, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFileAttachmentAnnotationDataExtractValidateBeforeCall(name, annotationId, outFolder, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFreeTextAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFreeTextAnnotationCall(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/freetext/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFreeTextAnnotationValidateBeforeCall(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putFreeTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putFreeTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putFreeTextAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putFreeTextAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document free text annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FreeTextAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTextAnnotationResponse putFreeTextAnnotation(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FreeTextAnnotationResponse> resp = putFreeTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FreeTextAnnotationResponse> resp = putFreeTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document free text annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FreeTextAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTextAnnotationResponse> putFreeTextAnnotationWithHttpInfo(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putFreeTextAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document free text annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFreeTextAnnotationAsync(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder, final ApiCallback<FreeTextAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFreeTextAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putHighlightAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putHighlightAnnotationCall(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/highlight/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putHighlightAnnotationValidateBeforeCall(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putHighlightAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putHighlightAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putHighlightAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putHighlightAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document highlight annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return HighlightAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HighlightAnnotationResponse putHighlightAnnotation(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<HighlightAnnotationResponse> resp = putHighlightAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<HighlightAnnotationResponse> resp = putHighlightAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document highlight annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;HighlightAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HighlightAnnotationResponse> putHighlightAnnotationWithHttpInfo(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putHighlightAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<HighlightAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document highlight annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putHighlightAnnotationAsync(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder, final ApiCallback<HighlightAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putHighlightAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HighlightAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putHtmlInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putHtmlInStorageToPdfCall(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/html"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (htmlFileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlFileName", htmlFileName));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putHtmlInStorageToPdfValidateBeforeCall(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putHtmlInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putHtmlInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putHtmlInStorageToPdfCall(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putHtmlInStorageToPdf(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putHtmlInStorageToPdfWithHttpInfo(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putHtmlInStorageToPdfWithHttpInfo(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putHtmlInStorageToPdfWithHttpInfo(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putHtmlInStorageToPdfValidateBeforeCall(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putHtmlInStorageToPdfAsync(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putHtmlInStorageToPdfValidateBeforeCall(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageExtractAsGif
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsGifCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageExtractAsGifValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageExtractAsGif(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putImageExtractAsGif(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageExtractAsGifCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in GIF format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageExtractAsGif(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in GIF format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageExtractAsGifWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImageExtractAsGifValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in GIF format to folder (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsGifAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageExtractAsGifValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageExtractAsJpeg
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsJpegCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageExtractAsJpegValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageExtractAsJpeg(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putImageExtractAsJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageExtractAsJpegCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in JPEG format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageExtractAsJpeg(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in JPEG format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageExtractAsJpegWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImageExtractAsJpegValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in JPEG format to folder (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsJpegAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageExtractAsJpegValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageExtractAsPng
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsPngCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageExtractAsPngValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageExtractAsPng(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putImageExtractAsPng(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageExtractAsPngCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in PNG format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageExtractAsPng(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in PNG format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageExtractAsPngWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImageExtractAsPngValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in PNG format to folder (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsPngAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageExtractAsPngValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageExtractAsTiff
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsTiffCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageExtractAsTiffValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageExtractAsTiff(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putImageExtractAsTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageExtractAsTiffCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in TIFF format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageExtractAsTiff(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in TIFF format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageExtractAsTiffWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImageExtractAsTiffValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in TIFF format to folder (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsTiffAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageExtractAsTiffValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageInStorageToPdf
     * @param name The document name. (required)
     * @param imageTemplates Image templates (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageInStorageToPdfCall(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = imageTemplates;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageInStorageToPdfValidateBeforeCall(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'imageTemplates' is set
        if (imageTemplates == null) {
            throw new ApiException("Missing the required parameter 'imageTemplates' when calling putImageInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageInStorageToPdfCall(name, imageTemplates, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert image file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param imageTemplates Image templates (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageInStorageToPdf(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageInStorageToPdfWithHttpInfo(name, imageTemplates, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImageInStorageToPdfWithHttpInfo(name, imageTemplates, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert image file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param imageTemplates Image templates (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageInStorageToPdfWithHttpInfo(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putImageInStorageToPdfValidateBeforeCall(name, imageTemplates, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert image file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageTemplates Image templates (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageInStorageToPdfAsync(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageInStorageToPdfValidateBeforeCall(name, imageTemplates, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImagesExtractAsGif
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsGifCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImagesExtractAsGifValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesExtractAsGif(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putImagesExtractAsGif(Async)");
        }
        

        com.squareup.okhttp.Call call = putImagesExtractAsGifCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document images in GIF format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImagesExtractAsGif(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImagesExtractAsGifWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImagesExtractAsGifWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document images in GIF format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImagesExtractAsGifWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImagesExtractAsGifValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document images in GIF format to folder. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsGifAsync(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImagesExtractAsGifValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImagesExtractAsJpeg
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage  (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsJpegCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImagesExtractAsJpegValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesExtractAsJpeg(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putImagesExtractAsJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = putImagesExtractAsJpegCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document images in JPEG format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage  (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImagesExtractAsJpeg(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImagesExtractAsJpegWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImagesExtractAsJpegWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document images in JPEG format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage  (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImagesExtractAsJpegWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImagesExtractAsJpegValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document images in JPEG format to folder. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage  (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsJpegAsync(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImagesExtractAsJpegValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImagesExtractAsPng
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsPngCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImagesExtractAsPngValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesExtractAsPng(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putImagesExtractAsPng(Async)");
        }
        

        com.squareup.okhttp.Call call = putImagesExtractAsPngCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document images in PNG format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImagesExtractAsPng(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImagesExtractAsPngWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImagesExtractAsPngWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document images in PNG format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImagesExtractAsPngWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImagesExtractAsPngValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document images in PNG format to folder. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsPngAsync(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImagesExtractAsPngValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImagesExtractAsTiff
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsTiffCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImagesExtractAsTiffValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesExtractAsTiff(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putImagesExtractAsTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putImagesExtractAsTiffCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document images in TIFF format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImagesExtractAsTiff(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImagesExtractAsTiffWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putImagesExtractAsTiffWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document images in TIFF format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImagesExtractAsTiffWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImagesExtractAsTiffValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document images in TIFF format to folder. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsTiffAsync(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImagesExtractAsTiffValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putInkAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putInkAnnotationCall(String name, String annotationId, InkAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/ink/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putInkAnnotationValidateBeforeCall(String name, String annotationId, InkAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putInkAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putInkAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putInkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putInkAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document ink annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return InkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InkAnnotationResponse putInkAnnotation(String name, String annotationId, InkAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<InkAnnotationResponse> resp = putInkAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<InkAnnotationResponse> resp = putInkAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document ink annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;InkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InkAnnotationResponse> putInkAnnotationWithHttpInfo(String name, String annotationId, InkAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putInkAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<InkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document ink annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putInkAnnotationAsync(String name, String annotationId, InkAnnotation annotation, String storage, String folder, final ApiCallback<InkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putInkAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putLaTeXInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putLaTeXInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/latex"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putLaTeXInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putLaTeXInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putLaTeXInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putLaTeXInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putLaTeXInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putLaTeXInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putLaTeXInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putLaTeXInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putLaTeXInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert LaTeX file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putLaTeXInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putLaTeXInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putLineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putLineAnnotationCall(String name, String annotationId, LineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/line/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putLineAnnotationValidateBeforeCall(String name, String annotationId, LineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putLineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putLineAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document line annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineAnnotationResponse putLineAnnotation(String name, String annotationId, LineAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LineAnnotationResponse> resp = putLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<LineAnnotationResponse> resp = putLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document line annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineAnnotationResponse> putLineAnnotationWithHttpInfo(String name, String annotationId, LineAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putLineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document line annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putLineAnnotationAsync(String name, String annotationId, LineAnnotation annotation, String storage, String folder, final ApiCallback<LineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putLineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putLinkAnnotation
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param link Link anotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putLinkAnnotationCall(String name, String linkId, LinkAnnotation link, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = link;

        // create path and map variables
        String localVarPath = "/pdf/{name}/links/{linkId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putLinkAnnotationValidateBeforeCall(String name, String linkId, LinkAnnotation link, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling putLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'link' is set
        if (link == null) {
            throw new ApiException("Missing the required parameter 'link' when calling putLinkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putLinkAnnotationCall(name, linkId, link, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document page link annotations
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param link Link anotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LinkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkAnnotationResponse putLinkAnnotation(String name, String linkId, LinkAnnotation link, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LinkAnnotationResponse> resp = putLinkAnnotationWithHttpInfo(name, linkId, link, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<LinkAnnotationResponse> resp = putLinkAnnotationWithHttpInfo(name, linkId, link, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document page link annotations
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param link Link anotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LinkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkAnnotationResponse> putLinkAnnotationWithHttpInfo(String name, String linkId, LinkAnnotation link, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putLinkAnnotationValidateBeforeCall(name, linkId, link, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document page link annotations (asynchronously)
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param link Link anotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putLinkAnnotationAsync(String name, String linkId, LinkAnnotation link, String storage, String folder, final ApiCallback<LinkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putLinkAnnotationValidateBeforeCall(name, linkId, link, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMergeDocuments
     * @param name Resulting documen name. (required)
     * @param mergeDocuments with a list of documents. (optional)
     * @param storage Resulting document storage. (optional)
     * @param folder Resulting document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putMergeDocumentsCall(String name, MergeDocuments mergeDocuments, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mergeDocuments;

        // create path and map variables
        String localVarPath = "/pdf/{name}/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putMergeDocumentsValidateBeforeCall(String name, MergeDocuments mergeDocuments, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putMergeDocuments(Async)");
        }
        

        com.squareup.okhttp.Call call = putMergeDocumentsCall(name, mergeDocuments, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Merge a list of documents.
     * 
     * @param name Resulting documen name. (required)
     * @param mergeDocuments with a list of documents. (optional)
     * @param storage Resulting document storage. (optional)
     * @param folder Resulting document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File putMergeDocuments(String name, MergeDocuments mergeDocuments, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = putMergeDocumentsWithHttpInfo(name, mergeDocuments, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<File> resp = putMergeDocumentsWithHttpInfo(name, mergeDocuments, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Merge a list of documents.
     * 
     * @param name Resulting documen name. (required)
     * @param mergeDocuments with a list of documents. (optional)
     * @param storage Resulting document storage. (optional)
     * @param folder Resulting document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> putMergeDocumentsWithHttpInfo(String name, MergeDocuments mergeDocuments, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putMergeDocumentsValidateBeforeCall(name, mergeDocuments, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge a list of documents. (asynchronously)
     * 
     * @param name Resulting documen name. (required)
     * @param mergeDocuments with a list of documents. (optional)
     * @param storage Resulting document storage. (optional)
     * @param folder Resulting document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putMergeDocumentsAsync(String name, MergeDocuments mergeDocuments, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putMergeDocumentsValidateBeforeCall(name, mergeDocuments, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMhtInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putMhtInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/mht"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putMhtInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putMhtInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putMhtInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putMhtInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putMhtInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putMhtInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putMhtInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putMhtInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putMhtInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putMhtInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putMhtInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMovieAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putMovieAnnotationCall(String name, String annotationId, MovieAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/movie/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putMovieAnnotationValidateBeforeCall(String name, String annotationId, MovieAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putMovieAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putMovieAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putMovieAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putMovieAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document movie annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return MovieAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MovieAnnotationResponse putMovieAnnotation(String name, String annotationId, MovieAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<MovieAnnotationResponse> resp = putMovieAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<MovieAnnotationResponse> resp = putMovieAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document movie annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;MovieAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MovieAnnotationResponse> putMovieAnnotationWithHttpInfo(String name, String annotationId, MovieAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putMovieAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<MovieAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document movie annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putMovieAnnotationAsync(String name, String annotationId, MovieAnnotation annotation, String storage, String folder, final ApiCallback<MovieAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putMovieAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MovieAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageAddStamp
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamp with data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageAddStampCall(String name, Integer pageNumber, Stamp stamp, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = stamp;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/stamp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageAddStampValidateBeforeCall(String name, Integer pageNumber, Stamp stamp, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageAddStamp(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageAddStamp(Async)");
        }
        
        // verify the required parameter 'stamp' is set
        if (stamp == null) {
            throw new ApiException("Missing the required parameter 'stamp' when calling putPageAddStamp(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageAddStampCall(name, pageNumber, stamp, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add page stamp.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamp with data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageAddStamp(String name, Integer pageNumber, Stamp stamp, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageAddStampWithHttpInfo(name, pageNumber, stamp, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPageAddStampWithHttpInfo(name, pageNumber, stamp, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add page stamp.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamp with data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageAddStampWithHttpInfo(String name, Integer pageNumber, Stamp stamp, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPageAddStampValidateBeforeCall(name, pageNumber, stamp, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add page stamp. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamp with data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageAddStampAsync(String name, Integer pageNumber, Stamp stamp, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageAddStampValidateBeforeCall(name, pageNumber, stamp, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToBmp
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToBmpCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToBmpValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToBmp(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToBmp(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToBmp(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToBmpCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to bmp image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToBmp(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToBmpWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToBmpWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to bmp image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToBmpWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToBmpValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to bmp image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToBmpAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToBmpValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToEmf
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToEmfCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToEmfValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToEmf(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToEmf(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToEmf(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToEmfCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to emf image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToEmf(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToEmfWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToEmfWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to emf image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToEmfWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToEmfValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to emf image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToEmfAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToEmfValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToGif
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToGifCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToGifValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToGif(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToGif(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToGif(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToGifCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to gif image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToGif(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToGifWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToGifWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to gif image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToGifWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToGifValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to gif image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToGifAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToGifValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToJpeg
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToJpegCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToJpegValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToJpeg(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToJpeg(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToJpegCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Jpeg image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToJpeg(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToJpegWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToJpegWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Jpeg image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToJpegWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToJpegValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Jpeg image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToJpegAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToJpegValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToPng
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToPngCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToPngValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToPng(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToPng(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToPng(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToPngCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to png image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToPng(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToPngWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToPngWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to png image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToPngWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToPngValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to png image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToPngAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToPngValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToTiff
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToTiffCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToTiffValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToTiff(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToTiff(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToTiffCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Tiff image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToTiff(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToTiffWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToTiffWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Tiff image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToTiffWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToTiffValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Tiff image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional)
     * @param height The converted image height. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToTiffAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToTiffValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPclInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPclInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/pcl"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPclInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPclInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putPclInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putPclInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPclInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPclInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPclInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPclInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPclInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPclInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPclInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToDoc
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToDocCall(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/doc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (addReturnToLineEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addReturnToLineEnd", addReturnToLineEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (imageResolutionX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionX", imageResolutionX));
        if (imageResolutionY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionY", imageResolutionY));
        if (maxDistanceBetweenTextLines != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxDistanceBetweenTextLines", maxDistanceBetweenTextLines));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        if (recognizeBullets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recognizeBullets", recognizeBullets));
        if (relativeHorizontalProximity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("relativeHorizontalProximity", relativeHorizontalProximity));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToDocValidateBeforeCall(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToDocCall(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToDoc(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToDocWithHttpInfo(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToDocWithHttpInfo(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToDocWithHttpInfo(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToDocValidateBeforeCall(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to DOC format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToDocAsync(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToDocValidateBeforeCall(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToEpub
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToEpubCall(String outPath, String contentRecognitionMode, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/epub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (contentRecognitionMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentRecognitionMode", contentRecognitionMode));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToEpubValidateBeforeCall(String outPath, String contentRecognitionMode, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToEpub(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToEpubCall(outPath, contentRecognitionMode, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToEpub(String outPath, String contentRecognitionMode, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToEpubWithHttpInfo(outPath, contentRecognitionMode, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToEpubWithHttpInfo(outPath, contentRecognitionMode, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToEpubWithHttpInfo(String outPath, String contentRecognitionMode, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToEpubValidateBeforeCall(outPath, contentRecognitionMode, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToEpubAsync(String outPath, String contentRecognitionMode, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToEpubValidateBeforeCall(outPath, contentRecognitionMode, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToHtml
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToHtmlCall(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (additionalMarginWidthInPoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additionalMarginWidthInPoints", additionalMarginWidthInPoints));
        if (compressSvgGraphicsIfAny != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressSvgGraphicsIfAny", compressSvgGraphicsIfAny));
        if (convertMarkedContentToLayers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convertMarkedContentToLayers", convertMarkedContentToLayers));
        if (defaultFontName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultFontName", defaultFontName));
        if (documentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("documentType", documentType));
        if (fixedLayout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fixedLayout", fixedLayout));
        if (imageResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolution", imageResolution));
        if (minimalLineWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimalLineWidth", minimalLineWidth));
        if (preventGlyphsGrouping != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preventGlyphsGrouping", preventGlyphsGrouping));
        if (splitCssIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitCssIntoPages", splitCssIntoPages));
        if (splitIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitIntoPages", splitIntoPages));
        if (useZOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useZOrder", useZOrder));
        if (antialiasingProcessing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("antialiasingProcessing", antialiasingProcessing));
        if (cssClassNamesPrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cssClassNamesPrefix", cssClassNamesPrefix));
        if (explicitListOfSavedPages != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "explicitListOfSavedPages", explicitListOfSavedPages));
        if (fontEncodingStrategy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontEncodingStrategy", fontEncodingStrategy));
        if (fontSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSavingMode", fontSavingMode));
        if (htmlMarkupGenerationMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlMarkupGenerationMode", htmlMarkupGenerationMode));
        if (lettersPositioningMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lettersPositioningMethod", lettersPositioningMethod));
        if (pagesFlowTypeDependsOnViewersScreenSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesFlowTypeDependsOnViewersScreenSize", pagesFlowTypeDependsOnViewersScreenSize));
        if (partsEmbeddingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partsEmbeddingMode", partsEmbeddingMode));
        if (rasterImagesSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rasterImagesSavingMode", rasterImagesSavingMode));
        if (removeEmptyAreasOnTopAndBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeEmptyAreasOnTopAndBottom", removeEmptyAreasOnTopAndBottom));
        if (saveShadowedTextsAsTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveShadowedTextsAsTransparentTexts", saveShadowedTextsAsTransparentTexts));
        if (saveTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveTransparentTexts", saveTransparentTexts));
        if (specialFolderForAllImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForAllImages", specialFolderForAllImages));
        if (specialFolderForSvgImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForSvgImages", specialFolderForSvgImages));
        if (trySaveTextUnderliningAndStrikeoutingInCss != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trySaveTextUnderliningAndStrikeoutingInCss", trySaveTextUnderliningAndStrikeoutingInCss));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToHtmlValidateBeforeCall(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToHtml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToHtmlCall(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to Html format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToHtml(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToHtmlWithHttpInfo(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToHtmlWithHttpInfo(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to Html format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToHtmlWithHttpInfo(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToHtmlValidateBeforeCall(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to Html format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToHtmlAsync(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToHtmlValidateBeforeCall(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToLaTeX
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param pagesCount Pages count. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToLaTeXCall(String outPath, Integer pagesCount, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/latex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (pagesCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesCount", pagesCount));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToLaTeXValidateBeforeCall(String outPath, Integer pagesCount, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToLaTeX(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToLaTeXCall(outPath, pagesCount, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param pagesCount Pages count. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToLaTeX(String outPath, Integer pagesCount, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToLaTeXWithHttpInfo(outPath, pagesCount, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToLaTeXWithHttpInfo(outPath, pagesCount, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param pagesCount Pages count. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToLaTeXWithHttpInfo(String outPath, Integer pagesCount, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToLaTeXValidateBeforeCall(outPath, pagesCount, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to LaTeX format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param pagesCount Pages count. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToLaTeXAsync(String outPath, Integer pagesCount, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToLaTeXValidateBeforeCall(outPath, pagesCount, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToMobiXml
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToMobiXmlCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/mobixml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToMobiXmlValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToMobiXml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToMobiXmlCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToMobiXml(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToMobiXmlWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToMobiXmlWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToMobiXmlWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToMobiXmlValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to MOBIXML format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToMobiXmlAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToMobiXmlValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToPdfA
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToPdfACall(String outPath, String type, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/pdfa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToPdfAValidateBeforeCall(String outPath, String type, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToPdfA(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putPdfInRequestToPdfA(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToPdfACall(outPath, type, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToPdfA(String outPath, String type, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToPdfAWithHttpInfo(outPath, type, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToPdfAWithHttpInfo(outPath, type, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToPdfAWithHttpInfo(String outPath, String type, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToPdfAValidateBeforeCall(outPath, type, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToPdfAAsync(String outPath, String type, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToPdfAValidateBeforeCall(outPath, type, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToPptx
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToPptxCall(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/pptx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (separateImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separateImages", separateImages));
        if (slidesAsImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slidesAsImages", slidesAsImages));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToPptxValidateBeforeCall(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToPptx(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToPptxCall(outPath, separateImages, slidesAsImages, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToPptx(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToPptxWithHttpInfo(outPath, separateImages, slidesAsImages, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToPptxWithHttpInfo(outPath, separateImages, slidesAsImages, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToPptxWithHttpInfo(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToPptxValidateBeforeCall(outPath, separateImages, slidesAsImages, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToPptxAsync(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToPptxValidateBeforeCall(outPath, separateImages, slidesAsImages, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToSvg
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToSvgCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/svg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToSvgValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToSvg(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToSvgCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToSvg(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToSvgWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToSvgWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToSvgWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToSvgValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to SVG format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToSvgAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToSvgValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToTiff
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToTiffCall(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/tiff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (brightness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("brightness", brightness));
        if (compression != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compression", compression));
        if (colorDepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("colorDepth", colorDepth));
        if (leftMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("leftMargin", leftMargin));
        if (rightMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rightMargin", rightMargin));
        if (topMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topMargin", topMargin));
        if (bottomMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bottomMargin", bottomMargin));
        if (orientation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orientation", orientation));
        if (skipBlankPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipBlankPages", skipBlankPages));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (xResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xResolution", xResolution));
        if (yResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yResolution", yResolution));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageCount", pageCount));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToTiffValidateBeforeCall(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToTiffCall(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToTiff(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToTiffWithHttpInfo(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToTiffWithHttpInfo(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToTiffWithHttpInfo(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToTiffValidateBeforeCall(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToTiffAsync(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToTiffValidateBeforeCall(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToXls
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXlsCall(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToXlsValidateBeforeCall(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToXls(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToXlsCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToXls(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToXlsWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToXlsWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToXlsWithHttpInfo(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToXlsValidateBeforeCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to XLS format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXlsAsync(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToXlsValidateBeforeCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToXml
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXmlCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToXmlValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToXmlCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to XML format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToXml(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToXmlWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToXmlWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to XML format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToXmlWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToXmlValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to XML format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXmlAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToXmlValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToXps
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXpsCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToXpsValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToXps(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToXpsCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToXps(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToXpsWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToXpsWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToXpsWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToXpsValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to XPS format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXpsAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToXpsValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToDoc
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToDocCall(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/doc"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (addReturnToLineEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addReturnToLineEnd", addReturnToLineEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (imageResolutionX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionX", imageResolutionX));
        if (imageResolutionY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionY", imageResolutionY));
        if (maxDistanceBetweenTextLines != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxDistanceBetweenTextLines", maxDistanceBetweenTextLines));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        if (recognizeBullets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recognizeBullets", recognizeBullets));
        if (relativeHorizontalProximity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("relativeHorizontalProximity", relativeHorizontalProximity));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToDocValidateBeforeCall(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToDoc(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToDocCall(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToDoc(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToDocWithHttpInfo(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToDocWithHttpInfo(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to DOC format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToDocWithHttpInfo(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToDocValidateBeforeCall(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to DOC format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToDocAsync(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToDocValidateBeforeCall(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToEpub
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToEpubCall(String name, String outPath, String contentRecognitionMode, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/epub"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (contentRecognitionMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentRecognitionMode", contentRecognitionMode));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToEpubValidateBeforeCall(String name, String outPath, String contentRecognitionMode, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToEpub(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToEpub(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToEpubCall(name, outPath, contentRecognitionMode, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToEpub(String name, String outPath, String contentRecognitionMode, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToEpubWithHttpInfo(name, outPath, contentRecognitionMode, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToEpubWithHttpInfo(name, outPath, contentRecognitionMode, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToEpubWithHttpInfo(String name, String outPath, String contentRecognitionMode, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToEpubValidateBeforeCall(name, outPath, contentRecognitionMode, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToEpubAsync(String name, String outPath, String contentRecognitionMode, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToEpubValidateBeforeCall(name, outPath, contentRecognitionMode, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToHtml
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToHtmlCall(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/html"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (additionalMarginWidthInPoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additionalMarginWidthInPoints", additionalMarginWidthInPoints));
        if (compressSvgGraphicsIfAny != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressSvgGraphicsIfAny", compressSvgGraphicsIfAny));
        if (convertMarkedContentToLayers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convertMarkedContentToLayers", convertMarkedContentToLayers));
        if (defaultFontName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultFontName", defaultFontName));
        if (documentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("documentType", documentType));
        if (fixedLayout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fixedLayout", fixedLayout));
        if (imageResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolution", imageResolution));
        if (minimalLineWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimalLineWidth", minimalLineWidth));
        if (preventGlyphsGrouping != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preventGlyphsGrouping", preventGlyphsGrouping));
        if (splitCssIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitCssIntoPages", splitCssIntoPages));
        if (splitIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitIntoPages", splitIntoPages));
        if (useZOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useZOrder", useZOrder));
        if (antialiasingProcessing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("antialiasingProcessing", antialiasingProcessing));
        if (cssClassNamesPrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cssClassNamesPrefix", cssClassNamesPrefix));
        if (explicitListOfSavedPages != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "explicitListOfSavedPages", explicitListOfSavedPages));
        if (fontEncodingStrategy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontEncodingStrategy", fontEncodingStrategy));
        if (fontSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSavingMode", fontSavingMode));
        if (htmlMarkupGenerationMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlMarkupGenerationMode", htmlMarkupGenerationMode));
        if (lettersPositioningMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lettersPositioningMethod", lettersPositioningMethod));
        if (pagesFlowTypeDependsOnViewersScreenSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesFlowTypeDependsOnViewersScreenSize", pagesFlowTypeDependsOnViewersScreenSize));
        if (partsEmbeddingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partsEmbeddingMode", partsEmbeddingMode));
        if (rasterImagesSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rasterImagesSavingMode", rasterImagesSavingMode));
        if (removeEmptyAreasOnTopAndBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeEmptyAreasOnTopAndBottom", removeEmptyAreasOnTopAndBottom));
        if (saveShadowedTextsAsTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveShadowedTextsAsTransparentTexts", saveShadowedTextsAsTransparentTexts));
        if (saveTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveTransparentTexts", saveTransparentTexts));
        if (specialFolderForAllImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForAllImages", specialFolderForAllImages));
        if (specialFolderForSvgImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForSvgImages", specialFolderForSvgImages));
        if (trySaveTextUnderliningAndStrikeoutingInCss != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trySaveTextUnderliningAndStrikeoutingInCss", trySaveTextUnderliningAndStrikeoutingInCss));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToHtmlValidateBeforeCall(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToHtml(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToHtml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToHtmlCall(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to Html format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToHtml(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToHtmlWithHttpInfo(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToHtmlWithHttpInfo(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to Html format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToHtmlWithHttpInfo(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToHtmlValidateBeforeCall(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to Html format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToHtmlAsync(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToHtmlValidateBeforeCall(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToLaTeX
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param pagesCount Pages count. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToLaTeXCall(String name, String outPath, Integer pagesCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/latex"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (pagesCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesCount", pagesCount));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToLaTeXValidateBeforeCall(String name, String outPath, Integer pagesCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToLaTeX(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToLaTeX(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToLaTeXCall(name, outPath, pagesCount, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param pagesCount Pages count. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToLaTeX(String name, String outPath, Integer pagesCount, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToLaTeXWithHttpInfo(name, outPath, pagesCount, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToLaTeXWithHttpInfo(name, outPath, pagesCount, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param pagesCount Pages count. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToLaTeXWithHttpInfo(String name, String outPath, Integer pagesCount, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToLaTeXValidateBeforeCall(name, outPath, pagesCount, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to LaTeX format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param pagesCount Pages count. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToLaTeXAsync(String name, String outPath, Integer pagesCount, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToLaTeXValidateBeforeCall(name, outPath, pagesCount, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToMobiXml
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToMobiXmlCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/mobixml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToMobiXmlValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToMobiXml(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToMobiXml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToMobiXmlCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToMobiXml(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToMobiXmlWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToMobiXmlWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToMobiXmlWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToMobiXmlValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToMobiXmlAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToMobiXmlValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToPdfA
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToPdfACall(String name, String outPath, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/pdfa"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToPdfAValidateBeforeCall(String name, String outPath, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToPdfA(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToPdfA(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putPdfInStorageToPdfA(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToPdfACall(name, outPath, type, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToPdfA(String name, String outPath, String type, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToPdfAWithHttpInfo(name, outPath, type, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToPdfAWithHttpInfo(name, outPath, type, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToPdfAWithHttpInfo(String name, String outPath, String type, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToPdfAValidateBeforeCall(name, outPath, type, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToPdfAAsync(String name, String outPath, String type, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToPdfAValidateBeforeCall(name, outPath, type, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToPptx
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToPptxCall(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/pptx"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (separateImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separateImages", separateImages));
        if (slidesAsImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slidesAsImages", slidesAsImages));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToPptxValidateBeforeCall(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToPptx(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToPptx(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToPptxCall(name, outPath, separateImages, slidesAsImages, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToPptx(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToPptxWithHttpInfo(name, outPath, separateImages, slidesAsImages, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToPptxWithHttpInfo(name, outPath, separateImages, slidesAsImages, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToPptxWithHttpInfo(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToPptxValidateBeforeCall(name, outPath, separateImages, slidesAsImages, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToPptxAsync(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToPptxValidateBeforeCall(name, outPath, separateImages, slidesAsImages, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToSvg
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToSvgCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/svg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToSvgValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToSvg(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToSvg(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToSvgCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToSvg(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToSvgWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToSvgWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToSvgWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToSvgValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to SVG format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToSvgAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToSvgValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToTiff
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToTiffCall(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (brightness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("brightness", brightness));
        if (compression != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compression", compression));
        if (colorDepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("colorDepth", colorDepth));
        if (leftMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("leftMargin", leftMargin));
        if (rightMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rightMargin", rightMargin));
        if (topMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topMargin", topMargin));
        if (bottomMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bottomMargin", bottomMargin));
        if (orientation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orientation", orientation));
        if (skipBlankPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipBlankPages", skipBlankPages));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (xResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xResolution", xResolution));
        if (yResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yResolution", yResolution));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageCount", pageCount));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToTiffValidateBeforeCall(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToTiff(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToTiffCall(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToTiff(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToTiffWithHttpInfo(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToTiffWithHttpInfo(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToTiffWithHttpInfo(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToTiffValidateBeforeCall(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToTiffAsync(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToTiffValidateBeforeCall(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToXls
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXlsCall(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xls"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToXlsValidateBeforeCall(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToXls(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToXls(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToXlsCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToXls(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToXlsWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToXlsWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToXlsWithHttpInfo(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToXlsValidateBeforeCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XLS format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXlsAsync(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToXlsValidateBeforeCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToXml
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXmlCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToXmlValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToXml(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToXmlCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XML format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToXml(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToXmlWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToXmlWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XML format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToXmlWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToXmlValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XML format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXmlAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToXmlValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToXps
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXpsCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToXpsValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToXps(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToXps(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToXpsCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToXps(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToXpsWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToXpsWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToXpsWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToXpsValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XPS format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXpsAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToXpsValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPolyLineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPolyLineAnnotationCall(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polyline/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPolyLineAnnotationValidateBeforeCall(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPolyLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putPolyLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putPolyLineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putPolyLineAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document polyline annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolyLineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolyLineAnnotationResponse putPolyLineAnnotation(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolyLineAnnotationResponse> resp = putPolyLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PolyLineAnnotationResponse> resp = putPolyLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document polyline annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolyLineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolyLineAnnotationResponse> putPolyLineAnnotationWithHttpInfo(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPolyLineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document polyline annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPolyLineAnnotationAsync(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder, final ApiCallback<PolyLineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPolyLineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPolygonAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPolygonAnnotationCall(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polygon/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPolygonAnnotationValidateBeforeCall(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPolygonAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putPolygonAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putPolygonAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putPolygonAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document polygon annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolygonAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolygonAnnotationResponse putPolygonAnnotation(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolygonAnnotationResponse> resp = putPolygonAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PolygonAnnotationResponse> resp = putPolygonAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document polygon annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolygonAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolygonAnnotationResponse> putPolygonAnnotationWithHttpInfo(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPolygonAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolygonAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document polygon annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPolygonAnnotationAsync(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder, final ApiCallback<PolygonAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPolygonAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolygonAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPopupAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPopupAnnotationCall(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/popup/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPopupAnnotationValidateBeforeCall(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putPopupAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putPopupAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document popup annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationResponse putPopupAnnotation(String name, String annotationId, PopupAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationResponse> resp = putPopupAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<PopupAnnotationResponse> resp = putPopupAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document popup annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationResponse> putPopupAnnotationWithHttpInfo(String name, String annotationId, PopupAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPopupAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document popup annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPopupAnnotationAsync(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ApiCallback<PopupAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPopupAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPrivileges
     * @param name The document name. (required)
     * @param privileges Document privileges.  (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPrivilegesCall(String name, DocumentPrivilege privileges, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = privileges;

        // create path and map variables
        String localVarPath = "/pdf/{name}/privileges"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPrivilegesValidateBeforeCall(String name, DocumentPrivilege privileges, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPrivileges(Async)");
        }
        

        com.squareup.okhttp.Call call = putPrivilegesCall(name, privileges, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update privilege document.
     * 
     * @param name The document name. (required)
     * @param privileges Document privileges.  (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPrivileges(String name, DocumentPrivilege privileges, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPrivilegesWithHttpInfo(name, privileges, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPrivilegesWithHttpInfo(name, privileges, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update privilege document.
     * 
     * @param name The document name. (required)
     * @param privileges Document privileges.  (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPrivilegesWithHttpInfo(String name, DocumentPrivilege privileges, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPrivilegesValidateBeforeCall(name, privileges, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update privilege document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param privileges Document privileges.  (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPrivilegesAsync(String name, DocumentPrivilege privileges, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPrivilegesValidateBeforeCall(name, privileges, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPsInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPsInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/ps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPsInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPsInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putPsInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putPsInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPsInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putPsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPsInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPsInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PS file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPsInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPsInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putRedactionAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putRedactionAnnotationCall(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/redaction/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putRedactionAnnotationValidateBeforeCall(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putRedactionAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putRedactionAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putRedactionAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putRedactionAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document redaction annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RedactionAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedactionAnnotationResponse putRedactionAnnotation(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RedactionAnnotationResponse> resp = putRedactionAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<RedactionAnnotationResponse> resp = putRedactionAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document redaction annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RedactionAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedactionAnnotationResponse> putRedactionAnnotationWithHttpInfo(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putRedactionAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RedactionAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document redaction annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putRedactionAnnotationAsync(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder, final ApiCallback<RedactionAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putRedactionAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedactionAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putReplaceImage
     * @param name The document name. (required)
     * @param imageId The image ID. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putReplaceImageCall(String name, String imageId, String imageFilePath, String storage, String folder, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = image;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (imageFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageFilePath", imageFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putReplaceImageValidateBeforeCall(String name, String imageId, String imageFilePath, String storage, String folder, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putReplaceImage(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putReplaceImage(Async)");
        }
        

        com.squareup.okhttp.Call call = putReplaceImageCall(name, imageId, imageFilePath, storage, folder, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document image.
     * 
     * @param name The document name. (required)
     * @param imageId The image ID. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @return ImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponse putReplaceImage(String name, String imageId, String imageFilePath, String storage, String folder, File image) throws ApiException {
        try
        {
            ApiResponse<ImageResponse> resp = putReplaceImageWithHttpInfo(name, imageId, imageFilePath, storage, folder, image);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<ImageResponse> resp = putReplaceImageWithHttpInfo(name, imageId, imageFilePath, storage, folder, image);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document image.
     * 
     * @param name The document name. (required)
     * @param imageId The image ID. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @return ApiResponse&lt;ImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponse> putReplaceImageWithHttpInfo(String name, String imageId, String imageFilePath, String storage, String folder, File image) throws ApiException {
        com.squareup.okhttp.Call call = putReplaceImageValidateBeforeCall(name, imageId, imageFilePath, storage, folder, image, null, null);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document image. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId The image ID. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putReplaceImageAsync(String name, String imageId, String imageFilePath, String storage, String folder, File image, final ApiCallback<ImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putReplaceImageValidateBeforeCall(name, imageId, imageFilePath, storage, folder, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSearchableDocument
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSearchableDocumentCall(String name, String storage, String folder, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/ocr"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSearchableDocumentValidateBeforeCall(String name, String storage, String folder, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSearchableDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = putSearchableDocumentCall(name, storage, folder, lang, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create searchable PDF document. Generate OCR layer for images in input PDF document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putSearchableDocument(String name, String storage, String folder, String lang) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putSearchableDocumentWithHttpInfo(name, storage, folder, lang);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putSearchableDocumentWithHttpInfo(name, storage, folder, lang);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Create searchable PDF document. Generate OCR layer for images in input PDF document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putSearchableDocumentWithHttpInfo(String name, String storage, String folder, String lang) throws ApiException {
        com.squareup.okhttp.Call call = putSearchableDocumentValidateBeforeCall(name, storage, folder, lang, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create searchable PDF document. Generate OCR layer for images in input PDF document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSearchableDocumentAsync(String name, String storage, String folder, String lang, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSearchableDocumentValidateBeforeCall(name, storage, folder, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSetProperty
     * @param name  (required)
     * @param propertyName  (required)
     * @param value  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSetPropertyCall(String name, String propertyName, String value, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSetPropertyValidateBeforeCall(String name, String propertyName, String value, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSetProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling putSetProperty(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling putSetProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = putSetPropertyCall(name, propertyName, value, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add/update document property.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param value  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPropertyResponse putSetProperty(String name, String propertyName, String value, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPropertyResponse> resp = putSetPropertyWithHttpInfo(name, propertyName, value, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<DocumentPropertyResponse> resp = putSetPropertyWithHttpInfo(name, propertyName, value, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add/update document property.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param value  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;DocumentPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPropertyResponse> putSetPropertyWithHttpInfo(String name, String propertyName, String value, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSetPropertyValidateBeforeCall(name, propertyName, value, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add/update document property. (asynchronously)
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param value  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSetPropertyAsync(String name, String propertyName, String value, String storage, String folder, final ApiCallback<DocumentPropertyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSetPropertyValidateBeforeCall(name, propertyName, value, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSoundAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSoundAnnotationCall(String name, String annotationId, SoundAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSoundAnnotationValidateBeforeCall(String name, String annotationId, SoundAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSoundAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putSoundAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putSoundAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putSoundAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document sound annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SoundAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoundAnnotationResponse putSoundAnnotation(String name, String annotationId, SoundAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SoundAnnotationResponse> resp = putSoundAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SoundAnnotationResponse> resp = putSoundAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document sound annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SoundAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoundAnnotationResponse> putSoundAnnotationWithHttpInfo(String name, String annotationId, SoundAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSoundAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SoundAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document sound annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSoundAnnotationAsync(String name, String annotationId, SoundAnnotation annotation, String storage, String folder, final ApiCallback<SoundAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSoundAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoundAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSoundAnnotationDataExtract
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSoundAnnotationDataExtractCall(String name, String annotationId, String outFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound/{annotationId}/data/extract"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outFilePath", outFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSoundAnnotationDataExtractValidateBeforeCall(String name, String annotationId, String outFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSoundAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putSoundAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'outFilePath' is set
        if (outFilePath == null) {
            throw new ApiException("Missing the required parameter 'outFilePath' when calling putSoundAnnotationDataExtract(Async)");
        }
        

        com.squareup.okhttp.Call call = putSoundAnnotationDataExtractCall(name, annotationId, outFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document sound annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putSoundAnnotationDataExtract(String name, String annotationId, String outFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putSoundAnnotationDataExtractWithHttpInfo(name, annotationId, outFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putSoundAnnotationDataExtractWithHttpInfo(name, annotationId, outFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document sound annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putSoundAnnotationDataExtractWithHttpInfo(String name, String annotationId, String outFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSoundAnnotationDataExtractValidateBeforeCall(name, annotationId, outFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document sound annotation content to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSoundAnnotationDataExtractAsync(String name, String annotationId, String outFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSoundAnnotationDataExtractValidateBeforeCall(name, annotationId, outFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSquareAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSquareAnnotationCall(String name, String annotationId, SquareAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/square/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSquareAnnotationValidateBeforeCall(String name, String annotationId, SquareAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSquareAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putSquareAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putSquareAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putSquareAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document square annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquareAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquareAnnotationResponse putSquareAnnotation(String name, String annotationId, SquareAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquareAnnotationResponse> resp = putSquareAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SquareAnnotationResponse> resp = putSquareAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document square annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquareAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquareAnnotationResponse> putSquareAnnotationWithHttpInfo(String name, String annotationId, SquareAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSquareAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquareAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document square annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSquareAnnotationAsync(String name, String annotationId, SquareAnnotation annotation, String storage, String folder, final ApiCallback<SquareAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSquareAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquareAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSquigglyAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSquigglyAnnotationCall(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/squiggly/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSquigglyAnnotationValidateBeforeCall(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSquigglyAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putSquigglyAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putSquigglyAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putSquigglyAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document squiggly annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquigglyAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquigglyAnnotationResponse putSquigglyAnnotation(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquigglyAnnotationResponse> resp = putSquigglyAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<SquigglyAnnotationResponse> resp = putSquigglyAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document squiggly annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquigglyAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquigglyAnnotationResponse> putSquigglyAnnotationWithHttpInfo(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSquigglyAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document squiggly annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSquigglyAnnotationAsync(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder, final ApiCallback<SquigglyAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSquigglyAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putStrikeOutAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putStrikeOutAnnotationCall(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/strikeout/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putStrikeOutAnnotationValidateBeforeCall(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putStrikeOutAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putStrikeOutAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putStrikeOutAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putStrikeOutAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document StrikeOut annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StrikeOutAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrikeOutAnnotationResponse putStrikeOutAnnotation(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StrikeOutAnnotationResponse> resp = putStrikeOutAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<StrikeOutAnnotationResponse> resp = putStrikeOutAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document StrikeOut annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StrikeOutAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrikeOutAnnotationResponse> putStrikeOutAnnotationWithHttpInfo(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putStrikeOutAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document StrikeOut annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putStrikeOutAnnotationAsync(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder, final ApiCallback<StrikeOutAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putStrikeOutAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSvgInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSvgInStorageToPdfCall(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/svg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (adjustPageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("adjustPageSize", adjustPageSize));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSvgInStorageToPdfValidateBeforeCall(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSvgInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putSvgInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putSvgInStorageToPdfCall(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putSvgInStorageToPdf(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putSvgInStorageToPdfWithHttpInfo(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putSvgInStorageToPdfWithHttpInfo(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putSvgInStorageToPdfWithHttpInfo(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putSvgInStorageToPdfValidateBeforeCall(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSvgInStorageToPdfAsync(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSvgInStorageToPdfValidateBeforeCall(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTextAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTextAnnotationCall(String name, String annotationId, TextAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/text/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTextAnnotationValidateBeforeCall(String name, String annotationId, TextAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putTextAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putTextAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document text annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextAnnotationResponse putTextAnnotation(String name, String annotationId, TextAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextAnnotationResponse> resp = putTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<TextAnnotationResponse> resp = putTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document text annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextAnnotationResponse> putTextAnnotationWithHttpInfo(String name, String annotationId, TextAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putTextAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document text annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTextAnnotationAsync(String name, String annotationId, TextAnnotation annotation, String storage, String folder, final ApiCallback<TextAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTextAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putUnderlineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putUnderlineAnnotationCall(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/underline/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapeString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putUnderlineAnnotationValidateBeforeCall(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUnderlineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putUnderlineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putUnderlineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putUnderlineAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document underline annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return UnderlineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnderlineAnnotationResponse putUnderlineAnnotation(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<UnderlineAnnotationResponse> resp = putUnderlineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<UnderlineAnnotationResponse> resp = putUnderlineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document underline annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;UnderlineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnderlineAnnotationResponse> putUnderlineAnnotationWithHttpInfo(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putUnderlineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document underline annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putUnderlineAnnotationAsync(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder, final ApiCallback<UnderlineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putUnderlineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putUpdateField
     * @param name The document name. (required)
     * @param fieldName The name of a field to be updated. (required)
     * @param field with the field data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putUpdateFieldCall(String name, String fieldName, Field field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putUpdateFieldValidateBeforeCall(String name, String fieldName, Field field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUpdateField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putUpdateField(Async)");
        }
        

        com.squareup.okhttp.Call call = putUpdateFieldCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update field.
     * 
     * @param name The document name. (required)
     * @param fieldName The name of a field to be updated. (required)
     * @param field with the field data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResponse putUpdateField(String name, String fieldName, Field field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FieldResponse> resp = putUpdateFieldWithHttpInfo(name, fieldName, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FieldResponse> resp = putUpdateFieldWithHttpInfo(name, fieldName, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update field.
     * 
     * @param name The document name. (required)
     * @param fieldName The name of a field to be updated. (required)
     * @param field with the field data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResponse> putUpdateFieldWithHttpInfo(String name, String fieldName, Field field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putUpdateFieldValidateBeforeCall(name, fieldName, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update field. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The name of a field to be updated. (required)
     * @param field with the field data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putUpdateFieldAsync(String name, String fieldName, Field field, String storage, String folder, final ApiCallback<FieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putUpdateFieldValidateBeforeCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putUpdateFields
     * @param name The document name. (required)
     * @param fields with the fields data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putUpdateFieldsCall(String name, Fields fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fields;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putUpdateFieldsValidateBeforeCall(String name, Fields fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUpdateFields(Async)");
        }
        

        com.squareup.okhttp.Call call = putUpdateFieldsCall(name, fields, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields.
     * 
     * @param name The document name. (required)
     * @param fields with the fields data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldsResponse putUpdateFields(String name, Fields fields, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FieldsResponse> resp = putUpdateFieldsWithHttpInfo(name, fields, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<FieldsResponse> resp = putUpdateFieldsWithHttpInfo(name, fields, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields.
     * 
     * @param name The document name. (required)
     * @param fields with the fields data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldsResponse> putUpdateFieldsWithHttpInfo(String name, Fields fields, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putUpdateFieldsValidateBeforeCall(name, fields, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fields with the fields data. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putUpdateFieldsAsync(String name, Fields fields, String storage, String folder, final ApiCallback<FieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putUpdateFieldsValidateBeforeCall(name, fields, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putWebInStorageToPdf
     * @param name The document name. (required)
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putWebInStorageToPdfCall(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/web"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putWebInStorageToPdfValidateBeforeCall(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putWebInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling putWebInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putWebInStorageToPdfCall(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert web page to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putWebInStorageToPdf(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putWebInStorageToPdfWithHttpInfo(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putWebInStorageToPdfWithHttpInfo(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert web page to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putWebInStorageToPdfWithHttpInfo(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putWebInStorageToPdfValidateBeforeCall(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert web page to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putWebInStorageToPdfAsync(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putWebInStorageToPdfValidateBeforeCall(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXfaPdfInRequestToAcroForm
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXfaPdfInRequestToAcroFormCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xfatoacroform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXfaPdfInRequestToAcroFormValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putXfaPdfInRequestToAcroForm(Async)");
        }
        

        com.squareup.okhttp.Call call = putXfaPdfInRequestToAcroFormCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXfaPdfInRequestToAcroForm(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXfaPdfInRequestToAcroFormWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putXfaPdfInRequestToAcroFormWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXfaPdfInRequestToAcroFormWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putXfaPdfInRequestToAcroFormValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document which contatins XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXfaPdfInRequestToAcroFormAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXfaPdfInRequestToAcroFormValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXfaPdfInStorageToAcroForm
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXfaPdfInStorageToAcroFormCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xfatoacroform"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXfaPdfInStorageToAcroFormValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putXfaPdfInStorageToAcroForm(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putXfaPdfInStorageToAcroForm(Async)");
        }
        

        com.squareup.okhttp.Call call = putXfaPdfInStorageToAcroFormCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXfaPdfInStorageToAcroForm(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXfaPdfInStorageToAcroFormWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putXfaPdfInStorageToAcroFormWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXfaPdfInStorageToAcroFormWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putXfaPdfInStorageToAcroFormValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document which contatins XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXfaPdfInStorageToAcroFormAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXfaPdfInStorageToAcroFormValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXmlInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXmlInStorageToPdfCall(String name, String srcPath, String xslFilePath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (xslFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xslFilePath", xslFilePath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXmlInStorageToPdfValidateBeforeCall(String name, String srcPath, String xslFilePath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putXmlInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putXmlInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putXmlInStorageToPdfCall(name, srcPath, xslFilePath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXmlInStorageToPdf(String name, String srcPath, String xslFilePath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXmlInStorageToPdfWithHttpInfo(name, srcPath, xslFilePath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putXmlInStorageToPdfWithHttpInfo(name, srcPath, xslFilePath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXmlInStorageToPdfWithHttpInfo(String name, String srcPath, String xslFilePath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putXmlInStorageToPdfValidateBeforeCall(name, srcPath, xslFilePath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XML file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXmlInStorageToPdfAsync(String name, String srcPath, String xslFilePath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXmlInStorageToPdfValidateBeforeCall(name, srcPath, xslFilePath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXpsInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXpsInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/xps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXpsInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putXpsInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putXpsInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putXpsInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXpsInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXpsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putXpsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXpsInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putXpsInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXpsInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXpsInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXslFoInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xpsfo) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXslFoInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/xslfo"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXslFoInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putXslFoInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putXslFoInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putXslFoInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xpsfo) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXslFoInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXslFoInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.refreshToken();
                ApiResponse<AsposeResponse> resp = putXslFoInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xpsfo) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXslFoInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putXslFoInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xpsfo) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXslFoInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXslFoInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
