/**
 *
 * Copyright (c) 2022 Aspose.PDF Cloud
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */


package com.aspose.asposecloudpdfandroid.api;

import com.aspose.asposecloudpdfandroid.ApiCallback;
import com.aspose.asposecloudpdfandroid.ApiClient;
import com.aspose.asposecloudpdfandroid.ApiException;
import com.aspose.asposecloudpdfandroid.ApiResponse;
import com.aspose.asposecloudpdfandroid.Configuration;
import com.aspose.asposecloudpdfandroid.Pair;
import com.aspose.asposecloudpdfandroid.ProgressRequestBody;
import com.aspose.asposecloudpdfandroid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.asposecloudpdfandroid.model.AnnotationType;
import com.aspose.asposecloudpdfandroid.model.AnnotationsInfoResponse;
import com.aspose.asposecloudpdfandroid.model.AsposeResponse;
import com.aspose.asposecloudpdfandroid.model.AttachmentResponse;
import com.aspose.asposecloudpdfandroid.model.AttachmentsResponse;
import com.aspose.asposecloudpdfandroid.model.Bookmark;
import com.aspose.asposecloudpdfandroid.model.BookmarkResponse;
import com.aspose.asposecloudpdfandroid.model.BookmarksResponse;
import com.aspose.asposecloudpdfandroid.model.CaretAnnotation;
import com.aspose.asposecloudpdfandroid.model.CaretAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.CaretAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.CheckBoxField;
import com.aspose.asposecloudpdfandroid.model.CheckBoxFieldResponse;
import com.aspose.asposecloudpdfandroid.model.CheckBoxFieldsResponse;
import com.aspose.asposecloudpdfandroid.model.CircleAnnotation;
import com.aspose.asposecloudpdfandroid.model.CircleAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.CircleAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.ComboBoxField;
import com.aspose.asposecloudpdfandroid.model.ComboBoxFieldResponse;
import com.aspose.asposecloudpdfandroid.model.ComboBoxFieldsResponse;
import com.aspose.asposecloudpdfandroid.model.DiscUsage;
import com.aspose.asposecloudpdfandroid.model.DisplayProperties;
import com.aspose.asposecloudpdfandroid.model.DisplayPropertiesResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentConfig;
import com.aspose.asposecloudpdfandroid.model.DocumentPageResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentPagesResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentPrivilege;
import com.aspose.asposecloudpdfandroid.model.DocumentPropertiesResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentPropertyResponse;
import com.aspose.asposecloudpdfandroid.model.DocumentResponse;
import com.aspose.asposecloudpdfandroid.model.Field;
import com.aspose.asposecloudpdfandroid.model.FieldResponse;
import com.aspose.asposecloudpdfandroid.model.Fields;
import com.aspose.asposecloudpdfandroid.model.FieldsResponse;
import java.io.File;
import com.aspose.asposecloudpdfandroid.model.FileAttachmentAnnotation;
import com.aspose.asposecloudpdfandroid.model.FileAttachmentAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.FileAttachmentAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.FileVersions;
import com.aspose.asposecloudpdfandroid.model.FilesList;
import com.aspose.asposecloudpdfandroid.model.FilesUploadResult;
import com.aspose.asposecloudpdfandroid.model.FreeTextAnnotation;
import com.aspose.asposecloudpdfandroid.model.FreeTextAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.FreeTextAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.HighlightAnnotation;
import com.aspose.asposecloudpdfandroid.model.HighlightAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.HighlightAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.ImageFooter;
import com.aspose.asposecloudpdfandroid.model.ImageHeader;
import com.aspose.asposecloudpdfandroid.model.ImageResponse;
import com.aspose.asposecloudpdfandroid.model.ImageStamp;
import com.aspose.asposecloudpdfandroid.model.ImageTemplatesRequest;
import com.aspose.asposecloudpdfandroid.model.ImagesResponse;
import com.aspose.asposecloudpdfandroid.model.InkAnnotation;
import com.aspose.asposecloudpdfandroid.model.InkAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.InkAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.LineAnnotation;
import com.aspose.asposecloudpdfandroid.model.LineAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.LineAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.LinkAnnotation;
import com.aspose.asposecloudpdfandroid.model.LinkAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.LinkAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.ListBoxField;
import com.aspose.asposecloudpdfandroid.model.ListBoxFieldResponse;
import com.aspose.asposecloudpdfandroid.model.ListBoxFieldsResponse;
import com.aspose.asposecloudpdfandroid.model.MergeDocuments;
import com.aspose.asposecloudpdfandroid.model.MovieAnnotation;
import com.aspose.asposecloudpdfandroid.model.MovieAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.MovieAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.ObjectExist;
import com.aspose.asposecloudpdfandroid.model.OptimizeOptions;
import com.aspose.asposecloudpdfandroid.model.PageNumberStamp;
import com.aspose.asposecloudpdfandroid.model.Paragraph;
import com.aspose.asposecloudpdfandroid.model.PdfPageStamp;
import com.aspose.asposecloudpdfandroid.model.PermissionsFlags;
import com.aspose.asposecloudpdfandroid.model.PolyLineAnnotation;
import com.aspose.asposecloudpdfandroid.model.PolyLineAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.PolyLineAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.PolygonAnnotation;
import com.aspose.asposecloudpdfandroid.model.PolygonAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.PolygonAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.PopupAnnotation;
import com.aspose.asposecloudpdfandroid.model.PopupAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.PopupAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.RadioButtonField;
import com.aspose.asposecloudpdfandroid.model.RadioButtonFieldResponse;
import com.aspose.asposecloudpdfandroid.model.RadioButtonFieldsResponse;
import com.aspose.asposecloudpdfandroid.model.RedactionAnnotation;
import com.aspose.asposecloudpdfandroid.model.RedactionAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.RedactionAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.ScreenAnnotation;
import com.aspose.asposecloudpdfandroid.model.ScreenAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.ScreenAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.Signature;
import com.aspose.asposecloudpdfandroid.model.SignatureField;
import com.aspose.asposecloudpdfandroid.model.SignatureFieldResponse;
import com.aspose.asposecloudpdfandroid.model.SignatureFieldsResponse;
import com.aspose.asposecloudpdfandroid.model.SignatureVerifyResponse;
import com.aspose.asposecloudpdfandroid.model.SoundAnnotation;
import com.aspose.asposecloudpdfandroid.model.SoundAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.SoundAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.SplitRangePdfOptions;
import com.aspose.asposecloudpdfandroid.model.SplitResultResponse;
import com.aspose.asposecloudpdfandroid.model.SquareAnnotation;
import com.aspose.asposecloudpdfandroid.model.SquareAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.SquareAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.SquigglyAnnotation;
import com.aspose.asposecloudpdfandroid.model.SquigglyAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.SquigglyAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.Stamp;
import com.aspose.asposecloudpdfandroid.model.StampAnnotation;
import com.aspose.asposecloudpdfandroid.model.StampAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.StampAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.StampsInfoResponse;
import com.aspose.asposecloudpdfandroid.model.StorageExist;
import com.aspose.asposecloudpdfandroid.model.StrikeOutAnnotation;
import com.aspose.asposecloudpdfandroid.model.StrikeOutAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.StrikeOutAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.Table;
import com.aspose.asposecloudpdfandroid.model.TableRecognizedResponse;
import com.aspose.asposecloudpdfandroid.model.TablesRecognizedResponse;
import com.aspose.asposecloudpdfandroid.model.TextAnnotation;
import com.aspose.asposecloudpdfandroid.model.TextAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.TextAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.TextBoxField;
import com.aspose.asposecloudpdfandroid.model.TextBoxFieldResponse;
import com.aspose.asposecloudpdfandroid.model.TextBoxFieldsResponse;
import com.aspose.asposecloudpdfandroid.model.TextFooter;
import com.aspose.asposecloudpdfandroid.model.TextHeader;
import com.aspose.asposecloudpdfandroid.model.TextRectsResponse;
import com.aspose.asposecloudpdfandroid.model.TextReplaceListRequest;
import com.aspose.asposecloudpdfandroid.model.TextReplaceResponse;
import com.aspose.asposecloudpdfandroid.model.TextStamp;
import com.aspose.asposecloudpdfandroid.model.UnderlineAnnotation;
import com.aspose.asposecloudpdfandroid.model.UnderlineAnnotationResponse;
import com.aspose.asposecloudpdfandroid.model.UnderlineAnnotationsResponse;
import com.aspose.asposecloudpdfandroid.model.WordCountResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PdfApi {
    private ApiClient apiClient;

    public PdfApi(String appKey, String appSid) {
        this(Configuration.getDefaultApiClient());
        apiClient.setAppKey(appKey);
        apiClient.setAppSid(appSid);
    }

    public PdfApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for copyFile
     * @param srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to copy (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFileCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/file/copy/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.escapePathSegmentString(srcPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (destPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destPath", destPath));
        if (srcStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcStorageName", srcStorageName));
        if (destStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destStorageName", destStorageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyFileValidateBeforeCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling copyFile(Async)");
        }
        
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling copyFile(Async)");
        }
        

        com.squareup.okhttp.Call call = copyFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Copy file
     * 
     * @param srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to copy (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyFile(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        try
        {
            copyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                copyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
            }
            throw ex;
        }
    }

    /**
     * Copy file
     * 
     * @param srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to copy (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyFileWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = copyFileValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy file (asynchronously)
     * 
     * @param srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to copy (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyFileAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFileValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for copyFolder
     * @param srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFolderCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/folder/copy/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.escapePathSegmentString(srcPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (destPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destPath", destPath));
        if (srcStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcStorageName", srcStorageName));
        if (destStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destStorageName", destStorageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyFolderValidateBeforeCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling copyFolder(Async)");
        }
        
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling copyFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = copyFolderCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Copy folder
     * 
     * @param srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyFolder(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        try
        {
            copyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                copyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
            }
            throw ex;
        }
    }

    /**
     * Copy folder
     * 
     * @param srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyFolderWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        com.squareup.okhttp.Call call = copyFolderValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy folder (asynchronously)
     * 
     * @param srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyFolderAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFolderValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createFolder
     * @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFolderCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapePathSegmentString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFolderValidateBeforeCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling createFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = createFolderCall(path, storageName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create the folder
     * 
     * @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param storageName Storage name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createFolder(String path, String storageName) throws ApiException {
        try
        {
            createFolderWithHttpInfo(path, storageName);
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                createFolderWithHttpInfo(path, storageName);
            }
            throw ex;
        }
    }

    /**
     * Create the folder
     * 
     * @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createFolderWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = createFolderValidateBeforeCall(path, storageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create the folder (asynchronously)
     * 
     * @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFolderAsync(String path, String storageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFolderValidateBeforeCall(path, storageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling deleteAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document annotation by ID
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document annotation by ID
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document annotation by ID (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBookmark
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBookmarkCall(String name, String bookmarkPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/bookmarks/bookmark/{bookmarkPath}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "bookmarkPath" + "\\}", apiClient.escapePathSegmentString(bookmarkPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBookmarkValidateBeforeCall(String name, String bookmarkPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteBookmark(Async)");
        }
        
        // verify the required parameter 'bookmarkPath' is set
        if (bookmarkPath == null) {
            throw new ApiException("Missing the required parameter 'bookmarkPath' when calling deleteBookmark(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBookmarkCall(name, bookmarkPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document bookmark by ID.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteBookmark(String name, String bookmarkPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteBookmarkWithHttpInfo(name, bookmarkPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteBookmarkWithHttpInfo(name, bookmarkPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document bookmark by ID.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteBookmarkWithHttpInfo(String name, String bookmarkPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteBookmarkValidateBeforeCall(name, bookmarkPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document bookmark by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBookmarkAsync(String name, String bookmarkPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBookmarkValidateBeforeCall(name, bookmarkPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all annotations from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteDocumentAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteDocumentAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteDocumentAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all annotations from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteDocumentAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all annotations from the document (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentAnnotationsAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentBookmarks
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentBookmarksCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/bookmarks/tree"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentBookmarksValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentBookmarks(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentBookmarksCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all document bookmarks.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteDocumentBookmarks(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteDocumentBookmarksWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteDocumentBookmarksWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all document bookmarks.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteDocumentBookmarksWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentBookmarksValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all document bookmarks. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentBookmarksAsync(String name, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentBookmarksValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentLinkAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentLinkAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/links"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentLinkAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentLinkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentLinkAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all link annotations from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteDocumentLinkAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteDocumentLinkAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteDocumentLinkAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all link annotations from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteDocumentLinkAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentLinkAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all link annotations from the document (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentLinkAnnotationsAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentLinkAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentStamps
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentStampsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/stamps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentStampsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentStamps(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentStampsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all stamps from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteDocumentStamps(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteDocumentStampsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteDocumentStampsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all stamps from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteDocumentStampsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentStampsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all stamps from the document (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentStampsAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentStampsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentTables
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentTablesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/tables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentTablesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentTables(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentTablesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all tables from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteDocumentTables(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteDocumentTablesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteDocumentTablesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all tables from the document
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteDocumentTablesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentTablesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all tables from the document (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentTablesAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentTablesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteField
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling deleteField(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name/ (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFile
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to delete (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapePathSegmentString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFileValidateBeforeCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteFile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFileCall(path, storageName, versionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete file
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to delete (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFile(String path, String storageName, String versionId) throws ApiException {
        try
        {
            deleteFileWithHttpInfo(path, storageName, versionId);
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                deleteFileWithHttpInfo(path, storageName, versionId);
            }
            throw ex;
        }
    }

    /**
     * Delete file
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to delete (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFileWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileValidateBeforeCall(path, storageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete file (asynchronously)
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to delete (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileAsync(String path, String storageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileValidateBeforeCall(path, storageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFolder
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param recursive Enable to delete folders, subfolders and files (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFolderCall(String path, String storageName, Boolean recursive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapePathSegmentString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));
        if (recursive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recursive", recursive));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFolderValidateBeforeCall(String path, String storageName, Boolean recursive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFolderCall(path, storageName, recursive, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete folder
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param recursive Enable to delete folders, subfolders and files (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFolder(String path, String storageName, Boolean recursive) throws ApiException {
        try
        {
            deleteFolderWithHttpInfo(path, storageName, recursive);
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                deleteFolderWithHttpInfo(path, storageName, recursive);
            }
            throw ex;
        }
    }

    /**
     * Delete folder
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param recursive Enable to delete folders, subfolders and files (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFolderWithHttpInfo(String path, String storageName, Boolean recursive) throws ApiException {
        com.squareup.okhttp.Call call = deleteFolderValidateBeforeCall(path, storageName, recursive, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete folder (asynchronously)
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param recursive Enable to delete folders, subfolders and files (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFolderAsync(String path, String storageName, Boolean recursive, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFolderValidateBeforeCall(path, storageName, recursive, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteImage
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteImageCall(String name, String imageId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteImageValidateBeforeCall(String name, String imageId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteImage(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling deleteImage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteImageCall(name, imageId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete image from document page.
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteImage(String name, String imageId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteImageWithHttpInfo(name, imageId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteImageWithHttpInfo(name, imageId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete image from document page.
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteImageWithHttpInfo(String name, String imageId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteImageValidateBeforeCall(name, imageId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete image from document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteImageAsync(String name, String imageId, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteImageValidateBeforeCall(name, imageId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLinkAnnotation
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLinkAnnotationCall(String name, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/links/{linkId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapePathSegmentString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLinkAnnotationValidateBeforeCall(String name, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling deleteLinkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLinkAnnotationCall(name, linkId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document page link annotation by ID
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteLinkAnnotation(String name, String linkId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document page link annotation by ID
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteLinkAnnotationWithHttpInfo(String name, String linkId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteLinkAnnotationValidateBeforeCall(name, linkId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document page link annotation by ID (asynchronously)
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLinkAnnotationAsync(String name, String linkId, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLinkAnnotationValidateBeforeCall(name, linkId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePageCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePageValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling deletePage(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePageCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document page by its number.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deletePage(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePageWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deletePageWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document page by its number.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePageWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePageValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document page by its number. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePageAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePageValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePageAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePageAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePageAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePageAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling deletePageAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePageAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all annotations from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deletePageAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deletePageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all annotations from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePageAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePageAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all annotations from the page (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePageAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePageAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePageLinkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePageLinkAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/links"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePageLinkAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePageLinkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling deletePageLinkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePageLinkAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all link annotations from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deletePageLinkAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deletePageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all link annotations from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePageLinkAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePageLinkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all link annotations from the page (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePageLinkAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePageLinkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePageStamps
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePageStampsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/stamps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePageStampsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePageStamps(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling deletePageStamps(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePageStampsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all stamps from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deletePageStamps(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePageStampsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deletePageStampsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all stamps from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePageStampsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePageStampsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all stamps from the page (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePageStampsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePageStampsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePageTables
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePageTablesCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/tables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePageTablesValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePageTables(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling deletePageTables(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePageTablesCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all tables from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deletePageTables(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePageTablesWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deletePageTablesWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete all tables from the page
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePageTablesWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePageTablesValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete all tables from the page (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePageTablesAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePageTablesValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProperties
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePropertiesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePropertiesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePropertiesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete custom document properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteProperties(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePropertiesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deletePropertiesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete custom document properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePropertiesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePropertiesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete custom document properties. (asynchronously)
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePropertiesAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePropertiesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProperty
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePropertyCall(String name, String propertyName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapePathSegmentString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePropertyValidateBeforeCall(String name, String propertyName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling deleteProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePropertyCall(name, propertyName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document property.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteProperty(String name, String propertyName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deletePropertyWithHttpInfo(name, propertyName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deletePropertyWithHttpInfo(name, propertyName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document property.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deletePropertyWithHttpInfo(String name, String propertyName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deletePropertyValidateBeforeCall(name, propertyName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document property. (asynchronously)
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePropertyAsync(String name, String propertyName, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePropertyValidateBeforeCall(name, propertyName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteStamp
     * @param name The document name. (required)
     * @param stampId The stamp ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStampCall(String name, String stampId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/stamps/{stampId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "stampId" + "\\}", apiClient.escapePathSegmentString(stampId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStampValidateBeforeCall(String name, String stampId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteStamp(Async)");
        }
        
        // verify the required parameter 'stampId' is set
        if (stampId == null) {
            throw new ApiException("Missing the required parameter 'stampId' when calling deleteStamp(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStampCall(name, stampId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document stamp by ID
     * 
     * @param name The document name. (required)
     * @param stampId The stamp ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteStamp(String name, String stampId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteStampWithHttpInfo(name, stampId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteStampWithHttpInfo(name, stampId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document stamp by ID
     * 
     * @param name The document name. (required)
     * @param stampId The stamp ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteStampWithHttpInfo(String name, String stampId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteStampValidateBeforeCall(name, stampId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document stamp by ID (asynchronously)
     * 
     * @param name The document name. (required)
     * @param stampId The stamp ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStampAsync(String name, String stampId, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStampValidateBeforeCall(name, stampId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTable
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableCall(String name, String tableId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/tables/{tableId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapePathSegmentString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTableValidateBeforeCall(String name, String tableId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteTable(Async)");
        }
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling deleteTable(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTableCall(name, tableId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete document table by ID
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse deleteTable(String name, String tableId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = deleteTableWithHttpInfo(name, tableId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = deleteTableWithHttpInfo(name, tableId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Delete document table by ID
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> deleteTableWithHttpInfo(String name, String tableId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = deleteTableValidateBeforeCall(name, tableId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete document table by ID (asynchronously)
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTableAsync(String name, String tableId, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableValidateBeforeCall(name, tableId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for downloadFile
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to download (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapePathSegmentString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileValidateBeforeCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling downloadFile(Async)");
        }
        

        com.squareup.okhttp.Call call = downloadFileCall(path, storageName, versionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download file
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to download (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadFile(String path, String storageName, String versionId) throws ApiException {
        try
        {
            ApiResponse<File> resp = downloadFileWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = downloadFileWithHttpInfo(path, storageName, versionId);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Download file
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to download (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadFileWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(path, storageName, versionId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download file (asynchronously)
     * 
     * @param path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID to download (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(String path, String storageName, String versionId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(path, storageName, versionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBookmark
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBookmarkCall(String name, String bookmarkPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/bookmarks/bookmark/{bookmarkPath}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "bookmarkPath" + "\\}", apiClient.escapePathSegmentString(bookmarkPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBookmarkValidateBeforeCall(String name, String bookmarkPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBookmark(Async)");
        }
        
        // verify the required parameter 'bookmarkPath' is set
        if (bookmarkPath == null) {
            throw new ApiException("Missing the required parameter 'bookmarkPath' when calling getBookmark(Async)");
        }
        

        com.squareup.okhttp.Call call = getBookmarkCall(name, bookmarkPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document bookmark.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return BookmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BookmarkResponse getBookmark(String name, String bookmarkPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<BookmarkResponse> resp = getBookmarkWithHttpInfo(name, bookmarkPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<BookmarkResponse> resp = getBookmarkWithHttpInfo(name, bookmarkPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document bookmark.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;BookmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BookmarkResponse> getBookmarkWithHttpInfo(String name, String bookmarkPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getBookmarkValidateBeforeCall(name, bookmarkPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<BookmarkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document bookmark. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBookmarkAsync(String name, String bookmarkPath, String folder, String storage, final ApiCallback<BookmarkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBookmarkValidateBeforeCall(name, bookmarkPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BookmarkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBookmarks
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBookmarksCall(String name, String bookmarkPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/bookmarks/list/{bookmarkPath}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "bookmarkPath" + "\\}", apiClient.escapePathSegmentString(bookmarkPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBookmarksValidateBeforeCall(String name, String bookmarkPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBookmarks(Async)");
        }
        
        // verify the required parameter 'bookmarkPath' is set
        if (bookmarkPath == null) {
            throw new ApiException("Missing the required parameter 'bookmarkPath' when calling getBookmarks(Async)");
        }
        

        com.squareup.okhttp.Call call = getBookmarksCall(name, bookmarkPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document bookmarks node list.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return BookmarksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BookmarksResponse getBookmarks(String name, String bookmarkPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<BookmarksResponse> resp = getBookmarksWithHttpInfo(name, bookmarkPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<BookmarksResponse> resp = getBookmarksWithHttpInfo(name, bookmarkPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document bookmarks node list.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;BookmarksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BookmarksResponse> getBookmarksWithHttpInfo(String name, String bookmarkPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getBookmarksValidateBeforeCall(name, bookmarkPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<BookmarksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document bookmarks node list. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBookmarksAsync(String name, String bookmarkPath, String folder, String storage, final ApiCallback<BookmarksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBookmarksValidateBeforeCall(name, bookmarkPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BookmarksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCaretAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCaretAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/caret/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCaretAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getCaretAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getCaretAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getCaretAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page caret annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CaretAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CaretAnnotationResponse getCaretAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CaretAnnotationResponse> resp = getCaretAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CaretAnnotationResponse> resp = getCaretAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page caret annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CaretAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CaretAnnotationResponse> getCaretAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getCaretAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CaretAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page caret annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCaretAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<CaretAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCaretAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CaretAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCheckBoxField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCheckBoxFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/checkbox/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCheckBoxFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getCheckBoxField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getCheckBoxField(Async)");
        }
        

        com.squareup.okhttp.Call call = getCheckBoxFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document checkbox field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CheckBoxFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckBoxFieldResponse getCheckBoxField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CheckBoxFieldResponse> resp = getCheckBoxFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CheckBoxFieldResponse> resp = getCheckBoxFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document checkbox field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CheckBoxFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckBoxFieldResponse> getCheckBoxFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getCheckBoxFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CheckBoxFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document checkbox field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCheckBoxFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<CheckBoxFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCheckBoxFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckBoxFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCircleAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCircleAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/circle/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCircleAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getCircleAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getCircleAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getCircleAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page circle annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CircleAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CircleAnnotationResponse getCircleAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CircleAnnotationResponse> resp = getCircleAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CircleAnnotationResponse> resp = getCircleAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page circle annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CircleAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CircleAnnotationResponse> getCircleAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getCircleAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CircleAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page circle annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCircleAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<CircleAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCircleAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CircleAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComboBoxField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComboBoxFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/combobox/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComboBoxFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getComboBoxField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getComboBoxField(Async)");
        }
        

        com.squareup.okhttp.Call call = getComboBoxFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document combobox field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ComboBoxFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComboBoxFieldResponse getComboBoxField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ComboBoxFieldResponse> resp = getComboBoxFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ComboBoxFieldResponse> resp = getComboBoxFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document combobox field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ComboBoxFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComboBoxFieldResponse> getComboBoxFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getComboBoxFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ComboBoxFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document combobox field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComboBoxFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<ComboBoxFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComboBoxFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComboBoxFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscUsage
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/disc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscUsageValidateBeforeCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDiscUsageCall(storageName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get disc usage
     * 
     * @param storageName Storage name (optional)
     * @return DiscUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscUsage getDiscUsage(String storageName) throws ApiException {
        try
        {
            ApiResponse<DiscUsage> resp = getDiscUsageWithHttpInfo(storageName);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DiscUsage> resp = getDiscUsageWithHttpInfo(storageName);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get disc usage
     * 
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;DiscUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscUsage> getDiscUsageWithHttpInfo(String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getDiscUsageValidateBeforeCall(storageName, null, null);
        Type localVarReturnType = new TypeToken<DiscUsage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get disc usage (asynchronously)
     * 
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageAsync(String storageName, final ApiCallback<DiscUsage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscUsageValidateBeforeCall(storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscUsage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocument
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read common document info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse getDocument(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentResponse> resp = getDocumentWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentResponse> resp = getDocumentWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read common document info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> getDocumentWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read common document info. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAsync(String name, String storage, String folder, final ApiCallback<DocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AnnotationsInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnnotationsInfoResponse getDocumentAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AnnotationsInfoResponse> resp = getDocumentAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AnnotationsInfoResponse> resp = getDocumentAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AnnotationsInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnnotationsInfoResponse> getDocumentAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AnnotationsInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAnnotationsAsync(String name, String storage, String folder, final ApiCallback<AnnotationsInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnotationsInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentAttachmentByIndex
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentAttachmentByIndexCall(String name, Integer attachmentIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/attachments/{attachmentIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "attachmentIndex" + "\\}", apiClient.escapePathSegmentString(attachmentIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentAttachmentByIndexValidateBeforeCall(String name, Integer attachmentIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentAttachmentByIndex(Async)");
        }
        
        // verify the required parameter 'attachmentIndex' is set
        if (attachmentIndex == null) {
            throw new ApiException("Missing the required parameter 'attachmentIndex' when calling getDocumentAttachmentByIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentAttachmentByIndexCall(name, attachmentIndex, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document attachment info by its index.
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentResponse getDocumentAttachmentByIndex(String name, Integer attachmentIndex, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AttachmentResponse> resp = getDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AttachmentResponse> resp = getDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document attachment info by its index.
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentResponse> getDocumentAttachmentByIndexWithHttpInfo(String name, Integer attachmentIndex, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentAttachmentByIndexValidateBeforeCall(name, attachmentIndex, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AttachmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document attachment info by its index. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAttachmentByIndexAsync(String name, Integer attachmentIndex, String storage, String folder, final ApiCallback<AttachmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentAttachmentByIndexValidateBeforeCall(name, attachmentIndex, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentAttachments
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentAttachmentsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/attachments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentAttachmentsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentAttachments(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentAttachmentsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document attachments info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AttachmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AttachmentsResponse getDocumentAttachments(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AttachmentsResponse> resp = getDocumentAttachmentsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AttachmentsResponse> resp = getDocumentAttachmentsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document attachments info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AttachmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AttachmentsResponse> getDocumentAttachmentsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentAttachmentsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AttachmentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document attachments info. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentAttachmentsAsync(String name, String storage, String folder, final ApiCallback<AttachmentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentAttachmentsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AttachmentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentBookmarks
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentBookmarksCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/bookmarks/tree"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentBookmarksValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentBookmarks(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentBookmarksCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document bookmarks tree.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return BookmarksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BookmarksResponse getDocumentBookmarks(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<BookmarksResponse> resp = getDocumentBookmarksWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<BookmarksResponse> resp = getDocumentBookmarksWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document bookmarks tree.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;BookmarksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BookmarksResponse> getDocumentBookmarksWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentBookmarksValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<BookmarksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document bookmarks tree. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentBookmarksAsync(String name, String folder, String storage, final ApiCallback<BookmarksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentBookmarksValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BookmarksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentCaretAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentCaretAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/caret"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentCaretAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentCaretAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCaretAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document caret annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CaretAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CaretAnnotationsResponse getDocumentCaretAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CaretAnnotationsResponse> resp = getDocumentCaretAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CaretAnnotationsResponse> resp = getDocumentCaretAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document caret annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CaretAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CaretAnnotationsResponse> getDocumentCaretAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentCaretAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CaretAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document caret annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentCaretAnnotationsAsync(String name, String storage, String folder, final ApiCallback<CaretAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentCaretAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CaretAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentCheckBoxFields
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentCheckBoxFieldsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/checkbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentCheckBoxFieldsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentCheckBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCheckBoxFieldsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document checkbox fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CheckBoxFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckBoxFieldsResponse getDocumentCheckBoxFields(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CheckBoxFieldsResponse> resp = getDocumentCheckBoxFieldsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CheckBoxFieldsResponse> resp = getDocumentCheckBoxFieldsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document checkbox fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CheckBoxFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckBoxFieldsResponse> getDocumentCheckBoxFieldsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentCheckBoxFieldsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CheckBoxFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document checkbox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentCheckBoxFieldsAsync(String name, String storage, String folder, final ApiCallback<CheckBoxFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentCheckBoxFieldsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckBoxFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentCircleAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentCircleAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/circle"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentCircleAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentCircleAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCircleAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document circle annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CircleAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CircleAnnotationsResponse getDocumentCircleAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CircleAnnotationsResponse> resp = getDocumentCircleAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CircleAnnotationsResponse> resp = getDocumentCircleAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document circle annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CircleAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CircleAnnotationsResponse> getDocumentCircleAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentCircleAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CircleAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document circle annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentCircleAnnotationsAsync(String name, String storage, String folder, final ApiCallback<CircleAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentCircleAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CircleAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentComboBoxFields
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentComboBoxFieldsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/combobox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentComboBoxFieldsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentComboBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentComboBoxFieldsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document combobox fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ComboBoxFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComboBoxFieldsResponse getDocumentComboBoxFields(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ComboBoxFieldsResponse> resp = getDocumentComboBoxFieldsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ComboBoxFieldsResponse> resp = getDocumentComboBoxFieldsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document combobox fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ComboBoxFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComboBoxFieldsResponse> getDocumentComboBoxFieldsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentComboBoxFieldsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ComboBoxFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document combobox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentComboBoxFieldsAsync(String name, String storage, String folder, final ApiCallback<ComboBoxFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentComboBoxFieldsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComboBoxFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentDisplayProperties
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDisplayPropertiesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/displayproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDisplayPropertiesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentDisplayProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentDisplayPropertiesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document display properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return DisplayPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisplayPropertiesResponse getDocumentDisplayProperties(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DisplayPropertiesResponse> resp = getDocumentDisplayPropertiesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DisplayPropertiesResponse> resp = getDocumentDisplayPropertiesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document display properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;DisplayPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisplayPropertiesResponse> getDocumentDisplayPropertiesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentDisplayPropertiesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DisplayPropertiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document display properties. (asynchronously)
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentDisplayPropertiesAsync(String name, String storage, String folder, final ApiCallback<DisplayPropertiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDisplayPropertiesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisplayPropertiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentFileAttachmentAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentFileAttachmentAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentFileAttachmentAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentFileAttachmentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentFileAttachmentAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FileAttachmentAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileAttachmentAnnotationsResponse getDocumentFileAttachmentAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FileAttachmentAnnotationsResponse> resp = getDocumentFileAttachmentAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FileAttachmentAnnotationsResponse> resp = getDocumentFileAttachmentAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FileAttachmentAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileAttachmentAnnotationsResponse> getDocumentFileAttachmentAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentFileAttachmentAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document FileAttachment annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentFileAttachmentAnnotationsAsync(String name, String storage, String folder, final ApiCallback<FileAttachmentAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentFileAttachmentAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentFreeTextAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentFreeTextAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/freetext"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentFreeTextAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentFreeTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentFreeTextAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document free text annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FreeTextAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTextAnnotationsResponse getDocumentFreeTextAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FreeTextAnnotationsResponse> resp = getDocumentFreeTextAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FreeTextAnnotationsResponse> resp = getDocumentFreeTextAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document free text annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FreeTextAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTextAnnotationsResponse> getDocumentFreeTextAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentFreeTextAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document free text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentFreeTextAnnotationsAsync(String name, String storage, String folder, final ApiCallback<FreeTextAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentFreeTextAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentHighlightAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentHighlightAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/highlight"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentHighlightAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentHighlightAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentHighlightAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document highlight annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return HighlightAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HighlightAnnotationsResponse getDocumentHighlightAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<HighlightAnnotationsResponse> resp = getDocumentHighlightAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<HighlightAnnotationsResponse> resp = getDocumentHighlightAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document highlight annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;HighlightAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HighlightAnnotationsResponse> getDocumentHighlightAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentHighlightAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<HighlightAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document highlight annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentHighlightAnnotationsAsync(String name, String storage, String folder, final ApiCallback<HighlightAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentHighlightAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HighlightAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentInkAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentInkAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/ink"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentInkAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentInkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentInkAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document ink annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return InkAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InkAnnotationsResponse getDocumentInkAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<InkAnnotationsResponse> resp = getDocumentInkAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<InkAnnotationsResponse> resp = getDocumentInkAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document ink annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;InkAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InkAnnotationsResponse> getDocumentInkAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentInkAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<InkAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document ink annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentInkAnnotationsAsync(String name, String storage, String folder, final ApiCallback<InkAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentInkAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InkAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentLineAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentLineAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/line"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentLineAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentLineAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document line annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineAnnotationsResponse getDocumentLineAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LineAnnotationsResponse> resp = getDocumentLineAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<LineAnnotationsResponse> resp = getDocumentLineAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document line annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineAnnotationsResponse> getDocumentLineAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentLineAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document line annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentLineAnnotationsAsync(String name, String storage, String folder, final ApiCallback<LineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentLineAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentListBoxFields
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentListBoxFieldsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/listbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentListBoxFieldsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentListBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentListBoxFieldsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document listbox fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ListBoxFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListBoxFieldsResponse getDocumentListBoxFields(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ListBoxFieldsResponse> resp = getDocumentListBoxFieldsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ListBoxFieldsResponse> resp = getDocumentListBoxFieldsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document listbox fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ListBoxFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListBoxFieldsResponse> getDocumentListBoxFieldsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentListBoxFieldsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ListBoxFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document listbox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentListBoxFieldsAsync(String name, String storage, String folder, final ApiCallback<ListBoxFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentListBoxFieldsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListBoxFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentMovieAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentMovieAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/movie"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentMovieAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentMovieAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentMovieAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document movie annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return MovieAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MovieAnnotationsResponse getDocumentMovieAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<MovieAnnotationsResponse> resp = getDocumentMovieAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<MovieAnnotationsResponse> resp = getDocumentMovieAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document movie annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;MovieAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MovieAnnotationsResponse> getDocumentMovieAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentMovieAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<MovieAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document movie annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentMovieAnnotationsAsync(String name, String storage, String folder, final ApiCallback<MovieAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentMovieAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MovieAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentPolyLineAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPolyLineAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polyline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPolyLineAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentPolyLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPolyLineAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document polyline annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolyLineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolyLineAnnotationsResponse getDocumentPolyLineAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolyLineAnnotationsResponse> resp = getDocumentPolyLineAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PolyLineAnnotationsResponse> resp = getDocumentPolyLineAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document polyline annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolyLineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolyLineAnnotationsResponse> getDocumentPolyLineAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPolyLineAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document polyline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPolyLineAnnotationsAsync(String name, String storage, String folder, final ApiCallback<PolyLineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPolyLineAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentPolygonAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPolygonAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polygon"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPolygonAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentPolygonAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPolygonAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document polygon annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolygonAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolygonAnnotationsResponse getDocumentPolygonAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolygonAnnotationsResponse> resp = getDocumentPolygonAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PolygonAnnotationsResponse> resp = getDocumentPolygonAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document polygon annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolygonAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolygonAnnotationsResponse> getDocumentPolygonAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPolygonAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolygonAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document polygon annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPolygonAnnotationsAsync(String name, String storage, String folder, final ApiCallback<PolygonAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPolygonAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolygonAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentPopupAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPopupAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/popup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPopupAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentPopupAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document popup annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationsResponse getDocumentPopupAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationsResponse> resp = getDocumentPopupAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PopupAnnotationsResponse> resp = getDocumentPopupAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document popup annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationsResponse> getDocumentPopupAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document popup annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPopupAnnotationsAsync(String name, String storage, String folder, final ApiCallback<PopupAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentPopupAnnotationsByParent
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPopupAnnotationsByParentCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/{annotationId}/popup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPopupAnnotationsByParentValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentPopupAnnotationsByParent(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getDocumentPopupAnnotationsByParent(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsByParentCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document popup annotations by parent id.
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationsResponse getDocumentPopupAnnotationsByParent(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationsResponse> resp = getDocumentPopupAnnotationsByParentWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PopupAnnotationsResponse> resp = getDocumentPopupAnnotationsByParentWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document popup annotations by parent id.
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationsResponse> getDocumentPopupAnnotationsByParentWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsByParentValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document popup annotations by parent id. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPopupAnnotationsByParentAsync(String name, String annotationId, String storage, String folder, final ApiCallback<PopupAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPopupAnnotationsByParentValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentProperties
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPropertiesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPropertiesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return DocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPropertiesResponse getDocumentProperties(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPropertiesResponse> resp = getDocumentPropertiesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentPropertiesResponse> resp = getDocumentPropertiesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document properties.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;DocumentPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPropertiesResponse> getDocumentPropertiesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPropertiesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPropertiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document properties. (asynchronously)
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesAsync(String name, String storage, String folder, final ApiCallback<DocumentPropertiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertiesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPropertiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentProperty
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyCall(String name, String propertyName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapePathSegmentString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPropertyValidateBeforeCall(String name, String propertyName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling getDocumentProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentPropertyCall(name, propertyName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document property by name.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPropertyResponse getDocumentProperty(String name, String propertyName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPropertyResponse> resp = getDocumentPropertyWithHttpInfo(name, propertyName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentPropertyResponse> resp = getDocumentPropertyWithHttpInfo(name, propertyName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document property by name.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;DocumentPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPropertyResponse> getDocumentPropertyWithHttpInfo(String name, String propertyName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPropertyValidateBeforeCall(name, propertyName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document property by name. (asynchronously)
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyAsync(String name, String propertyName, String storage, String folder, final ApiCallback<DocumentPropertyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertyValidateBeforeCall(name, propertyName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentRadioButtonFields
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentRadioButtonFieldsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/radiobutton"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentRadioButtonFieldsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentRadioButtonFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentRadioButtonFieldsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document radiobutton fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RadioButtonFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RadioButtonFieldsResponse getDocumentRadioButtonFields(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RadioButtonFieldsResponse> resp = getDocumentRadioButtonFieldsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<RadioButtonFieldsResponse> resp = getDocumentRadioButtonFieldsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document radiobutton fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RadioButtonFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RadioButtonFieldsResponse> getDocumentRadioButtonFieldsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentRadioButtonFieldsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RadioButtonFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document radiobutton fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentRadioButtonFieldsAsync(String name, String storage, String folder, final ApiCallback<RadioButtonFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentRadioButtonFieldsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RadioButtonFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentRedactionAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentRedactionAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/redaction"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentRedactionAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentRedactionAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentRedactionAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document redaction annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RedactionAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedactionAnnotationsResponse getDocumentRedactionAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RedactionAnnotationsResponse> resp = getDocumentRedactionAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<RedactionAnnotationsResponse> resp = getDocumentRedactionAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document redaction annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RedactionAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedactionAnnotationsResponse> getDocumentRedactionAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentRedactionAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RedactionAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document redaction annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentRedactionAnnotationsAsync(String name, String storage, String folder, final ApiCallback<RedactionAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentRedactionAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedactionAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentScreenAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentScreenAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/screen"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentScreenAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentScreenAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentScreenAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document screen annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ScreenAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenAnnotationsResponse getDocumentScreenAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ScreenAnnotationsResponse> resp = getDocumentScreenAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ScreenAnnotationsResponse> resp = getDocumentScreenAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document screen annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ScreenAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenAnnotationsResponse> getDocumentScreenAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentScreenAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ScreenAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document screen annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentScreenAnnotationsAsync(String name, String storage, String folder, final ApiCallback<ScreenAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentScreenAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentSignatureFields
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentSignatureFieldsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/signature"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentSignatureFieldsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentSignatureFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentSignatureFieldsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document signature fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SignatureFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignatureFieldsResponse getDocumentSignatureFields(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SignatureFieldsResponse> resp = getDocumentSignatureFieldsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SignatureFieldsResponse> resp = getDocumentSignatureFieldsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document signature fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SignatureFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignatureFieldsResponse> getDocumentSignatureFieldsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentSignatureFieldsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SignatureFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document signature fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentSignatureFieldsAsync(String name, String storage, String folder, final ApiCallback<SignatureFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentSignatureFieldsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignatureFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentSoundAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentSoundAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentSoundAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentSoundAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentSoundAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document sound annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SoundAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoundAnnotationsResponse getDocumentSoundAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SoundAnnotationsResponse> resp = getDocumentSoundAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SoundAnnotationsResponse> resp = getDocumentSoundAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document sound annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SoundAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoundAnnotationsResponse> getDocumentSoundAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentSoundAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SoundAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document sound annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentSoundAnnotationsAsync(String name, String storage, String folder, final ApiCallback<SoundAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentSoundAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoundAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentSquareAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentSquareAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/square"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentSquareAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentSquareAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentSquareAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document square annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquareAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquareAnnotationsResponse getDocumentSquareAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquareAnnotationsResponse> resp = getDocumentSquareAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SquareAnnotationsResponse> resp = getDocumentSquareAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document square annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquareAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquareAnnotationsResponse> getDocumentSquareAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentSquareAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquareAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document square annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentSquareAnnotationsAsync(String name, String storage, String folder, final ApiCallback<SquareAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentSquareAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquareAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentSquigglyAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentSquigglyAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/squiggly"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentSquigglyAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentSquigglyAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentSquigglyAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquigglyAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquigglyAnnotationsResponse getDocumentSquigglyAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquigglyAnnotationsResponse> resp = getDocumentSquigglyAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SquigglyAnnotationsResponse> resp = getDocumentSquigglyAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquigglyAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquigglyAnnotationsResponse> getDocumentSquigglyAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentSquigglyAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document squiggly annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentSquigglyAnnotationsAsync(String name, String storage, String folder, final ApiCallback<SquigglyAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentSquigglyAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentStampAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentStampAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/stamp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentStampAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentStampAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentStampAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document stamp annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StampAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StampAnnotationsResponse getDocumentStampAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StampAnnotationsResponse> resp = getDocumentStampAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StampAnnotationsResponse> resp = getDocumentStampAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document stamp annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StampAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StampAnnotationsResponse> getDocumentStampAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentStampAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StampAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document stamp annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentStampAnnotationsAsync(String name, String storage, String folder, final ApiCallback<StampAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentStampAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StampAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentStamps
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentStampsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/stamps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentStampsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentStamps(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentStampsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document stamps.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StampsInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StampsInfoResponse getDocumentStamps(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StampsInfoResponse> resp = getDocumentStampsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StampsInfoResponse> resp = getDocumentStampsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document stamps.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StampsInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StampsInfoResponse> getDocumentStampsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentStampsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StampsInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document stamps. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentStampsAsync(String name, String storage, String folder, final ApiCallback<StampsInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentStampsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StampsInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentStrikeOutAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentStrikeOutAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/strikeout"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentStrikeOutAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentStrikeOutAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentStrikeOutAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StrikeOutAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrikeOutAnnotationsResponse getDocumentStrikeOutAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StrikeOutAnnotationsResponse> resp = getDocumentStrikeOutAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StrikeOutAnnotationsResponse> resp = getDocumentStrikeOutAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StrikeOutAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrikeOutAnnotationsResponse> getDocumentStrikeOutAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentStrikeOutAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document StrikeOut annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentStrikeOutAnnotationsAsync(String name, String storage, String folder, final ApiCallback<StrikeOutAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentStrikeOutAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentTables
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentTablesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/tables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentTablesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentTables(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentTablesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document tables.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return TablesRecognizedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TablesRecognizedResponse getDocumentTables(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TablesRecognizedResponse> resp = getDocumentTablesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TablesRecognizedResponse> resp = getDocumentTablesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document tables.
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;TablesRecognizedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TablesRecognizedResponse> getDocumentTablesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentTablesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TablesRecognizedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document tables. (asynchronously)
     * 
     * @param name  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentTablesAsync(String name, String storage, String folder, final ApiCallback<TablesRecognizedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentTablesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TablesRecognizedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentTextAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentTextAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentTextAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentTextAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document text annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextAnnotationsResponse getDocumentTextAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextAnnotationsResponse> resp = getDocumentTextAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextAnnotationsResponse> resp = getDocumentTextAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document text annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextAnnotationsResponse> getDocumentTextAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentTextAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentTextAnnotationsAsync(String name, String storage, String folder, final ApiCallback<TextAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentTextAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentTextBoxFields
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentTextBoxFieldsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/textbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentTextBoxFieldsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentTextBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentTextBoxFieldsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document text box fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextBoxFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextBoxFieldsResponse getDocumentTextBoxFields(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextBoxFieldsResponse> resp = getDocumentTextBoxFieldsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextBoxFieldsResponse> resp = getDocumentTextBoxFieldsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document text box fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextBoxFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextBoxFieldsResponse> getDocumentTextBoxFieldsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentTextBoxFieldsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextBoxFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document text box fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentTextBoxFieldsAsync(String name, String storage, String folder, final ApiCallback<TextBoxFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentTextBoxFieldsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextBoxFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentUnderlineAnnotations
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentUnderlineAnnotationsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/underline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentUnderlineAnnotationsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentUnderlineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentUnderlineAnnotationsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document underline annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return UnderlineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnderlineAnnotationsResponse getDocumentUnderlineAnnotations(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<UnderlineAnnotationsResponse> resp = getDocumentUnderlineAnnotationsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<UnderlineAnnotationsResponse> resp = getDocumentUnderlineAnnotationsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document underline annotations.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;UnderlineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnderlineAnnotationsResponse> getDocumentUnderlineAnnotationsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentUnderlineAnnotationsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document underline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentUnderlineAnnotationsAsync(String name, String storage, String folder, final ApiCallback<UnderlineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentUnderlineAnnotationsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDownloadDocumentAttachmentByIndex
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDownloadDocumentAttachmentByIndexCall(String name, Integer attachmentIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/attachments/{attachmentIndex}/download"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "attachmentIndex" + "\\}", apiClient.escapePathSegmentString(attachmentIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDownloadDocumentAttachmentByIndexValidateBeforeCall(String name, Integer attachmentIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDownloadDocumentAttachmentByIndex(Async)");
        }
        
        // verify the required parameter 'attachmentIndex' is set
        if (attachmentIndex == null) {
            throw new ApiException("Missing the required parameter 'attachmentIndex' when calling getDownloadDocumentAttachmentByIndex(Async)");
        }
        

        com.squareup.okhttp.Call call = getDownloadDocumentAttachmentByIndexCall(name, attachmentIndex, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download document attachment content by its index.
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getDownloadDocumentAttachmentByIndex(String name, Integer attachmentIndex, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getDownloadDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getDownloadDocumentAttachmentByIndexWithHttpInfo(name, attachmentIndex, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Download document attachment content by its index.
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getDownloadDocumentAttachmentByIndexWithHttpInfo(String name, Integer attachmentIndex, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getDownloadDocumentAttachmentByIndexValidateBeforeCall(name, attachmentIndex, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download document attachment content by its index. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param attachmentIndex The attachment index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDownloadDocumentAttachmentByIndexAsync(String name, Integer attachmentIndex, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDownloadDocumentAttachmentByIndexValidateBeforeCall(name, attachmentIndex, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEpubInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEpubInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/epub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEpubInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getEpubInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getEpubInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getEpubInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getEpubInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getEpubInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert EPUB file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getEpubInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getEpubInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert EPUB file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEpubInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEpubInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExportFieldsFromPdfToFdfInStorage
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExportFieldsFromPdfToFdfInStorageCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/export/fdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExportFieldsFromPdfToFdfInStorageValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getExportFieldsFromPdfToFdfInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = getExportFieldsFromPdfToFdfInStorageCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export fields from from PDF in storage to FDF file.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getExportFieldsFromPdfToFdfInStorage(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getExportFieldsFromPdfToFdfInStorageWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getExportFieldsFromPdfToFdfInStorageWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Export fields from from PDF in storage to FDF file.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getExportFieldsFromPdfToFdfInStorageWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getExportFieldsFromPdfToFdfInStorageValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export fields from from PDF in storage to FDF file. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExportFieldsFromPdfToFdfInStorageAsync(String name, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExportFieldsFromPdfToFdfInStorageValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExportFieldsFromPdfToXfdfInStorage
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExportFieldsFromPdfToXfdfInStorageCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/export/xfdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExportFieldsFromPdfToXfdfInStorageValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getExportFieldsFromPdfToXfdfInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = getExportFieldsFromPdfToXfdfInStorageCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export fields from from PDF in storage to XFDF file.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getExportFieldsFromPdfToXfdfInStorage(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getExportFieldsFromPdfToXfdfInStorageWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getExportFieldsFromPdfToXfdfInStorageWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Export fields from from PDF in storage to XFDF file.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getExportFieldsFromPdfToXfdfInStorageWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getExportFieldsFromPdfToXfdfInStorageValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export fields from from PDF in storage to XFDF file. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExportFieldsFromPdfToXfdfInStorageAsync(String name, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExportFieldsFromPdfToXfdfInStorageValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExportFieldsFromPdfToXmlInStorage
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExportFieldsFromPdfToXmlInStorageCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/export/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExportFieldsFromPdfToXmlInStorageValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getExportFieldsFromPdfToXmlInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = getExportFieldsFromPdfToXmlInStorageCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export fields from from PDF in storage to XML file.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getExportFieldsFromPdfToXmlInStorage(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getExportFieldsFromPdfToXmlInStorageWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getExportFieldsFromPdfToXmlInStorageWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Export fields from from PDF in storage to XML file.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getExportFieldsFromPdfToXmlInStorageWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getExportFieldsFromPdfToXmlInStorageValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export fields from from PDF in storage to XML file. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExportFieldsFromPdfToXmlInStorageAsync(String name, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExportFieldsFromPdfToXmlInStorageValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getField
     * @param name The document name. (required)
     * @param fieldName The field name (name should be encoded). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getField(Async)");
        }
        

        com.squareup.okhttp.Call call = getFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get document field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name (name should be encoded). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResponse getField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FieldResponse> resp = getFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FieldResponse> resp = getFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get document field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name (name should be encoded). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResponse> getFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get document field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name (name should be encoded). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<FieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFields
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldsCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldsValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getFieldsCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get document fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldsResponse getFields(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FieldsResponse> resp = getFieldsWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FieldsResponse> resp = getFieldsWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get document fields.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldsResponse> getFieldsWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get document fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldsAsync(String name, String storage, String folder, final ApiCallback<FieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileAttachmentAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileAttachmentAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileAttachmentAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFileAttachmentAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getFileAttachmentAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileAttachmentAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page FileAttachment annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FileAttachmentAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileAttachmentAnnotationResponse getFileAttachmentAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FileAttachmentAnnotationResponse> resp = getFileAttachmentAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FileAttachmentAnnotationResponse> resp = getFileAttachmentAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page FileAttachment annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FileAttachmentAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileAttachmentAnnotationResponse> getFileAttachmentAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFileAttachmentAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page FileAttachment annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileAttachmentAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<FileAttachmentAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileAttachmentAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileAttachmentAnnotationData
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileAttachmentAnnotationDataCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment/{annotationId}/data"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileAttachmentAnnotationDataValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFileAttachmentAnnotationData(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getFileAttachmentAnnotationData(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileAttachmentAnnotationDataCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page FileAttachment annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getFileAttachmentAnnotationData(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getFileAttachmentAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getFileAttachmentAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page FileAttachment annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getFileAttachmentAnnotationDataWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFileAttachmentAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page FileAttachment annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileAttachmentAnnotationDataAsync(String name, String annotationId, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileAttachmentAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFileVersions
     * @param path File path e.g. &#39;/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileVersionsCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/version/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapePathSegmentString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFileVersionsValidateBeforeCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFileVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = getFileVersionsCall(path, storageName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get file versions
     * 
     * @param path File path e.g. &#39;/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @return FileVersions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileVersions getFileVersions(String path, String storageName) throws ApiException {
        try
        {
            ApiResponse<FileVersions> resp = getFileVersionsWithHttpInfo(path, storageName);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FileVersions> resp = getFileVersionsWithHttpInfo(path, storageName);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get file versions
     * 
     * @param path File path e.g. &#39;/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;FileVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileVersions> getFileVersionsWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getFileVersionsValidateBeforeCall(path, storageName, null, null);
        Type localVarReturnType = new TypeToken<FileVersions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get file versions (asynchronously)
     * 
     * @param path File path e.g. &#39;/file.ext&#39; (required)
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileVersionsAsync(String path, String storageName, final ApiCallback<FileVersions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileVersionsValidateBeforeCall(path, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileVersions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFilesList
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapePathSegmentString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesListValidateBeforeCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getFilesList(Async)");
        }
        

        com.squareup.okhttp.Call call = getFilesListCall(path, storageName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all files and folders within a folder
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @return FilesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesList getFilesList(String path, String storageName) throws ApiException {
        try
        {
            ApiResponse<FilesList> resp = getFilesListWithHttpInfo(path, storageName);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FilesList> resp = getFilesListWithHttpInfo(path, storageName);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;FilesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesList> getFilesListWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getFilesListValidateBeforeCall(path, storageName, null, null);
        Type localVarReturnType = new TypeToken<FilesList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all files and folders within a folder (asynchronously)
     * 
     * @param path Folder path e.g. &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesListAsync(String path, String storageName, final ApiCallback<FilesList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListValidateBeforeCall(path, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilesList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFreeTextAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFreeTextAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/freetext/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFreeTextAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFreeTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getFreeTextAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getFreeTextAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page free text annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FreeTextAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTextAnnotationResponse getFreeTextAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FreeTextAnnotationResponse> resp = getFreeTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FreeTextAnnotationResponse> resp = getFreeTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page free text annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FreeTextAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTextAnnotationResponse> getFreeTextAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getFreeTextAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page free text annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFreeTextAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<FreeTextAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFreeTextAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHighlightAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHighlightAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/highlight/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHighlightAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getHighlightAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getHighlightAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getHighlightAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page highlight annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return HighlightAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HighlightAnnotationResponse getHighlightAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<HighlightAnnotationResponse> resp = getHighlightAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<HighlightAnnotationResponse> resp = getHighlightAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page highlight annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;HighlightAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HighlightAnnotationResponse> getHighlightAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getHighlightAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<HighlightAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page highlight annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHighlightAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<HighlightAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHighlightAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HighlightAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHtmlInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHtmlInStorageToPdfCall(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (htmlFileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlFileName", htmlFileName));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHtmlInStorageToPdfValidateBeforeCall(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getHtmlInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getHtmlInStorageToPdfCall(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert HTML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getHtmlInStorageToPdf(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getHtmlInStorageToPdfWithHttpInfo(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getHtmlInStorageToPdfWithHttpInfo(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert HTML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getHtmlInStorageToPdfWithHttpInfo(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getHtmlInStorageToPdfValidateBeforeCall(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert HTML file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHtmlInStorageToPdfAsync(String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHtmlInStorageToPdfValidateBeforeCall(srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImage
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageCall(String name, String imageId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageValidateBeforeCall(String name, String imageId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImage(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImage(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageCall(name, imageId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document image by ID.
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponse getImage(String name, String imageId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ImageResponse> resp = getImageWithHttpInfo(name, imageId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ImageResponse> resp = getImageWithHttpInfo(name, imageId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document image by ID.
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponse> getImageWithHttpInfo(String name, String imageId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageValidateBeforeCall(name, imageId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document image by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageAsync(String name, String imageId, String storage, String folder, final ApiCallback<ImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageValidateBeforeCall(name, imageId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImageExtractAsGif
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsGifCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageExtractAsGifValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImageExtractAsGif(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageExtractAsGif(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageExtractAsGifCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in GIF format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImageExtractAsGif(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in GIF format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImageExtractAsGifWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageExtractAsGifValidateBeforeCall(name, imageId, width, height, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in GIF format (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsGifAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageExtractAsGifValidateBeforeCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImageExtractAsJpeg
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsJpegCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageExtractAsJpegValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImageExtractAsJpeg(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageExtractAsJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageExtractAsJpegCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in JPEG format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImageExtractAsJpeg(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in JPEG format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImageExtractAsJpegWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageExtractAsJpegValidateBeforeCall(name, imageId, width, height, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in JPEG format (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsJpegAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageExtractAsJpegValidateBeforeCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImageExtractAsPng
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsPngCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageExtractAsPngValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImageExtractAsPng(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageExtractAsPng(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageExtractAsPngCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in PNG format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImageExtractAsPng(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in PNG format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImageExtractAsPngWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageExtractAsPngValidateBeforeCall(name, imageId, width, height, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in PNG format (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsPngAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageExtractAsPngValidateBeforeCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImageExtractAsTiff
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsTiffCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageExtractAsTiffValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImageExtractAsTiff(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageExtractAsTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = getImageExtractAsTiffCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in TIFF format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImageExtractAsTiff(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in TIFF format
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImageExtractAsTiffWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImageExtractAsTiffValidateBeforeCall(name, imageId, width, height, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in TIFF format (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageExtractAsTiffAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageExtractAsTiffValidateBeforeCall(name, imageId, width, height, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImages
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImagesCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImagesValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImages(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getImages(Async)");
        }
        

        com.squareup.okhttp.Call call = getImagesCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document images.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImagesResponse getImages(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ImagesResponse> resp = getImagesWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ImagesResponse> resp = getImagesWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document images.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImagesResponse> getImagesWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImagesValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document images. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImagesAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<ImagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImagesValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImportFieldsFromFdfInStorage
     * @param name The document name. (required)
     * @param fdfFilePath The Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImportFieldsFromFdfInStorageCall(String name, String fdfFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/fdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fdfFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fdfFilePath", fdfFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImportFieldsFromFdfInStorageValidateBeforeCall(String name, String fdfFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImportFieldsFromFdfInStorage(Async)");
        }
        
        // verify the required parameter 'fdfFilePath' is set
        if (fdfFilePath == null) {
            throw new ApiException("Missing the required parameter 'fdfFilePath' when calling getImportFieldsFromFdfInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = getImportFieldsFromFdfInStorageCall(name, fdfFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields from FDF file in storage.
     * 
     * @param name The document name. (required)
     * @param fdfFilePath The Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImportFieldsFromFdfInStorage(String name, String fdfFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImportFieldsFromFdfInStorageWithHttpInfo(name, fdfFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getImportFieldsFromFdfInStorageWithHttpInfo(name, fdfFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields from FDF file in storage.
     * 
     * @param name The document name. (required)
     * @param fdfFilePath The Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImportFieldsFromFdfInStorageWithHttpInfo(String name, String fdfFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImportFieldsFromFdfInStorageValidateBeforeCall(name, fdfFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields from FDF file in storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fdfFilePath The Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImportFieldsFromFdfInStorageAsync(String name, String fdfFilePath, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImportFieldsFromFdfInStorageValidateBeforeCall(name, fdfFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImportFieldsFromXfdfInStorage
     * @param name The document name. (required)
     * @param xfdfFilePath The XFDF file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImportFieldsFromXfdfInStorageCall(String name, String xfdfFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/xfdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (xfdfFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xfdfFilePath", xfdfFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImportFieldsFromXfdfInStorageValidateBeforeCall(String name, String xfdfFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImportFieldsFromXfdfInStorage(Async)");
        }
        
        // verify the required parameter 'xfdfFilePath' is set
        if (xfdfFilePath == null) {
            throw new ApiException("Missing the required parameter 'xfdfFilePath' when calling getImportFieldsFromXfdfInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = getImportFieldsFromXfdfInStorageCall(name, xfdfFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields from XFDF file in storage.
     * 
     * @param name The document name. (required)
     * @param xfdfFilePath The XFDF file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImportFieldsFromXfdfInStorage(String name, String xfdfFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImportFieldsFromXfdfInStorageWithHttpInfo(name, xfdfFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getImportFieldsFromXfdfInStorageWithHttpInfo(name, xfdfFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields from XFDF file in storage.
     * 
     * @param name The document name. (required)
     * @param xfdfFilePath The XFDF file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImportFieldsFromXfdfInStorageWithHttpInfo(String name, String xfdfFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImportFieldsFromXfdfInStorageValidateBeforeCall(name, xfdfFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields from XFDF file in storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param xfdfFilePath The XFDF file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImportFieldsFromXfdfInStorageAsync(String name, String xfdfFilePath, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImportFieldsFromXfdfInStorageValidateBeforeCall(name, xfdfFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImportFieldsFromXmlInStorage
     * @param name The document name. (required)
     * @param xmlFilePath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImportFieldsFromXmlInStorageCall(String name, String xmlFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (xmlFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xmlFilePath", xmlFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImportFieldsFromXmlInStorageValidateBeforeCall(String name, String xmlFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImportFieldsFromXmlInStorage(Async)");
        }
        
        // verify the required parameter 'xmlFilePath' is set
        if (xmlFilePath == null) {
            throw new ApiException("Missing the required parameter 'xmlFilePath' when calling getImportFieldsFromXmlInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = getImportFieldsFromXmlInStorageCall(name, xmlFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import from XML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param name The document name. (required)
     * @param xmlFilePath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getImportFieldsFromXmlInStorage(String name, String xmlFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getImportFieldsFromXmlInStorageWithHttpInfo(name, xmlFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getImportFieldsFromXmlInStorageWithHttpInfo(name, xmlFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Import from XML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param name The document name. (required)
     * @param xmlFilePath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getImportFieldsFromXmlInStorageWithHttpInfo(String name, String xmlFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getImportFieldsFromXmlInStorageValidateBeforeCall(name, xmlFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import from XML file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param xmlFilePath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImportFieldsFromXmlInStorageAsync(String name, String xmlFilePath, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImportFieldsFromXmlInStorageValidateBeforeCall(name, xmlFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInkAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInkAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/ink/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInkAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getInkAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getInkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getInkAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page ink annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return InkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InkAnnotationResponse getInkAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<InkAnnotationResponse> resp = getInkAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<InkAnnotationResponse> resp = getInkAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page ink annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;InkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InkAnnotationResponse> getInkAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getInkAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<InkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page ink annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInkAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<InkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInkAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLineAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/line/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLineAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getLineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getLineAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page line annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineAnnotationResponse getLineAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LineAnnotationResponse> resp = getLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<LineAnnotationResponse> resp = getLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page line annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineAnnotationResponse> getLineAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getLineAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page line annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLineAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<LineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLineAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLinkAnnotation
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLinkAnnotationCall(String name, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/links/{linkId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapePathSegmentString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLinkAnnotationValidateBeforeCall(String name, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling getLinkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getLinkAnnotationCall(name, linkId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document link annotation by ID.
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LinkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkAnnotationResponse getLinkAnnotation(String name, String linkId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LinkAnnotationResponse> resp = getLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<LinkAnnotationResponse> resp = getLinkAnnotationWithHttpInfo(name, linkId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document link annotation by ID.
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LinkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkAnnotationResponse> getLinkAnnotationWithHttpInfo(String name, String linkId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getLinkAnnotationValidateBeforeCall(name, linkId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document link annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLinkAnnotationAsync(String name, String linkId, String storage, String folder, final ApiCallback<LinkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLinkAnnotationValidateBeforeCall(name, linkId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListBoxField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListBoxFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/listbox/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListBoxFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getListBoxField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getListBoxField(Async)");
        }
        

        com.squareup.okhttp.Call call = getListBoxFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document listbox field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ListBoxFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListBoxFieldResponse getListBoxField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ListBoxFieldResponse> resp = getListBoxFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ListBoxFieldResponse> resp = getListBoxFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document listbox field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ListBoxFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListBoxFieldResponse> getListBoxFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getListBoxFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ListBoxFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document listbox field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListBoxFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<ListBoxFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListBoxFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListBoxFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMarkdownInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.md) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMarkdownInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/markdown";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarkdownInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getMarkdownInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getMarkdownInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert MD file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.md) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getMarkdownInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getMarkdownInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getMarkdownInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert MD file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.md) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getMarkdownInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getMarkdownInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert MD file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.md) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarkdownInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMarkdownInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMhtInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMhtInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/mht";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMhtInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getMhtInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getMhtInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert MHT file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getMhtInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getMhtInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getMhtInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert MHT file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getMhtInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getMhtInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert MHT file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMhtInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMhtInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMovieAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMovieAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/movie/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMovieAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMovieAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getMovieAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getMovieAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page movie annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return MovieAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MovieAnnotationResponse getMovieAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<MovieAnnotationResponse> resp = getMovieAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<MovieAnnotationResponse> resp = getMovieAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page movie annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;MovieAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MovieAnnotationResponse> getMovieAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getMovieAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<MovieAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page movie annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMovieAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<MovieAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMovieAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MovieAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPage(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page info.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DocumentPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPageResponse getPage(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPageResponse> resp = getPageWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentPageResponse> resp = getPageWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page info.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DocumentPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPageResponse> getPageWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page info. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<DocumentPageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AnnotationsInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnnotationsInfoResponse getPageAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AnnotationsInfoResponse> resp = getPageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AnnotationsInfoResponse> resp = getPageAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AnnotationsInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnnotationsInfoResponse> getPageAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AnnotationsInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page annotations. Returns only FreeTextAnnotations, TextAnnotations, other annotations will implemented next releases. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<AnnotationsInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnotationsInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageCaretAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageCaretAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/caret"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageCaretAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageCaretAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageCaretAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageCaretAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page caret annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CaretAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CaretAnnotationsResponse getPageCaretAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CaretAnnotationsResponse> resp = getPageCaretAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CaretAnnotationsResponse> resp = getPageCaretAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page caret annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CaretAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CaretAnnotationsResponse> getPageCaretAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageCaretAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CaretAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page caret annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageCaretAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<CaretAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageCaretAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CaretAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageCheckBoxFields
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageCheckBoxFieldsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/page/{pageNumber}/fields/checkbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageCheckBoxFieldsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageCheckBoxFields(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageCheckBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageCheckBoxFieldsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page checkbox fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CheckBoxFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckBoxFieldsResponse getPageCheckBoxFields(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CheckBoxFieldsResponse> resp = getPageCheckBoxFieldsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CheckBoxFieldsResponse> resp = getPageCheckBoxFieldsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page checkbox fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CheckBoxFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckBoxFieldsResponse> getPageCheckBoxFieldsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageCheckBoxFieldsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CheckBoxFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page checkbox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageCheckBoxFieldsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<CheckBoxFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageCheckBoxFieldsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckBoxFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageCircleAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageCircleAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/circle"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageCircleAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageCircleAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageCircleAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageCircleAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page circle annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CircleAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CircleAnnotationsResponse getPageCircleAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CircleAnnotationsResponse> resp = getPageCircleAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CircleAnnotationsResponse> resp = getPageCircleAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page circle annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CircleAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CircleAnnotationsResponse> getPageCircleAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageCircleAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CircleAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page circle annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageCircleAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<CircleAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageCircleAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CircleAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageComboBoxFields
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageComboBoxFieldsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/page/{pageNumber}/fields/combobox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageComboBoxFieldsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageComboBoxFields(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageComboBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageComboBoxFieldsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page combobox fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ComboBoxFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComboBoxFieldsResponse getPageComboBoxFields(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ComboBoxFieldsResponse> resp = getPageComboBoxFieldsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ComboBoxFieldsResponse> resp = getPageComboBoxFieldsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page combobox fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ComboBoxFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComboBoxFieldsResponse> getPageComboBoxFieldsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageComboBoxFieldsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ComboBoxFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page combobox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageComboBoxFieldsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<ComboBoxFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageComboBoxFieldsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComboBoxFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToBmp
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToBmpCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToBmpValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToBmp(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToBmp(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToBmpCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Bmp image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToBmp(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToBmpWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPageConvertToBmpWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Bmp image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToBmpWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToBmpValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Bmp image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToBmpAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToBmpValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToEmf
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToEmfCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToEmfValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToEmf(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToEmf(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToEmfCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Emf image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToEmf(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToEmfWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPageConvertToEmfWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Emf image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToEmfWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToEmfValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Emf image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToEmfAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToEmfValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToGif
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToGifCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToGifValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToGif(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToGif(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToGifCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Gif image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToGif(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToGifWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPageConvertToGifWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Gif image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToGifWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToGifValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Gif image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToGifAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToGifValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToJpeg
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToJpegCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToJpegValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToJpeg(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToJpegCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Jpeg image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToJpeg(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToJpegWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPageConvertToJpegWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Jpeg image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToJpegWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToJpegValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Jpeg image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToJpegAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToJpegValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToPng
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToPngCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToPngValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToPng(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToPng(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToPngCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Png image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToPng(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToPngWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPageConvertToPngWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Png image and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToPngWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToPngValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Png image and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToPngAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToPngValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageConvertToTiff
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToTiffCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageConvertToTiffValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageConvertToTiff(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageConvertToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageConvertToTiffCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Tiff image  and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPageConvertToTiff(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPageConvertToTiffWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPageConvertToTiffWithHttpInfo(name, pageNumber, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Tiff image  and return resulting file in response.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPageConvertToTiffWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = getPageConvertToTiffValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Tiff image  and return resulting file in response. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageConvertToTiffAsync(String name, Integer pageNumber, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageConvertToTiffValidateBeforeCall(name, pageNumber, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageFileAttachmentAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageFileAttachmentAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/fileattachment"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageFileAttachmentAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageFileAttachmentAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageFileAttachmentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageFileAttachmentAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FileAttachmentAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileAttachmentAnnotationsResponse getPageFileAttachmentAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FileAttachmentAnnotationsResponse> resp = getPageFileAttachmentAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FileAttachmentAnnotationsResponse> resp = getPageFileAttachmentAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FileAttachmentAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileAttachmentAnnotationsResponse> getPageFileAttachmentAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageFileAttachmentAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page FileAttachment annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageFileAttachmentAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<FileAttachmentAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageFileAttachmentAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageFreeTextAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageFreeTextAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/freetext"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageFreeTextAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageFreeTextAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageFreeTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageFreeTextAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page free text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FreeTextAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTextAnnotationsResponse getPageFreeTextAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FreeTextAnnotationsResponse> resp = getPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FreeTextAnnotationsResponse> resp = getPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page free text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FreeTextAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTextAnnotationsResponse> getPageFreeTextAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageFreeTextAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page free text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageFreeTextAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<FreeTextAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageFreeTextAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageHighlightAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageHighlightAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/highlight"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageHighlightAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageHighlightAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageHighlightAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageHighlightAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page highlight annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return HighlightAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HighlightAnnotationsResponse getPageHighlightAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<HighlightAnnotationsResponse> resp = getPageHighlightAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<HighlightAnnotationsResponse> resp = getPageHighlightAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page highlight annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;HighlightAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HighlightAnnotationsResponse> getPageHighlightAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageHighlightAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<HighlightAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page highlight annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageHighlightAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<HighlightAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageHighlightAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HighlightAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageInkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageInkAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/ink"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageInkAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageInkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageInkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageInkAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page ink annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return InkAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InkAnnotationsResponse getPageInkAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<InkAnnotationsResponse> resp = getPageInkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<InkAnnotationsResponse> resp = getPageInkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page ink annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;InkAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InkAnnotationsResponse> getPageInkAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageInkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<InkAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page ink annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageInkAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<InkAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageInkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InkAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageLineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageLineAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/line"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageLineAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageLineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageLineAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page line annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineAnnotationsResponse getPageLineAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LineAnnotationsResponse> resp = getPageLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<LineAnnotationsResponse> resp = getPageLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page line annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineAnnotationsResponse> getPageLineAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageLineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page line annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageLineAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<LineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageLineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageLinkAnnotation
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getPageLinkAnnotationCall(String name, Integer pageNumber, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/links/{linkId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()))
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapePathSegmentString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageLinkAnnotationValidateBeforeCall(String name, Integer pageNumber, String linkId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling getPageLinkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageLinkAnnotationCall(name, pageNumber, linkId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page link annotation by ID.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LinkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public LinkAnnotationResponse getPageLinkAnnotation(String name, Integer pageNumber, String linkId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LinkAnnotationResponse> resp = getPageLinkAnnotationWithHttpInfo(name, pageNumber, linkId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<LinkAnnotationResponse> resp = getPageLinkAnnotationWithHttpInfo(name, pageNumber, linkId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page link annotation by ID.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LinkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<LinkAnnotationResponse> getPageLinkAnnotationWithHttpInfo(String name, Integer pageNumber, String linkId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageLinkAnnotationValidateBeforeCall(name, pageNumber, linkId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page link annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param linkId The link ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getPageLinkAnnotationAsync(String name, Integer pageNumber, String linkId, String storage, String folder, final ApiCallback<LinkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageLinkAnnotationValidateBeforeCall(name, pageNumber, linkId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageLinkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageLinkAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/links"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageLinkAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageLinkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageLinkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageLinkAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page link annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LinkAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkAnnotationsResponse getPageLinkAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LinkAnnotationsResponse> resp = getPageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<LinkAnnotationsResponse> resp = getPageLinkAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page link annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LinkAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkAnnotationsResponse> getPageLinkAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageLinkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LinkAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page link annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageLinkAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<LinkAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageLinkAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageListBoxFields
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageListBoxFieldsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/page/{pageNumber}/fields/listbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageListBoxFieldsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageListBoxFields(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageListBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageListBoxFieldsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page listbox fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ListBoxFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListBoxFieldsResponse getPageListBoxFields(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ListBoxFieldsResponse> resp = getPageListBoxFieldsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ListBoxFieldsResponse> resp = getPageListBoxFieldsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page listbox fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ListBoxFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListBoxFieldsResponse> getPageListBoxFieldsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageListBoxFieldsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ListBoxFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page listbox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageListBoxFieldsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<ListBoxFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageListBoxFieldsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListBoxFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageMovieAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageMovieAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/movie"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageMovieAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageMovieAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageMovieAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageMovieAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page movie annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return MovieAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MovieAnnotationsResponse getPageMovieAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<MovieAnnotationsResponse> resp = getPageMovieAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<MovieAnnotationsResponse> resp = getPageMovieAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page movie annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;MovieAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MovieAnnotationsResponse> getPageMovieAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageMovieAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<MovieAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page movie annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageMovieAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<MovieAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageMovieAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MovieAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPagePolyLineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPagePolyLineAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polyline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPagePolyLineAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPagePolyLineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPagePolyLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPagePolyLineAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page polyline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolyLineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolyLineAnnotationsResponse getPagePolyLineAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolyLineAnnotationsResponse> resp = getPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PolyLineAnnotationsResponse> resp = getPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page polyline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolyLineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolyLineAnnotationsResponse> getPagePolyLineAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPagePolyLineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page polyline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagePolyLineAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<PolyLineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagePolyLineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPagePolygonAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPagePolygonAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polygon"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPagePolygonAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPagePolygonAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPagePolygonAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPagePolygonAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page polygon annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolygonAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolygonAnnotationsResponse getPagePolygonAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolygonAnnotationsResponse> resp = getPagePolygonAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PolygonAnnotationsResponse> resp = getPagePolygonAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page polygon annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolygonAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolygonAnnotationsResponse> getPagePolygonAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPagePolygonAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolygonAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page polygon annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagePolygonAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<PolygonAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagePolygonAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolygonAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPagePopupAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPagePopupAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/popup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPagePopupAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPagePopupAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPagePopupAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPagePopupAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page popup annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationsResponse getPagePopupAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationsResponse> resp = getPagePopupAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PopupAnnotationsResponse> resp = getPagePopupAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page popup annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationsResponse> getPagePopupAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPagePopupAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page popup annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagePopupAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<PopupAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagePopupAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageRadioButtonFields
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageRadioButtonFieldsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/page/{pageNumber}/fields/radiobutton"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageRadioButtonFieldsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageRadioButtonFields(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageRadioButtonFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageRadioButtonFieldsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page radiobutton fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RadioButtonFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RadioButtonFieldsResponse getPageRadioButtonFields(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RadioButtonFieldsResponse> resp = getPageRadioButtonFieldsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<RadioButtonFieldsResponse> resp = getPageRadioButtonFieldsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page radiobutton fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RadioButtonFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RadioButtonFieldsResponse> getPageRadioButtonFieldsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageRadioButtonFieldsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RadioButtonFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page radiobutton fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageRadioButtonFieldsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<RadioButtonFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageRadioButtonFieldsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RadioButtonFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageRedactionAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageRedactionAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/redaction"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageRedactionAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageRedactionAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageRedactionAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageRedactionAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page redaction annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RedactionAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedactionAnnotationsResponse getPageRedactionAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RedactionAnnotationsResponse> resp = getPageRedactionAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<RedactionAnnotationsResponse> resp = getPageRedactionAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page redaction annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RedactionAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedactionAnnotationsResponse> getPageRedactionAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageRedactionAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RedactionAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page redaction annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageRedactionAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<RedactionAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageRedactionAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedactionAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageScreenAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageScreenAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/screen"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageScreenAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageScreenAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageScreenAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageScreenAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page screen annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ScreenAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenAnnotationsResponse getPageScreenAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ScreenAnnotationsResponse> resp = getPageScreenAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ScreenAnnotationsResponse> resp = getPageScreenAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page screen annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ScreenAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenAnnotationsResponse> getPageScreenAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageScreenAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ScreenAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page screen annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageScreenAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<ScreenAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageScreenAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageSignatureFields
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageSignatureFieldsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/page/{pageNumber}/fields/signature"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageSignatureFieldsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageSignatureFields(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageSignatureFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageSignatureFieldsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page signature fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SignatureFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignatureFieldsResponse getPageSignatureFields(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SignatureFieldsResponse> resp = getPageSignatureFieldsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SignatureFieldsResponse> resp = getPageSignatureFieldsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page signature fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SignatureFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignatureFieldsResponse> getPageSignatureFieldsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageSignatureFieldsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SignatureFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page signature fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageSignatureFieldsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<SignatureFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageSignatureFieldsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignatureFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageSoundAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageSoundAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/sound"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageSoundAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageSoundAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageSoundAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageSoundAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page sound annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SoundAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoundAnnotationsResponse getPageSoundAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SoundAnnotationsResponse> resp = getPageSoundAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SoundAnnotationsResponse> resp = getPageSoundAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page sound annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SoundAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoundAnnotationsResponse> getPageSoundAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageSoundAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SoundAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page sound annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageSoundAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<SoundAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageSoundAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoundAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageSquareAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageSquareAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/square"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageSquareAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageSquareAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageSquareAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageSquareAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page square annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquareAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquareAnnotationsResponse getPageSquareAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquareAnnotationsResponse> resp = getPageSquareAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SquareAnnotationsResponse> resp = getPageSquareAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page square annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquareAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquareAnnotationsResponse> getPageSquareAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageSquareAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquareAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page square annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageSquareAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<SquareAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageSquareAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquareAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageSquigglyAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageSquigglyAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/squiggly"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageSquigglyAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageSquigglyAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageSquigglyAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageSquigglyAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquigglyAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquigglyAnnotationsResponse getPageSquigglyAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquigglyAnnotationsResponse> resp = getPageSquigglyAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SquigglyAnnotationsResponse> resp = getPageSquigglyAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquigglyAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquigglyAnnotationsResponse> getPageSquigglyAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageSquigglyAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page squiggly annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageSquigglyAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<SquigglyAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageSquigglyAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageStampAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageStampAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/stamp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageStampAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageStampAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageStampAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageStampAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page stamp annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StampAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StampAnnotationsResponse getPageStampAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StampAnnotationsResponse> resp = getPageStampAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StampAnnotationsResponse> resp = getPageStampAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page stamp annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StampAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StampAnnotationsResponse> getPageStampAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageStampAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StampAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page stamp annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageStampAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<StampAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageStampAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StampAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageStamps
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageStampsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/stamps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageStampsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageStamps(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageStamps(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageStampsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read page document stamps.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StampsInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StampsInfoResponse getPageStamps(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StampsInfoResponse> resp = getPageStampsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StampsInfoResponse> resp = getPageStampsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read page document stamps.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StampsInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StampsInfoResponse> getPageStampsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageStampsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StampsInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read page document stamps. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageStampsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<StampsInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageStampsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StampsInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageStrikeOutAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageStrikeOutAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/strikeout"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageStrikeOutAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageStrikeOutAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageStrikeOutAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageStrikeOutAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StrikeOutAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrikeOutAnnotationsResponse getPageStrikeOutAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StrikeOutAnnotationsResponse> resp = getPageStrikeOutAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StrikeOutAnnotationsResponse> resp = getPageStrikeOutAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StrikeOutAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrikeOutAnnotationsResponse> getPageStrikeOutAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageStrikeOutAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page StrikeOut annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageStrikeOutAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<StrikeOutAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageStrikeOutAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageTables
     * @param name  (required)
     * @param pageNumber  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageTablesCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/tables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageTablesValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageTables(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageTables(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageTablesCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page tables.
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return TablesRecognizedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TablesRecognizedResponse getPageTables(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TablesRecognizedResponse> resp = getPageTablesWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TablesRecognizedResponse> resp = getPageTablesWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page tables.
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;TablesRecognizedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TablesRecognizedResponse> getPageTablesWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageTablesValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TablesRecognizedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page tables. (asynchronously)
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageTablesAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<TablesRecognizedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageTablesValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TablesRecognizedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageText
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageTextCall(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "format", format));
        if (regex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("regex", regex));
        if (splitRects != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitRects", splitRects));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (LLX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LLX", LLX));
        if (LLY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LLY", LLY));
        if (URX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("URX", URX));
        if (URY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("URY", URY));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageTextValidateBeforeCall(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'LLX' is set
        if (LLX == null) {
            throw new ApiException("Missing the required parameter 'LLX' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'LLY' is set
        if (LLY == null) {
            throw new ApiException("Missing the required parameter 'LLY' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'URX' is set
        if (URX == null) {
            throw new ApiException("Missing the required parameter 'URX' when calling getPageText(Async)");
        }
        
        // verify the required parameter 'URY' is set
        if (URY == null) {
            throw new ApiException("Missing the required parameter 'URY' when calling getPageText(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageTextCall(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read page text items.
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return TextRectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextRectsResponse getPageText(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<TextRectsResponse> resp = getPageTextWithHttpInfo(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextRectsResponse> resp = getPageTextWithHttpInfo(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read page text items.
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;TextRectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextRectsResponse> getPageTextWithHttpInfo(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPageTextValidateBeforeCall(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TextRectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read page text items. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageTextAsync(String name, Integer pageNumber, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ApiCallback<TextRectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageTextValidateBeforeCall(name, pageNumber, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextRectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageTextAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageTextAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageTextAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageTextAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageTextAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextAnnotationsResponse getPageTextAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextAnnotationsResponse> resp = getPageTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextAnnotationsResponse> resp = getPageTextAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextAnnotationsResponse> getPageTextAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageTextAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageTextAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<TextAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageTextAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageTextBoxFields
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageTextBoxFieldsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/page/{pageNumber}/fields/textbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageTextBoxFieldsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageTextBoxFields(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageTextBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageTextBoxFieldsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page text box fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextBoxFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextBoxFieldsResponse getPageTextBoxFields(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextBoxFieldsResponse> resp = getPageTextBoxFieldsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextBoxFieldsResponse> resp = getPageTextBoxFieldsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page text box fields.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextBoxFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextBoxFieldsResponse> getPageTextBoxFieldsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageTextBoxFieldsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextBoxFieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page text box fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageTextBoxFieldsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<TextBoxFieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageTextBoxFieldsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextBoxFieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPageUnderlineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPageUnderlineAnnotationsCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/underline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPageUnderlineAnnotationsValidateBeforeCall(String name, Integer pageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPageUnderlineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getPageUnderlineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPageUnderlineAnnotationsCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page underline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return UnderlineAnnotationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnderlineAnnotationsResponse getPageUnderlineAnnotations(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<UnderlineAnnotationsResponse> resp = getPageUnderlineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<UnderlineAnnotationsResponse> resp = getPageUnderlineAnnotationsWithHttpInfo(name, pageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page underline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;UnderlineAnnotationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnderlineAnnotationsResponse> getPageUnderlineAnnotationsWithHttpInfo(String name, Integer pageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPageUnderlineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page underline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPageUnderlineAnnotationsAsync(String name, Integer pageNumber, String storage, String folder, final ApiCallback<UnderlineAnnotationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPageUnderlineAnnotationsValidateBeforeCall(name, pageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPages
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPagesCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPagesValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPages(Async)");
        }
        

        com.squareup.okhttp.Call call = getPagesCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document pages info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DocumentPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPagesResponse getPages(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPagesResponse> resp = getPagesWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentPagesResponse> resp = getPagesWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document pages info.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DocumentPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPagesResponse> getPagesWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPagesValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document pages info. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagesAsync(String name, String storage, String folder, final ApiCallback<DocumentPagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagesValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPclInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPclInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/pcl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPclInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getPclInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getPclInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PCL file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPclInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPclInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPclInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PCL file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPclInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPclInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PCL file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPclInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPclInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfAInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pdf) (required)
     * @param dontOptimize If set, document resources will not be optimized. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfAInStorageToPdfCall(String srcPath, Boolean dontOptimize, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/pdfa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dontOptimize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dontOptimize", dontOptimize));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfAInStorageToPdfValidateBeforeCall(String srcPath, Boolean dontOptimize, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getPdfAInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfAInStorageToPdfCall(srcPath, dontOptimize, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PDFA file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pdf) (required)
     * @param dontOptimize If set, document resources will not be optimized. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfAInStorageToPdf(String srcPath, Boolean dontOptimize, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfAInStorageToPdfWithHttpInfo(srcPath, dontOptimize, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfAInStorageToPdfWithHttpInfo(srcPath, dontOptimize, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PDFA file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pdf) (required)
     * @param dontOptimize If set, document resources will not be optimized. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfAInStorageToPdfWithHttpInfo(String srcPath, Boolean dontOptimize, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfAInStorageToPdfValidateBeforeCall(srcPath, dontOptimize, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PDFA file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pdf) (required)
     * @param dontOptimize If set, document resources will not be optimized. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfAInStorageToPdfAsync(String srcPath, Boolean dontOptimize, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfAInStorageToPdfValidateBeforeCall(srcPath, dontOptimize, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToDoc
     * @param name The document name. (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToDocCall(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/doc"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addReturnToLineEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addReturnToLineEnd", addReturnToLineEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (imageResolutionX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionX", imageResolutionX));
        if (imageResolutionY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionY", imageResolutionY));
        if (maxDistanceBetweenTextLines != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxDistanceBetweenTextLines", maxDistanceBetweenTextLines));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        if (recognizeBullets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recognizeBullets", recognizeBullets));
        if (relativeHorizontalProximity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("relativeHorizontalProximity", relativeHorizontalProximity));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToDocValidateBeforeCall(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToDocCall(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to DOC format and returns resulting file in response content.
     * 
     * @param name The document name. (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToDoc(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToDocWithHttpInfo(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToDocWithHttpInfo(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to DOC format and returns resulting file in response content.
     * 
     * @param name The document name. (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToDocWithHttpInfo(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToDocValidateBeforeCall(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to DOC format and returns resulting file in response content. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToDocAsync(String name, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToDocValidateBeforeCall(name, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToEpub
     * @param name The document name. (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToEpubCall(String name, String contentRecognitionMode, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/epub"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contentRecognitionMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentRecognitionMode", contentRecognitionMode));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToEpubValidateBeforeCall(String name, String contentRecognitionMode, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToEpub(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToEpubCall(name, contentRecognitionMode, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToEpub(String name, String contentRecognitionMode, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToEpubWithHttpInfo(name, contentRecognitionMode, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToEpubWithHttpInfo(name, contentRecognitionMode, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to EPUB format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToEpubWithHttpInfo(String name, String contentRecognitionMode, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToEpubValidateBeforeCall(name, contentRecognitionMode, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to EPUB format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToEpubAsync(String name, String contentRecognitionMode, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToEpubValidateBeforeCall(name, contentRecognitionMode, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToHtml
     * @param name The document name. (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToHtmlCall(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/html"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (additionalMarginWidthInPoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additionalMarginWidthInPoints", additionalMarginWidthInPoints));
        if (compressSvgGraphicsIfAny != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressSvgGraphicsIfAny", compressSvgGraphicsIfAny));
        if (convertMarkedContentToLayers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convertMarkedContentToLayers", convertMarkedContentToLayers));
        if (defaultFontName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultFontName", defaultFontName));
        if (documentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("documentType", documentType));
        if (fixedLayout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fixedLayout", fixedLayout));
        if (imageResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolution", imageResolution));
        if (minimalLineWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimalLineWidth", minimalLineWidth));
        if (preventGlyphsGrouping != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preventGlyphsGrouping", preventGlyphsGrouping));
        if (splitCssIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitCssIntoPages", splitCssIntoPages));
        if (splitIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitIntoPages", splitIntoPages));
        if (useZOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useZOrder", useZOrder));
        if (antialiasingProcessing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("antialiasingProcessing", antialiasingProcessing));
        if (cssClassNamesPrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cssClassNamesPrefix", cssClassNamesPrefix));
        if (explicitListOfSavedPages != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "explicitListOfSavedPages", explicitListOfSavedPages));
        if (fontEncodingStrategy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontEncodingStrategy", fontEncodingStrategy));
        if (fontSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSavingMode", fontSavingMode));
        if (htmlMarkupGenerationMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlMarkupGenerationMode", htmlMarkupGenerationMode));
        if (lettersPositioningMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lettersPositioningMethod", lettersPositioningMethod));
        if (pagesFlowTypeDependsOnViewersScreenSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesFlowTypeDependsOnViewersScreenSize", pagesFlowTypeDependsOnViewersScreenSize));
        if (partsEmbeddingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partsEmbeddingMode", partsEmbeddingMode));
        if (rasterImagesSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rasterImagesSavingMode", rasterImagesSavingMode));
        if (removeEmptyAreasOnTopAndBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeEmptyAreasOnTopAndBottom", removeEmptyAreasOnTopAndBottom));
        if (saveShadowedTextsAsTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveShadowedTextsAsTransparentTexts", saveShadowedTextsAsTransparentTexts));
        if (saveTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveTransparentTexts", saveTransparentTexts));
        if (specialFolderForAllImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForAllImages", specialFolderForAllImages));
        if (specialFolderForSvgImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForSvgImages", specialFolderForSvgImages));
        if (trySaveTextUnderliningAndStrikeoutingInCss != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trySaveTextUnderliningAndStrikeoutingInCss", trySaveTextUnderliningAndStrikeoutingInCss));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (flowLayoutParagraphFullWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flowLayoutParagraphFullWidth", flowLayoutParagraphFullWidth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToHtmlValidateBeforeCall(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToHtml(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToHtmlCall(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to Html format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToHtml(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToHtmlWithHttpInfo(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToHtmlWithHttpInfo(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to Html format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToHtmlWithHttpInfo(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToHtmlValidateBeforeCall(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to Html format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToHtmlAsync(String name, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToHtmlValidateBeforeCall(name, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToMobiXml
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToMobiXmlCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/mobixml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToMobiXmlValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToMobiXml(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToMobiXmlCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and returns resulting ZIP archive file in response content.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToMobiXml(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToMobiXmlWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToMobiXmlWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and returns resulting ZIP archive file in response content.
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToMobiXmlWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToMobiXmlValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and returns resulting ZIP archive file in response content. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToMobiXmlAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToMobiXmlValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToPdfA
     * @param name The document name. (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToPdfACall(String name, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/pdfa"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToPdfAValidateBeforeCall(String name, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToPdfA(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPdfInStorageToPdfA(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToPdfACall(name, type, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToPdfA(String name, String type, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToPdfAWithHttpInfo(name, type, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToPdfAWithHttpInfo(name, type, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to PdfA format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToPdfAWithHttpInfo(String name, String type, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToPdfAValidateBeforeCall(name, type, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to PdfA format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToPdfAAsync(String name, String type, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToPdfAValidateBeforeCall(name, type, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToPptx
     * @param name The document name. (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToPptxCall(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/pptx"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (separateImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separateImages", separateImages));
        if (slidesAsImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slidesAsImages", slidesAsImages));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToPptxValidateBeforeCall(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToPptx(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToPptxCall(name, separateImages, slidesAsImages, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToPptx(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToPptxWithHttpInfo(name, separateImages, slidesAsImages, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToPptxWithHttpInfo(name, separateImages, slidesAsImages, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to PPTX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToPptxWithHttpInfo(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToPptxValidateBeforeCall(name, separateImages, slidesAsImages, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to PPTX format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToPptxAsync(String name, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToPptxValidateBeforeCall(name, separateImages, slidesAsImages, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToSvg
     * @param name The document name. (required)
     * @param compressOutputToZipArchive Specifies whether output will be created as one zip-archive. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToSvgCall(String name, Boolean compressOutputToZipArchive, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/svg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (compressOutputToZipArchive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressOutputToZipArchive", compressOutputToZipArchive));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToSvgValidateBeforeCall(String name, Boolean compressOutputToZipArchive, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToSvg(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToSvgCall(name, compressOutputToZipArchive, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to SVG format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param compressOutputToZipArchive Specifies whether output will be created as one zip-archive. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToSvg(String name, Boolean compressOutputToZipArchive, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToSvgWithHttpInfo(name, compressOutputToZipArchive, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToSvgWithHttpInfo(name, compressOutputToZipArchive, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to SVG format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param compressOutputToZipArchive Specifies whether output will be created as one zip-archive. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToSvgWithHttpInfo(String name, Boolean compressOutputToZipArchive, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToSvgValidateBeforeCall(name, compressOutputToZipArchive, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to SVG format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param compressOutputToZipArchive Specifies whether output will be created as one zip-archive. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToSvgAsync(String name, Boolean compressOutputToZipArchive, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToSvgValidateBeforeCall(name, compressOutputToZipArchive, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToTeX
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToTeXCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/tex"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToTeXValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToTeX(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToTeXCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to TeX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToTeX(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToTeXWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToTeXWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to TeX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToTeXWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToTeXValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to TeX format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToTeXAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToTeXValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToTiff
     * @param name The document name. (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToTiffCall(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (brightness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("brightness", brightness));
        if (compression != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compression", compression));
        if (colorDepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("colorDepth", colorDepth));
        if (leftMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("leftMargin", leftMargin));
        if (rightMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rightMargin", rightMargin));
        if (topMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topMargin", topMargin));
        if (bottomMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bottomMargin", bottomMargin));
        if (orientation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orientation", orientation));
        if (skipBlankPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipBlankPages", skipBlankPages));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (xResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xResolution", xResolution));
        if (yResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yResolution", yResolution));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageCount", pageCount));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToTiffValidateBeforeCall(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToTiffCall(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToTiff(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToTiffWithHttpInfo(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToTiffWithHttpInfo(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to TIFF format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToTiffWithHttpInfo(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToTiffValidateBeforeCall(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to TIFF format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToTiffAsync(String name, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToTiffValidateBeforeCall(name, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToXls
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXlsCall(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xls"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToXlsValidateBeforeCall(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToXls(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToXlsCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XLS format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToXls(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToXlsWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToXlsWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XLS format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToXlsWithHttpInfo(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToXlsValidateBeforeCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XLS format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXlsAsync(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToXlsValidateBeforeCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToXlsx
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXlsxCall(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xlsx"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToXlsxValidateBeforeCall(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToXlsx(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToXlsxCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XLSX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToXlsx(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToXlsxWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToXlsxWithHttpInfo(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XLSX format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToXlsxWithHttpInfo(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToXlsxValidateBeforeCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XLSX format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXlsxAsync(String name, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToXlsxValidateBeforeCall(name, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToXml
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXmlCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToXmlValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToXmlCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XML format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToXml(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToXmlWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToXmlWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XML format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToXmlWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToXmlValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XML format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXmlAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToXmlValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPdfInStorageToXps
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXpsCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPdfInStorageToXpsValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPdfInStorageToXps(Async)");
        }
        

        com.squareup.okhttp.Call call = getPdfInStorageToXpsCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XPS format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPdfInStorageToXps(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPdfInStorageToXpsWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPdfInStorageToXpsWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XPS format and returns resulting file in response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPdfInStorageToXpsWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPdfInStorageToXpsValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XPS format and returns resulting file in response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPdfInStorageToXpsAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPdfInStorageToXpsValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPolyLineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPolyLineAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polyline/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPolyLineAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPolyLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getPolyLineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getPolyLineAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page polyline annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolyLineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolyLineAnnotationResponse getPolyLineAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolyLineAnnotationResponse> resp = getPolyLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PolyLineAnnotationResponse> resp = getPolyLineAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page polyline annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolyLineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolyLineAnnotationResponse> getPolyLineAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPolyLineAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page polyline annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPolyLineAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<PolyLineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPolyLineAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPolygonAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPolygonAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polygon/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPolygonAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPolygonAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getPolygonAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getPolygonAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page polygon annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolygonAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolygonAnnotationResponse getPolygonAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolygonAnnotationResponse> resp = getPolygonAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PolygonAnnotationResponse> resp = getPolygonAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page polygon annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolygonAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolygonAnnotationResponse> getPolygonAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPolygonAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolygonAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page polygon annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPolygonAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<PolygonAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPolygonAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolygonAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPopupAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPopupAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/popup/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPopupAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getPopupAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getPopupAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page popup annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationResponse getPopupAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationResponse> resp = getPopupAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PopupAnnotationResponse> resp = getPopupAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page popup annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationResponse> getPopupAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPopupAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page popup annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPopupAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<PopupAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPopupAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPsInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPsInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/ps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPsInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getPsInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getPsInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PS file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPsInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getPsInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getPsInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PS file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPsInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPsInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PS file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPsInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPsInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRadioButtonField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRadioButtonFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/radiobutton/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRadioButtonFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getRadioButtonField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getRadioButtonField(Async)");
        }
        

        com.squareup.okhttp.Call call = getRadioButtonFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document RadioButton field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RadioButtonFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RadioButtonFieldResponse getRadioButtonField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RadioButtonFieldResponse> resp = getRadioButtonFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<RadioButtonFieldResponse> resp = getRadioButtonFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document RadioButton field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RadioButtonFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RadioButtonFieldResponse> getRadioButtonFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getRadioButtonFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RadioButtonFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document RadioButton field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRadioButtonFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<RadioButtonFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRadioButtonFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RadioButtonFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRedactionAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRedactionAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/redaction/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRedactionAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getRedactionAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getRedactionAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getRedactionAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page redaction annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RedactionAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedactionAnnotationResponse getRedactionAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RedactionAnnotationResponse> resp = getRedactionAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<RedactionAnnotationResponse> resp = getRedactionAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page redaction annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RedactionAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedactionAnnotationResponse> getRedactionAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getRedactionAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RedactionAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page redaction annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRedactionAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<RedactionAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRedactionAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedactionAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/screen/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getScreenAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getScreenAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page screen annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ScreenAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenAnnotationResponse getScreenAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ScreenAnnotationResponse> resp = getScreenAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ScreenAnnotationResponse> resp = getScreenAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page screen annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ScreenAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenAnnotationResponse> getScreenAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getScreenAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ScreenAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page screen annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<ScreenAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenAnnotationData
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenAnnotationDataCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/screen/{annotationId}/data"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenAnnotationDataValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getScreenAnnotationData(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getScreenAnnotationData(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenAnnotationDataCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page screen annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getScreenAnnotationData(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getScreenAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getScreenAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page screen annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getScreenAnnotationDataWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getScreenAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page screen annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenAnnotationDataAsync(String name, String annotationId, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSignatureField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSignatureFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/signature/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSignatureFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSignatureField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getSignatureField(Async)");
        }
        

        com.squareup.okhttp.Call call = getSignatureFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document signature field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SignatureFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignatureFieldResponse getSignatureField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SignatureFieldResponse> resp = getSignatureFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SignatureFieldResponse> resp = getSignatureFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document signature field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SignatureFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignatureFieldResponse> getSignatureFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSignatureFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SignatureFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document signature field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSignatureFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<SignatureFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSignatureFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignatureFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSoundAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSoundAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSoundAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSoundAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getSoundAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getSoundAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page sound annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SoundAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoundAnnotationResponse getSoundAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SoundAnnotationResponse> resp = getSoundAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SoundAnnotationResponse> resp = getSoundAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page sound annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SoundAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoundAnnotationResponse> getSoundAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSoundAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SoundAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page sound annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSoundAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<SoundAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSoundAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoundAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSoundAnnotationData
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSoundAnnotationDataCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound/{annotationId}/data"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSoundAnnotationDataValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSoundAnnotationData(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getSoundAnnotationData(Async)");
        }
        

        com.squareup.okhttp.Call call = getSoundAnnotationDataCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page sound annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getSoundAnnotationData(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getSoundAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getSoundAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page sound annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getSoundAnnotationDataWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSoundAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page sound annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSoundAnnotationDataAsync(String name, String annotationId, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSoundAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSquareAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSquareAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/square/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSquareAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSquareAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getSquareAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getSquareAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page square annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquareAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquareAnnotationResponse getSquareAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquareAnnotationResponse> resp = getSquareAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SquareAnnotationResponse> resp = getSquareAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page square annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquareAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquareAnnotationResponse> getSquareAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSquareAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquareAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page square annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSquareAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<SquareAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSquareAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquareAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSquigglyAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSquigglyAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/squiggly/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSquigglyAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSquigglyAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getSquigglyAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getSquigglyAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page squiggly annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquigglyAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquigglyAnnotationResponse getSquigglyAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquigglyAnnotationResponse> resp = getSquigglyAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SquigglyAnnotationResponse> resp = getSquigglyAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page squiggly annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquigglyAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquigglyAnnotationResponse> getSquigglyAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getSquigglyAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page squiggly annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSquigglyAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<SquigglyAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSquigglyAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStampAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStampAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/stamp/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStampAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStampAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getStampAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getStampAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page stamp annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StampAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StampAnnotationResponse getStampAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StampAnnotationResponse> resp = getStampAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StampAnnotationResponse> resp = getStampAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page stamp annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StampAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StampAnnotationResponse> getStampAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getStampAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StampAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page stamp annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStampAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<StampAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStampAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StampAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStampAnnotationData
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStampAnnotationDataCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/stamp/{annotationId}/data"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStampAnnotationDataValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStampAnnotationData(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getStampAnnotationData(Async)");
        }
        

        com.squareup.okhttp.Call call = getStampAnnotationDataCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page stamp annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getStampAnnotationData(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<File> resp = getStampAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getStampAnnotationDataWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page stamp annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getStampAnnotationDataWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getStampAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page stamp annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStampAnnotationDataAsync(String name, String annotationId, String storage, String folder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStampAnnotationDataValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStrikeOutAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStrikeOutAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/strikeout/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStrikeOutAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStrikeOutAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getStrikeOutAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getStrikeOutAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page StrikeOut annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StrikeOutAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrikeOutAnnotationResponse getStrikeOutAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StrikeOutAnnotationResponse> resp = getStrikeOutAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StrikeOutAnnotationResponse> resp = getStrikeOutAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page StrikeOut annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StrikeOutAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrikeOutAnnotationResponse> getStrikeOutAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getStrikeOutAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page StrikeOut annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStrikeOutAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<StrikeOutAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStrikeOutAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSvgInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSvgInStorageToPdfCall(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/svg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (adjustPageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("adjustPageSize", adjustPageSize));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSvgInStorageToPdfValidateBeforeCall(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getSvgInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getSvgInStorageToPdfCall(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert SVG file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getSvgInStorageToPdf(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getSvgInStorageToPdfWithHttpInfo(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getSvgInStorageToPdfWithHttpInfo(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert SVG file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getSvgInStorageToPdfWithHttpInfo(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSvgInStorageToPdfValidateBeforeCall(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert SVG file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSvgInStorageToPdfAsync(String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSvgInStorageToPdfValidateBeforeCall(srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTable
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCall(String name, String tableId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/tables/{tableId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapePathSegmentString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableValidateBeforeCall(String name, String tableId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTable(Async)");
        }
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getTable(Async)");
        }
        

        com.squareup.okhttp.Call call = getTableCall(name, tableId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page table by ID.
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TableRecognizedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TableRecognizedResponse getTable(String name, String tableId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TableRecognizedResponse> resp = getTableWithHttpInfo(name, tableId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TableRecognizedResponse> resp = getTableWithHttpInfo(name, tableId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page table by ID.
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TableRecognizedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TableRecognizedResponse> getTableWithHttpInfo(String name, String tableId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getTableValidateBeforeCall(name, tableId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TableRecognizedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page table by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableAsync(String name, String tableId, String storage, String folder, final ApiCallback<TableRecognizedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableValidateBeforeCall(name, tableId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TableRecognizedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTeXInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTeXInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/tex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTeXInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getTeXInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getTeXInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert TeX file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getTeXInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getTeXInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getTeXInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert TeX file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getTeXInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getTeXInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert TeX file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTeXInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTeXInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getText
     * @param name The document name. (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTextCall(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "format", format));
        if (regex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("regex", regex));
        if (splitRects != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitRects", splitRects));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (LLX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LLX", LLX));
        if (LLY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LLY", LLY));
        if (URX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("URX", URX));
        if (URY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("URY", URY));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTextValidateBeforeCall(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getText(Async)");
        }
        
        // verify the required parameter 'LLX' is set
        if (LLX == null) {
            throw new ApiException("Missing the required parameter 'LLX' when calling getText(Async)");
        }
        
        // verify the required parameter 'LLY' is set
        if (LLY == null) {
            throw new ApiException("Missing the required parameter 'LLY' when calling getText(Async)");
        }
        
        // verify the required parameter 'URX' is set
        if (URX == null) {
            throw new ApiException("Missing the required parameter 'URX' when calling getText(Async)");
        }
        
        // verify the required parameter 'URY' is set
        if (URY == null) {
            throw new ApiException("Missing the required parameter 'URY' when calling getText(Async)");
        }
        

        com.squareup.okhttp.Call call = getTextCall(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document text.
     * 
     * @param name The document name. (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return TextRectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextRectsResponse getText(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<TextRectsResponse> resp = getTextWithHttpInfo(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextRectsResponse> resp = getTextWithHttpInfo(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document text.
     * 
     * @param name The document name. (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;TextRectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextRectsResponse> getTextWithHttpInfo(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getTextValidateBeforeCall(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<TextRectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document text. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param LLX X-coordinate of lower - left corner. (required)
     * @param LLY Y - coordinate of lower-left corner. (required)
     * @param URX X - coordinate of upper-right corner. (required)
     * @param URY Y - coordinate of upper-right corner. (required)
     * @param format List of formats for search. (optional)
     * @param regex Formats are specified as a regular expression. (optional)
     * @param splitRects Split result fragments (default is true). (optional, default to true)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTextAsync(String name, Double LLX, Double LLY, Double URX, Double URY, List<String> format, String regex, Boolean splitRects, String folder, String storage, final ApiCallback<TextRectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTextValidateBeforeCall(name, LLX, LLY, URX, URY, format, regex, splitRects, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextRectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTextAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTextAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/text/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTextAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getTextAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getTextAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page text annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextAnnotationResponse getTextAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextAnnotationResponse> resp = getTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextAnnotationResponse> resp = getTextAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page text annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextAnnotationResponse> getTextAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getTextAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page text annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTextAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<TextAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTextAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTextBoxField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTextBoxFieldCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/textbox/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTextBoxFieldValidateBeforeCall(String name, String fieldName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTextBoxField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling getTextBoxField(Async)");
        }
        

        com.squareup.okhttp.Call call = getTextBoxFieldCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document text box field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextBoxFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextBoxFieldResponse getTextBoxField(String name, String fieldName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextBoxFieldResponse> resp = getTextBoxFieldWithHttpInfo(name, fieldName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextBoxFieldResponse> resp = getTextBoxFieldWithHttpInfo(name, fieldName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document text box field by name.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextBoxFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextBoxFieldResponse> getTextBoxFieldWithHttpInfo(String name, String fieldName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getTextBoxFieldValidateBeforeCall(name, fieldName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextBoxFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document text box field by name. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTextBoxFieldAsync(String name, String fieldName, String storage, String folder, final ApiCallback<TextBoxFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTextBoxFieldValidateBeforeCall(name, fieldName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextBoxFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUnderlineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUnderlineAnnotationCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/underline/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUnderlineAnnotationValidateBeforeCall(String name, String annotationId, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getUnderlineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling getUnderlineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = getUnderlineAnnotationCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read document page underline annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return UnderlineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnderlineAnnotationResponse getUnderlineAnnotation(String name, String annotationId, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<UnderlineAnnotationResponse> resp = getUnderlineAnnotationWithHttpInfo(name, annotationId, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<UnderlineAnnotationResponse> resp = getUnderlineAnnotationWithHttpInfo(name, annotationId, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Read document page underline annotation by ID.
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;UnderlineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnderlineAnnotationResponse> getUnderlineAnnotationWithHttpInfo(String name, String annotationId, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getUnderlineAnnotationValidateBeforeCall(name, annotationId, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read document page underline annotation by ID. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUnderlineAnnotationAsync(String name, String annotationId, String storage, String folder, final ApiCallback<UnderlineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUnderlineAnnotationValidateBeforeCall(name, annotationId, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVerifySignature
     * @param name The document name. (required)
     * @param signName Sign name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVerifySignatureCall(String name, String signName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/verifySignature"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (signName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signName", signName));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVerifySignatureValidateBeforeCall(String name, String signName, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getVerifySignature(Async)");
        }
        
        // verify the required parameter 'signName' is set
        if (signName == null) {
            throw new ApiException("Missing the required parameter 'signName' when calling getVerifySignature(Async)");
        }
        

        com.squareup.okhttp.Call call = getVerifySignatureCall(name, signName, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Verify signature document.
     * 
     * @param name The document name. (required)
     * @param signName Sign name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SignatureVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignatureVerifyResponse getVerifySignature(String name, String signName, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SignatureVerifyResponse> resp = getVerifySignatureWithHttpInfo(name, signName, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SignatureVerifyResponse> resp = getVerifySignatureWithHttpInfo(name, signName, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Verify signature document.
     * 
     * @param name The document name. (required)
     * @param signName Sign name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SignatureVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignatureVerifyResponse> getVerifySignatureWithHttpInfo(String name, String signName, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getVerifySignatureValidateBeforeCall(name, signName, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SignatureVerifyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify signature document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param signName Sign name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVerifySignatureAsync(String name, String signName, String storage, String folder, final ApiCallback<SignatureVerifyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVerifySignatureValidateBeforeCall(name, signName, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignatureVerifyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebInStorageToPdf
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebInStorageToPdfCall(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/web";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebInStorageToPdfValidateBeforeCall(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getWebInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getWebInStorageToPdfCall(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert web page to PDF format and return resulting file in response. 
     * 
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getWebInStorageToPdf(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getWebInStorageToPdfWithHttpInfo(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getWebInStorageToPdfWithHttpInfo(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert web page to PDF format and return resulting file in response. 
     * 
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getWebInStorageToPdfWithHttpInfo(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getWebInStorageToPdfValidateBeforeCall(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert web page to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebInStorageToPdfAsync(String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebInStorageToPdfValidateBeforeCall(url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWordsPerPage
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWordsPerPageCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/wordCount"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWordsPerPageValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getWordsPerPage(Async)");
        }
        

        com.squareup.okhttp.Call call = getWordsPerPageCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get number of words per document page.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return WordCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WordCountResponse getWordsPerPage(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<WordCountResponse> resp = getWordsPerPageWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<WordCountResponse> resp = getWordsPerPageWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get number of words per document page.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;WordCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WordCountResponse> getWordsPerPageWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getWordsPerPageValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<WordCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get number of words per document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWordsPerPageAsync(String name, String storage, String folder, final ApiCallback<WordCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWordsPerPageValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WordCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getXfaPdfInStorageToAcroForm
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getXfaPdfInStorageToAcroFormCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xfatoacroform"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getXfaPdfInStorageToAcroFormValidateBeforeCall(String name, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getXfaPdfInStorageToAcroForm(Async)");
        }
        

        com.squareup.okhttp.Call call = getXfaPdfInStorageToAcroFormCall(name, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document which contains XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getXfaPdfInStorageToAcroForm(String name, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getXfaPdfInStorageToAcroFormWithHttpInfo(name, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getXfaPdfInStorageToAcroFormWithHttpInfo(name, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document which contains XFA form (located on storage) to PDF with AcroForm and returns resulting file response content
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getXfaPdfInStorageToAcroFormWithHttpInfo(String name, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getXfaPdfInStorageToAcroFormValidateBeforeCall(name, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document which contains XFA form (located on storage) to PDF with AcroForm and returns resulting file response content (asynchronously)
     * 
     * @param name The document name. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getXfaPdfInStorageToAcroFormAsync(String name, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getXfaPdfInStorageToAcroFormValidateBeforeCall(name, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getXmlInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getXmlInStorageToPdfCall(String srcPath, String xslFilePath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (xslFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xslFilePath", xslFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getXmlInStorageToPdfValidateBeforeCall(String srcPath, String xslFilePath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getXmlInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getXmlInStorageToPdfCall(srcPath, xslFilePath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getXmlInStorageToPdf(String srcPath, String xslFilePath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getXmlInStorageToPdfWithHttpInfo(srcPath, xslFilePath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getXmlInStorageToPdfWithHttpInfo(srcPath, xslFilePath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XML file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getXmlInStorageToPdfWithHttpInfo(String srcPath, String xslFilePath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getXmlInStorageToPdfValidateBeforeCall(srcPath, xslFilePath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XML file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getXmlInStorageToPdfAsync(String srcPath, String xslFilePath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getXmlInStorageToPdfValidateBeforeCall(srcPath, xslFilePath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getXpsInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getXpsInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/xps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getXpsInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getXpsInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getXpsInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XPS file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getXpsInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getXpsInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getXpsInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XPS file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getXpsInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getXpsInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XPS file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getXpsInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getXpsInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getXslFoInStorageToPdf
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xslfo) (required)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getXslFoInStorageToPdfCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/create/xslfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getXslFoInStorageToPdfValidateBeforeCall(String srcPath, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling getXslFoInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = getXslFoInStorageToPdfCall(srcPath, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xslfo) (required)
     * @param storage The document storage. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getXslFoInStorageToPdf(String srcPath, String storage) throws ApiException {
        try
        {
            ApiResponse<File> resp = getXslFoInStorageToPdfWithHttpInfo(srcPath, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<File> resp = getXslFoInStorageToPdfWithHttpInfo(srcPath, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XslFo file (located on storage) to PDF format and return resulting file in response. 
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xslfo) (required)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getXslFoInStorageToPdfWithHttpInfo(String srcPath, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getXslFoInStorageToPdfValidateBeforeCall(srcPath, storage, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XslFo file (located on storage) to PDF format and return resulting file in response.  (asynchronously)
     * 
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xslfo) (required)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getXslFoInStorageToPdfAsync(String srcPath, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getXslFoInStorageToPdfValidateBeforeCall(srcPath, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for moveFile
     * @param srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to move (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFileCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/file/move/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.escapePathSegmentString(srcPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (destPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destPath", destPath));
        if (srcStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcStorageName", srcStorageName));
        if (destStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destStorageName", destStorageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveFileValidateBeforeCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling moveFile(Async)");
        }
        
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling moveFile(Async)");
        }
        

        com.squareup.okhttp.Call call = moveFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Move file
     * 
     * @param srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to move (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveFile(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        try
        {
            moveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                moveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
            }
            throw ex;
        }
    }

    /**
     * Move file
     * 
     * @param srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to move (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveFileWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = moveFileValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move file (asynchronously)
     * 
     * @param srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param versionId File version ID to move (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveFileAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFileValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for moveFolder
     * @param srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFolderCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/folder/move/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.escapePathSegmentString(srcPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (destPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destPath", destPath));
        if (srcStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcStorageName", srcStorageName));
        if (destStorageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destStorageName", destStorageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveFolderValidateBeforeCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling moveFolder(Async)");
        }
        
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling moveFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = moveFolderCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Move folder
     * 
     * @param srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveFolder(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        try
        {
            moveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                moveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
            }
            throw ex;
        }
    }

    /**
     * Move folder
     * 
     * @param srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveFolderWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        com.squareup.okhttp.Call call = moveFolderValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move folder (asynchronously)
     * 
     * @param srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param srcStorageName Source storage name (optional)
     * @param destStorageName Destination storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveFolderAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFolderValidateBeforeCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for objectExists
     * @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call objectExistsCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/exist/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapePathSegmentString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));
        if (versionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionId", versionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call objectExistsValidateBeforeCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling objectExists(Async)");
        }
        

        com.squareup.okhttp.Call call = objectExistsCall(path, storageName, versionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check if file or folder exists
     * 
     * @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID (optional)
     * @return ObjectExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectExist objectExists(String path, String storageName, String versionId) throws ApiException {
        try
        {
            ApiResponse<ObjectExist> resp = objectExistsWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ObjectExist> resp = objectExistsWithHttpInfo(path, storageName, versionId);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Check if file or folder exists
     * 
     * @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID (optional)
     * @return ApiResponse&lt;ObjectExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectExist> objectExistsWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = objectExistsValidateBeforeCall(path, storageName, versionId, null, null);
        Type localVarReturnType = new TypeToken<ObjectExist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if file or folder exists (asynchronously)
     * 
     * @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param storageName Storage name (optional)
     * @param versionId File version ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call objectExistsAsync(String path, String storageName, String versionId, final ApiCallback<ObjectExist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = objectExistsValidateBeforeCall(path, storageName, versionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectExist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAppendDocument
     * @param name The original document name. (required)
     * @param appendFile Append file server path. (required)
     * @param startPage Appending start page. (optional, default to 0)
     * @param endPage Appending end page. (optional, default to 0)
     * @param storage The documents storage. (optional)
     * @param folder The original document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAppendDocumentCall(String name, String appendFile, Integer startPage, Integer endPage, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/appendDocument"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appendFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appendFile", appendFile));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startPage", startPage));
        if (endPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endPage", endPage));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAppendDocumentValidateBeforeCall(String name, String appendFile, Integer startPage, Integer endPage, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAppendDocument(Async)");
        }
        
        // verify the required parameter 'appendFile' is set
        if (appendFile == null) {
            throw new ApiException("Missing the required parameter 'appendFile' when calling postAppendDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postAppendDocumentCall(name, appendFile, startPage, endPage, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Append document to existing one.
     * 
     * @param name The original document name. (required)
     * @param appendFile Append file server path. (required)
     * @param startPage Appending start page. (optional, default to 0)
     * @param endPage Appending end page. (optional, default to 0)
     * @param storage The documents storage. (optional)
     * @param folder The original document folder. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse postAppendDocument(String name, String appendFile, Integer startPage, Integer endPage, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentResponse> resp = postAppendDocumentWithHttpInfo(name, appendFile, startPage, endPage, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentResponse> resp = postAppendDocumentWithHttpInfo(name, appendFile, startPage, endPage, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Append document to existing one.
     * 
     * @param name The original document name. (required)
     * @param appendFile Append file server path. (required)
     * @param startPage Appending start page. (optional, default to 0)
     * @param endPage Appending end page. (optional, default to 0)
     * @param storage The documents storage. (optional)
     * @param folder The original document folder. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> postAppendDocumentWithHttpInfo(String name, String appendFile, Integer startPage, Integer endPage, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postAppendDocumentValidateBeforeCall(name, appendFile, startPage, endPage, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Append document to existing one. (asynchronously)
     * 
     * @param name The original document name. (required)
     * @param appendFile Append file server path. (required)
     * @param startPage Appending start page. (optional, default to 0)
     * @param endPage Appending end page. (optional, default to 0)
     * @param storage The documents storage. (optional)
     * @param folder The original document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAppendDocumentAsync(String name, String appendFile, Integer startPage, Integer endPage, String storage, String folder, final ApiCallback<DocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAppendDocumentValidateBeforeCall(name, appendFile, startPage, endPage, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postBookmark
     * @param name The document name. (required)
     * @param bookmarkPath The parent bookmark path. Specify an empty string when adding a bookmark to the root. (required)
     * @param bookmarks The array of bookmark. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postBookmarkCall(String name, String bookmarkPath, List<Bookmark> bookmarks, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bookmarks;

        // create path and map variables
        String localVarPath = "/pdf/{name}/bookmarks/bookmark/{bookmarkPath}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "bookmarkPath" + "\\}", apiClient.escapePathSegmentString(bookmarkPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBookmarkValidateBeforeCall(String name, String bookmarkPath, List<Bookmark> bookmarks, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postBookmark(Async)");
        }
        
        // verify the required parameter 'bookmarkPath' is set
        if (bookmarkPath == null) {
            throw new ApiException("Missing the required parameter 'bookmarkPath' when calling postBookmark(Async)");
        }
        
        // verify the required parameter 'bookmarks' is set
        if (bookmarks == null) {
            throw new ApiException("Missing the required parameter 'bookmarks' when calling postBookmark(Async)");
        }
        

        com.squareup.okhttp.Call call = postBookmarkCall(name, bookmarkPath, bookmarks, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document bookmarks.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The parent bookmark path. Specify an empty string when adding a bookmark to the root. (required)
     * @param bookmarks The array of bookmark. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return BookmarksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BookmarksResponse postBookmark(String name, String bookmarkPath, List<Bookmark> bookmarks, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<BookmarksResponse> resp = postBookmarkWithHttpInfo(name, bookmarkPath, bookmarks, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<BookmarksResponse> resp = postBookmarkWithHttpInfo(name, bookmarkPath, bookmarks, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document bookmarks.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The parent bookmark path. Specify an empty string when adding a bookmark to the root. (required)
     * @param bookmarks The array of bookmark. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;BookmarksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BookmarksResponse> postBookmarkWithHttpInfo(String name, String bookmarkPath, List<Bookmark> bookmarks, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = postBookmarkValidateBeforeCall(name, bookmarkPath, bookmarks, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<BookmarksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document bookmarks. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The parent bookmark path. Specify an empty string when adding a bookmark to the root. (required)
     * @param bookmarks The array of bookmark. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBookmarkAsync(String name, String bookmarkPath, List<Bookmark> bookmarks, String folder, String storage, final ApiCallback<BookmarksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBookmarkValidateBeforeCall(name, bookmarkPath, bookmarks, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BookmarksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postChangePasswordDocumentInStorage
     * @param name Document name. (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param newUserPassword New user password (encrypted Base64). (required)
     * @param newOwnerPassword New owner password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postChangePasswordDocumentInStorageCall(String name, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/changepassword"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ownerPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ownerPassword", ownerPassword));
        if (newUserPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newUserPassword", newUserPassword));
        if (newOwnerPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newOwnerPassword", newOwnerPassword));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postChangePasswordDocumentInStorageValidateBeforeCall(String name, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postChangePasswordDocumentInStorage(Async)");
        }
        
        // verify the required parameter 'ownerPassword' is set
        if (ownerPassword == null) {
            throw new ApiException("Missing the required parameter 'ownerPassword' when calling postChangePasswordDocumentInStorage(Async)");
        }
        
        // verify the required parameter 'newUserPassword' is set
        if (newUserPassword == null) {
            throw new ApiException("Missing the required parameter 'newUserPassword' when calling postChangePasswordDocumentInStorage(Async)");
        }
        
        // verify the required parameter 'newOwnerPassword' is set
        if (newOwnerPassword == null) {
            throw new ApiException("Missing the required parameter 'newOwnerPassword' when calling postChangePasswordDocumentInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = postChangePasswordDocumentInStorageCall(name, ownerPassword, newUserPassword, newOwnerPassword, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change document password in storage.
     * 
     * @param name Document name. (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param newUserPassword New user password (encrypted Base64). (required)
     * @param newOwnerPassword New owner password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postChangePasswordDocumentInStorage(String name, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postChangePasswordDocumentInStorageWithHttpInfo(name, ownerPassword, newUserPassword, newOwnerPassword, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postChangePasswordDocumentInStorageWithHttpInfo(name, ownerPassword, newUserPassword, newOwnerPassword, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Change document password in storage.
     * 
     * @param name Document name. (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param newUserPassword New user password (encrypted Base64). (required)
     * @param newOwnerPassword New owner password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postChangePasswordDocumentInStorageWithHttpInfo(String name, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postChangePasswordDocumentInStorageValidateBeforeCall(name, ownerPassword, newUserPassword, newOwnerPassword, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change document password in storage. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param newUserPassword New user password (encrypted Base64). (required)
     * @param newOwnerPassword New owner password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postChangePasswordDocumentInStorageAsync(String name, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postChangePasswordDocumentInStorageValidateBeforeCall(name, ownerPassword, newUserPassword, newOwnerPassword, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCheckBoxFields
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCheckBoxFieldsCall(String name, List<CheckBoxField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fields;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/checkbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCheckBoxFieldsValidateBeforeCall(String name, List<CheckBoxField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postCheckBoxFields(Async)");
        }
        
        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling postCheckBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = postCheckBoxFieldsCall(name, fields, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document checkbox fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postCheckBoxFields(String name, List<CheckBoxField> fields, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postCheckBoxFieldsWithHttpInfo(name, fields, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postCheckBoxFieldsWithHttpInfo(name, fields, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document checkbox fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postCheckBoxFieldsWithHttpInfo(String name, List<CheckBoxField> fields, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postCheckBoxFieldsValidateBeforeCall(name, fields, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document checkbox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCheckBoxFieldsAsync(String name, List<CheckBoxField> fields, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCheckBoxFieldsValidateBeforeCall(name, fields, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postComboBoxFields
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postComboBoxFieldsCall(String name, List<ComboBoxField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fields;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/combobox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postComboBoxFieldsValidateBeforeCall(String name, List<ComboBoxField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postComboBoxFields(Async)");
        }
        
        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling postComboBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = postComboBoxFieldsCall(name, fields, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document combobox fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postComboBoxFields(String name, List<ComboBoxField> fields, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postComboBoxFieldsWithHttpInfo(name, fields, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postComboBoxFieldsWithHttpInfo(name, fields, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document combobox fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postComboBoxFieldsWithHttpInfo(String name, List<ComboBoxField> fields, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postComboBoxFieldsValidateBeforeCall(name, fields, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document combobox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postComboBoxFieldsAsync(String name, List<ComboBoxField> fields, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postComboBoxFieldsValidateBeforeCall(name, fields, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCreateDocument
     * @param name The new document name. (required)
     * @param documentConfig The document config for new document. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCreateDocumentCall(String name, DocumentConfig documentConfig, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documentConfig;

        // create path and map variables
        String localVarPath = "/pdf/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCreateDocumentValidateBeforeCall(String name, DocumentConfig documentConfig, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postCreateDocument(Async)");
        }
        
        // verify the required parameter 'documentConfig' is set
        if (documentConfig == null) {
            throw new ApiException("Missing the required parameter 'documentConfig' when calling postCreateDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postCreateDocumentCall(name, documentConfig, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create empty document.
     * 
     * @param name The new document name. (required)
     * @param documentConfig The document config for new document. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse postCreateDocument(String name, DocumentConfig documentConfig, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentResponse> resp = postCreateDocumentWithHttpInfo(name, documentConfig, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentResponse> resp = postCreateDocumentWithHttpInfo(name, documentConfig, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Create empty document.
     * 
     * @param name The new document name. (required)
     * @param documentConfig The document config for new document. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> postCreateDocumentWithHttpInfo(String name, DocumentConfig documentConfig, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postCreateDocumentValidateBeforeCall(name, documentConfig, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create empty document. (asynchronously)
     * 
     * @param name The new document name. (required)
     * @param documentConfig The document config for new document. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCreateDocumentAsync(String name, DocumentConfig documentConfig, String storage, String folder, final ApiCallback<DocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCreateDocumentValidateBeforeCall(name, documentConfig, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCreateField
     * @param name The document name. (required)
     * @param page Document page number. (required)
     * @param field Field with the field data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCreateFieldCall(String name, Integer page, Field field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCreateFieldValidateBeforeCall(String name, Integer page, Field field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postCreateField(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling postCreateField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling postCreateField(Async)");
        }
        

        com.squareup.okhttp.Call call = postCreateFieldCall(name, page, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create field.
     * 
     * @param name The document name. (required)
     * @param page Document page number. (required)
     * @param field Field with the field data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postCreateField(String name, Integer page, Field field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postCreateFieldWithHttpInfo(name, page, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postCreateFieldWithHttpInfo(name, page, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Create field.
     * 
     * @param name The document name. (required)
     * @param page Document page number. (required)
     * @param field Field with the field data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postCreateFieldWithHttpInfo(String name, Integer page, Field field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postCreateFieldValidateBeforeCall(name, page, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create field. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param page Document page number. (required)
     * @param field Field with the field data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCreateFieldAsync(String name, Integer page, Field field, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCreateFieldValidateBeforeCall(name, page, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDecryptDocumentInStorage
     * @param name Document name. (required)
     * @param password The password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDecryptDocumentInStorageCall(String name, String password, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/decrypt"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDecryptDocumentInStorageValidateBeforeCall(String name, String password, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postDecryptDocumentInStorage(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling postDecryptDocumentInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = postDecryptDocumentInStorageCall(name, password, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Decrypt document in storage.
     * 
     * @param name Document name. (required)
     * @param password The password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postDecryptDocumentInStorage(String name, String password, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postDecryptDocumentInStorageWithHttpInfo(name, password, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postDecryptDocumentInStorageWithHttpInfo(name, password, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Decrypt document in storage.
     * 
     * @param name Document name. (required)
     * @param password The password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postDecryptDocumentInStorageWithHttpInfo(String name, String password, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postDecryptDocumentInStorageValidateBeforeCall(name, password, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decrypt document in storage. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password The password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDecryptDocumentInStorageAsync(String name, String password, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDecryptDocumentInStorageValidateBeforeCall(name, password, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDocumentImageFooter
     * @param name The document name. (required)
     * @param imageFooter The image footer. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDocumentImageFooterCall(String name, ImageFooter imageFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = imageFooter;

        // create path and map variables
        String localVarPath = "/pdf/{name}/footer/image"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startPageNumber", startPageNumber));
        if (endPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endPageNumber", endPageNumber));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDocumentImageFooterValidateBeforeCall(String name, ImageFooter imageFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postDocumentImageFooter(Async)");
        }
        
        // verify the required parameter 'imageFooter' is set
        if (imageFooter == null) {
            throw new ApiException("Missing the required parameter 'imageFooter' when calling postDocumentImageFooter(Async)");
        }
        

        com.squareup.okhttp.Call call = postDocumentImageFooterCall(name, imageFooter, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document image footer.
     * 
     * @param name The document name. (required)
     * @param imageFooter The image footer. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postDocumentImageFooter(String name, ImageFooter imageFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postDocumentImageFooterWithHttpInfo(name, imageFooter, startPageNumber, endPageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postDocumentImageFooterWithHttpInfo(name, imageFooter, startPageNumber, endPageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document image footer.
     * 
     * @param name The document name. (required)
     * @param imageFooter The image footer. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postDocumentImageFooterWithHttpInfo(String name, ImageFooter imageFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postDocumentImageFooterValidateBeforeCall(name, imageFooter, startPageNumber, endPageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document image footer. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageFooter The image footer. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDocumentImageFooterAsync(String name, ImageFooter imageFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDocumentImageFooterValidateBeforeCall(name, imageFooter, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDocumentImageHeader
     * @param name The document name. (required)
     * @param imageHeader The image header. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDocumentImageHeaderCall(String name, ImageHeader imageHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = imageHeader;

        // create path and map variables
        String localVarPath = "/pdf/{name}/header/image"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startPageNumber", startPageNumber));
        if (endPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endPageNumber", endPageNumber));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDocumentImageHeaderValidateBeforeCall(String name, ImageHeader imageHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postDocumentImageHeader(Async)");
        }
        
        // verify the required parameter 'imageHeader' is set
        if (imageHeader == null) {
            throw new ApiException("Missing the required parameter 'imageHeader' when calling postDocumentImageHeader(Async)");
        }
        

        com.squareup.okhttp.Call call = postDocumentImageHeaderCall(name, imageHeader, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document image header.
     * 
     * @param name The document name. (required)
     * @param imageHeader The image header. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postDocumentImageHeader(String name, ImageHeader imageHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postDocumentImageHeaderWithHttpInfo(name, imageHeader, startPageNumber, endPageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postDocumentImageHeaderWithHttpInfo(name, imageHeader, startPageNumber, endPageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document image header.
     * 
     * @param name The document name. (required)
     * @param imageHeader The image header. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postDocumentImageHeaderWithHttpInfo(String name, ImageHeader imageHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postDocumentImageHeaderValidateBeforeCall(name, imageHeader, startPageNumber, endPageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document image header. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageHeader The image header. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDocumentImageHeaderAsync(String name, ImageHeader imageHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDocumentImageHeaderValidateBeforeCall(name, imageHeader, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDocumentPageNumberStamps
     * @param name The document name. (required)
     * @param stamp The stamp. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDocumentPageNumberStampsCall(String name, PageNumberStamp stamp, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = stamp;

        // create path and map variables
        String localVarPath = "/pdf/{name}/stamps/pagenumber"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startPageNumber", startPageNumber));
        if (endPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endPageNumber", endPageNumber));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDocumentPageNumberStampsValidateBeforeCall(String name, PageNumberStamp stamp, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postDocumentPageNumberStamps(Async)");
        }
        
        // verify the required parameter 'stamp' is set
        if (stamp == null) {
            throw new ApiException("Missing the required parameter 'stamp' when calling postDocumentPageNumberStamps(Async)");
        }
        

        com.squareup.okhttp.Call call = postDocumentPageNumberStampsCall(name, stamp, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page number stamps.
     * 
     * @param name The document name. (required)
     * @param stamp The stamp. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postDocumentPageNumberStamps(String name, PageNumberStamp stamp, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postDocumentPageNumberStampsWithHttpInfo(name, stamp, startPageNumber, endPageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postDocumentPageNumberStampsWithHttpInfo(name, stamp, startPageNumber, endPageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page number stamps.
     * 
     * @param name The document name. (required)
     * @param stamp The stamp. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postDocumentPageNumberStampsWithHttpInfo(String name, PageNumberStamp stamp, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postDocumentPageNumberStampsValidateBeforeCall(name, stamp, startPageNumber, endPageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page number stamps. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param stamp The stamp. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDocumentPageNumberStampsAsync(String name, PageNumberStamp stamp, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDocumentPageNumberStampsValidateBeforeCall(name, stamp, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDocumentTextFooter
     * @param name The document name. (required)
     * @param textFooter The text footer. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDocumentTextFooterCall(String name, TextFooter textFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = textFooter;

        // create path and map variables
        String localVarPath = "/pdf/{name}/footer/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startPageNumber", startPageNumber));
        if (endPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endPageNumber", endPageNumber));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDocumentTextFooterValidateBeforeCall(String name, TextFooter textFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postDocumentTextFooter(Async)");
        }
        
        // verify the required parameter 'textFooter' is set
        if (textFooter == null) {
            throw new ApiException("Missing the required parameter 'textFooter' when calling postDocumentTextFooter(Async)");
        }
        

        com.squareup.okhttp.Call call = postDocumentTextFooterCall(name, textFooter, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document text footer.
     * 
     * @param name The document name. (required)
     * @param textFooter The text footer. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postDocumentTextFooter(String name, TextFooter textFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postDocumentTextFooterWithHttpInfo(name, textFooter, startPageNumber, endPageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postDocumentTextFooterWithHttpInfo(name, textFooter, startPageNumber, endPageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document text footer.
     * 
     * @param name The document name. (required)
     * @param textFooter The text footer. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postDocumentTextFooterWithHttpInfo(String name, TextFooter textFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postDocumentTextFooterValidateBeforeCall(name, textFooter, startPageNumber, endPageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document text footer. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param textFooter The text footer. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDocumentTextFooterAsync(String name, TextFooter textFooter, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDocumentTextFooterValidateBeforeCall(name, textFooter, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDocumentTextHeader
     * @param name The document name. (required)
     * @param textHeader The text header. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDocumentTextHeaderCall(String name, TextHeader textHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = textHeader;

        // create path and map variables
        String localVarPath = "/pdf/{name}/header/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startPageNumber", startPageNumber));
        if (endPageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endPageNumber", endPageNumber));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDocumentTextHeaderValidateBeforeCall(String name, TextHeader textHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postDocumentTextHeader(Async)");
        }
        
        // verify the required parameter 'textHeader' is set
        if (textHeader == null) {
            throw new ApiException("Missing the required parameter 'textHeader' when calling postDocumentTextHeader(Async)");
        }
        

        com.squareup.okhttp.Call call = postDocumentTextHeaderCall(name, textHeader, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document text header.
     * 
     * @param name The document name. (required)
     * @param textHeader The text header. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postDocumentTextHeader(String name, TextHeader textHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postDocumentTextHeaderWithHttpInfo(name, textHeader, startPageNumber, endPageNumber, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postDocumentTextHeaderWithHttpInfo(name, textHeader, startPageNumber, endPageNumber, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document text header.
     * 
     * @param name The document name. (required)
     * @param textHeader The text header. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postDocumentTextHeaderWithHttpInfo(String name, TextHeader textHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postDocumentTextHeaderValidateBeforeCall(name, textHeader, startPageNumber, endPageNumber, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document text header. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param textHeader The text header. (required)
     * @param startPageNumber The start page number. (optional)
     * @param endPageNumber The end page number. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDocumentTextHeaderAsync(String name, TextHeader textHeader, Integer startPageNumber, Integer endPageNumber, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDocumentTextHeaderValidateBeforeCall(name, textHeader, startPageNumber, endPageNumber, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDocumentTextReplace
     * @param name  (required)
     * @param textReplace  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDocumentTextReplaceCall(String name, TextReplaceListRequest textReplace, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = textReplace;

        // create path and map variables
        String localVarPath = "/pdf/{name}/text/replace"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDocumentTextReplaceValidateBeforeCall(String name, TextReplaceListRequest textReplace, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postDocumentTextReplace(Async)");
        }
        
        // verify the required parameter 'textReplace' is set
        if (textReplace == null) {
            throw new ApiException("Missing the required parameter 'textReplace' when calling postDocumentTextReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = postDocumentTextReplaceCall(name, textReplace, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Document&#39;s replace text method.
     * 
     * @param name  (required)
     * @param textReplace  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return TextReplaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextReplaceResponse postDocumentTextReplace(String name, TextReplaceListRequest textReplace, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextReplaceResponse> resp = postDocumentTextReplaceWithHttpInfo(name, textReplace, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextReplaceResponse> resp = postDocumentTextReplaceWithHttpInfo(name, textReplace, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Document&#39;s replace text method.
     * 
     * @param name  (required)
     * @param textReplace  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;TextReplaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextReplaceResponse> postDocumentTextReplaceWithHttpInfo(String name, TextReplaceListRequest textReplace, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postDocumentTextReplaceValidateBeforeCall(name, textReplace, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextReplaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Document&#39;s replace text method. (asynchronously)
     * 
     * @param name  (required)
     * @param textReplace  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDocumentTextReplaceAsync(String name, TextReplaceListRequest textReplace, String storage, String folder, final ApiCallback<TextReplaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDocumentTextReplaceValidateBeforeCall(name, textReplace, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextReplaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postEncryptDocumentInStorage
     * @param name Document name. (required)
     * @param userPassword User password (encrypted Base64). (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param cryptoAlgorithm Cryptographic algorithm, see CryptoAlgorithm for details. (required)
     * @param permissionsFlags Array of document permissions, see PermissionsFlags for details. (optional)
     * @param usePdf20 Support for revision 6 (Extension 8). (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postEncryptDocumentInStorageCall(String name, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/encrypt"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userPassword", userPassword));
        if (ownerPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ownerPassword", ownerPassword));
        if (cryptoAlgorithm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cryptoAlgorithm", cryptoAlgorithm));
        if (permissionsFlags != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "permissionsFlags", permissionsFlags));
        if (usePdf20 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("usePdf20", usePdf20));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postEncryptDocumentInStorageValidateBeforeCall(String name, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postEncryptDocumentInStorage(Async)");
        }
        
        // verify the required parameter 'userPassword' is set
        if (userPassword == null) {
            throw new ApiException("Missing the required parameter 'userPassword' when calling postEncryptDocumentInStorage(Async)");
        }
        
        // verify the required parameter 'ownerPassword' is set
        if (ownerPassword == null) {
            throw new ApiException("Missing the required parameter 'ownerPassword' when calling postEncryptDocumentInStorage(Async)");
        }
        
        // verify the required parameter 'cryptoAlgorithm' is set
        if (cryptoAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'cryptoAlgorithm' when calling postEncryptDocumentInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = postEncryptDocumentInStorageCall(name, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Encrypt document in storage.
     * 
     * @param name Document name. (required)
     * @param userPassword User password (encrypted Base64). (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param cryptoAlgorithm Cryptographic algorithm, see CryptoAlgorithm for details. (required)
     * @param permissionsFlags Array of document permissions, see PermissionsFlags for details. (optional)
     * @param usePdf20 Support for revision 6 (Extension 8). (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postEncryptDocumentInStorage(String name, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postEncryptDocumentInStorageWithHttpInfo(name, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postEncryptDocumentInStorageWithHttpInfo(name, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Encrypt document in storage.
     * 
     * @param name Document name. (required)
     * @param userPassword User password (encrypted Base64). (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param cryptoAlgorithm Cryptographic algorithm, see CryptoAlgorithm for details. (required)
     * @param permissionsFlags Array of document permissions, see PermissionsFlags for details. (optional)
     * @param usePdf20 Support for revision 6 (Extension 8). (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postEncryptDocumentInStorageWithHttpInfo(String name, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postEncryptDocumentInStorageValidateBeforeCall(name, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Encrypt document in storage. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param userPassword User password (encrypted Base64). (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param cryptoAlgorithm Cryptographic algorithm, see CryptoAlgorithm for details. (required)
     * @param permissionsFlags Array of document permissions, see PermissionsFlags for details. (optional)
     * @param usePdf20 Support for revision 6 (Extension 8). (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postEncryptDocumentInStorageAsync(String name, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postEncryptDocumentInStorageValidateBeforeCall(name, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFlattenDocument
     * @param name The document name. (required)
     * @param updateAppearances If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance.. (optional)
     * @param callEvents If set, formatting and other JavaScript events will be called. (optional)
     * @param hideButtons If set, buttons will be removed from flattened document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postFlattenDocumentCall(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/flatten"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (updateAppearances != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("updateAppearances", updateAppearances));
        if (callEvents != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("callEvents", callEvents));
        if (hideButtons != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hideButtons", hideButtons));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFlattenDocumentValidateBeforeCall(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postFlattenDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postFlattenDocumentCall(name, updateAppearances, callEvents, hideButtons, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flatten the document.
     * 
     * @param name The document name. (required)
     * @param updateAppearances If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance.. (optional)
     * @param callEvents If set, formatting and other JavaScript events will be called. (optional)
     * @param hideButtons If set, buttons will be removed from flattened document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postFlattenDocument(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postFlattenDocumentWithHttpInfo(name, updateAppearances, callEvents, hideButtons, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postFlattenDocumentWithHttpInfo(name, updateAppearances, callEvents, hideButtons, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Flatten the document.
     * 
     * @param name The document name. (required)
     * @param updateAppearances If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance.. (optional)
     * @param callEvents If set, formatting and other JavaScript events will be called. (optional)
     * @param hideButtons If set, buttons will be removed from flattened document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postFlattenDocumentWithHttpInfo(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postFlattenDocumentValidateBeforeCall(name, updateAppearances, callEvents, hideButtons, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flatten the document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param updateAppearances If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened. This option may decrease performance.. (optional)
     * @param callEvents If set, formatting and other JavaScript events will be called. (optional)
     * @param hideButtons If set, buttons will be removed from flattened document. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postFlattenDocumentAsync(String name, Boolean updateAppearances, Boolean callEvents, Boolean hideButtons, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFlattenDocumentValidateBeforeCall(name, updateAppearances, callEvents, hideButtons, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postImportFieldsFromFdf
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param fdfData Fdf file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postImportFieldsFromFdfCall(String name, String storage, String folder, File fdfData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fdfData;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/fdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postImportFieldsFromFdfValidateBeforeCall(String name, String storage, String folder, File fdfData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postImportFieldsFromFdf(Async)");
        }
        

        com.squareup.okhttp.Call call = postImportFieldsFromFdfCall(name, storage, folder, fdfData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields from FDF file in request.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param fdfData Fdf file. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postImportFieldsFromFdf(String name, String storage, String folder, File fdfData) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postImportFieldsFromFdfWithHttpInfo(name, storage, folder, fdfData);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postImportFieldsFromFdfWithHttpInfo(name, storage, folder, fdfData);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields from FDF file in request.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param fdfData Fdf file. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postImportFieldsFromFdfWithHttpInfo(String name, String storage, String folder, File fdfData) throws ApiException {
        com.squareup.okhttp.Call call = postImportFieldsFromFdfValidateBeforeCall(name, storage, folder, fdfData, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields from FDF file in request. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param fdfData Fdf file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postImportFieldsFromFdfAsync(String name, String storage, String folder, File fdfData, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postImportFieldsFromFdfValidateBeforeCall(name, storage, folder, fdfData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postImportFieldsFromXfdf
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param xfdfData Xfdf file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postImportFieldsFromXfdfCall(String name, String storage, String folder, File xfdfData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = xfdfData;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/xfdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postImportFieldsFromXfdfValidateBeforeCall(String name, String storage, String folder, File xfdfData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postImportFieldsFromXfdf(Async)");
        }
        

        com.squareup.okhttp.Call call = postImportFieldsFromXfdfCall(name, storage, folder, xfdfData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields from XFDF file in request.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param xfdfData Xfdf file. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postImportFieldsFromXfdf(String name, String storage, String folder, File xfdfData) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postImportFieldsFromXfdfWithHttpInfo(name, storage, folder, xfdfData);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postImportFieldsFromXfdfWithHttpInfo(name, storage, folder, xfdfData);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields from XFDF file in request.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param xfdfData Xfdf file. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postImportFieldsFromXfdfWithHttpInfo(String name, String storage, String folder, File xfdfData) throws ApiException {
        com.squareup.okhttp.Call call = postImportFieldsFromXfdfValidateBeforeCall(name, storage, folder, xfdfData, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields from XFDF file in request. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param xfdfData Xfdf file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postImportFieldsFromXfdfAsync(String name, String storage, String folder, File xfdfData, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postImportFieldsFromXfdfValidateBeforeCall(name, storage, folder, xfdfData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postImportFieldsFromXml
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param xmlData Xml file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postImportFieldsFromXmlCall(String name, String storage, String folder, File xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = xmlData;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postImportFieldsFromXmlValidateBeforeCall(String name, String storage, String folder, File xmlData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postImportFieldsFromXml(Async)");
        }
        

        com.squareup.okhttp.Call call = postImportFieldsFromXmlCall(name, storage, folder, xmlData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields from XML file in request.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param xmlData Xml file. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postImportFieldsFromXml(String name, String storage, String folder, File xmlData) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postImportFieldsFromXmlWithHttpInfo(name, storage, folder, xmlData);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postImportFieldsFromXmlWithHttpInfo(name, storage, folder, xmlData);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields from XML file in request.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param xmlData Xml file. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postImportFieldsFromXmlWithHttpInfo(String name, String storage, String folder, File xmlData) throws ApiException {
        com.squareup.okhttp.Call call = postImportFieldsFromXmlValidateBeforeCall(name, storage, folder, xmlData, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields from XML file in request. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param xmlData Xml file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postImportFieldsFromXmlAsync(String name, String storage, String folder, File xmlData, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postImportFieldsFromXmlValidateBeforeCall(name, storage, folder, xmlData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postInsertImage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param llx Coordinate lower left X. (required)
     * @param lly Coordinate lower left Y. (required)
     * @param urx Coordinate upper right X. (required)
     * @param ury Coordinate upper right Y. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postInsertImageCall(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = image;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (llx != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("llx", llx));
        if (lly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lly", lly));
        if (urx != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("urx", urx));
        if (ury != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ury", ury));
        if (imageFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageFilePath", imageFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postInsertImageValidateBeforeCall(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'llx' is set
        if (llx == null) {
            throw new ApiException("Missing the required parameter 'llx' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'lly' is set
        if (lly == null) {
            throw new ApiException("Missing the required parameter 'lly' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'urx' is set
        if (urx == null) {
            throw new ApiException("Missing the required parameter 'urx' when calling postInsertImage(Async)");
        }
        
        // verify the required parameter 'ury' is set
        if (ury == null) {
            throw new ApiException("Missing the required parameter 'ury' when calling postInsertImage(Async)");
        }
        

        com.squareup.okhttp.Call call = postInsertImageCall(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert image to document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param llx Coordinate lower left X. (required)
     * @param lly Coordinate lower left Y. (required)
     * @param urx Coordinate upper right X. (required)
     * @param ury Coordinate upper right Y. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postInsertImage(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postInsertImageWithHttpInfo(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postInsertImageWithHttpInfo(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Insert image to document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param llx Coordinate lower left X. (required)
     * @param lly Coordinate lower left Y. (required)
     * @param urx Coordinate upper right X. (required)
     * @param ury Coordinate upper right Y. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postInsertImageWithHttpInfo(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image) throws ApiException {
        com.squareup.okhttp.Call call = postInsertImageValidateBeforeCall(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert image to document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param llx Coordinate lower left X. (required)
     * @param lly Coordinate lower left Y. (required)
     * @param urx Coordinate upper right X. (required)
     * @param ury Coordinate upper right Y. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postInsertImageAsync(String name, Integer pageNumber, Double llx, Double lly, Double urx, Double ury, String imageFilePath, String storage, String folder, File image, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postInsertImageValidateBeforeCall(name, pageNumber, llx, lly, urx, ury, imageFilePath, storage, folder, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postListBoxFields
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postListBoxFieldsCall(String name, List<ListBoxField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fields;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/listbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postListBoxFieldsValidateBeforeCall(String name, List<ListBoxField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postListBoxFields(Async)");
        }
        
        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling postListBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = postListBoxFieldsCall(name, fields, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document listbox fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postListBoxFields(String name, List<ListBoxField> fields, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postListBoxFieldsWithHttpInfo(name, fields, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postListBoxFieldsWithHttpInfo(name, fields, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document listbox fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postListBoxFieldsWithHttpInfo(String name, List<ListBoxField> fields, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postListBoxFieldsValidateBeforeCall(name, fields, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document listbox fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postListBoxFieldsAsync(String name, List<ListBoxField> fields, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postListBoxFieldsValidateBeforeCall(name, fields, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postMovePage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param newIndex The new page position/index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postMovePageCall(String name, Integer pageNumber, Integer newIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/movePage"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (newIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newIndex", newIndex));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postMovePageValidateBeforeCall(String name, Integer pageNumber, Integer newIndex, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postMovePage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postMovePage(Async)");
        }
        
        // verify the required parameter 'newIndex' is set
        if (newIndex == null) {
            throw new ApiException("Missing the required parameter 'newIndex' when calling postMovePage(Async)");
        }
        

        com.squareup.okhttp.Call call = postMovePageCall(name, pageNumber, newIndex, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Move page to new position.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param newIndex The new page position/index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postMovePage(String name, Integer pageNumber, Integer newIndex, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postMovePageWithHttpInfo(name, pageNumber, newIndex, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postMovePageWithHttpInfo(name, pageNumber, newIndex, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Move page to new position.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param newIndex The new page position/index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postMovePageWithHttpInfo(String name, Integer pageNumber, Integer newIndex, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postMovePageValidateBeforeCall(name, pageNumber, newIndex, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Move page to new position. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param newIndex The new page position/index. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postMovePageAsync(String name, Integer pageNumber, Integer newIndex, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postMovePageValidateBeforeCall(name, pageNumber, newIndex, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOptimizeDocument
     * @param name The document name. (required)
     * @param options The optimization options. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOptimizeDocumentCall(String name, OptimizeOptions options, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;

        // create path and map variables
        String localVarPath = "/pdf/{name}/optimize"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOptimizeDocumentValidateBeforeCall(String name, OptimizeOptions options, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postOptimizeDocument(Async)");
        }
        
        // verify the required parameter 'options' is set
        if (options == null) {
            throw new ApiException("Missing the required parameter 'options' when calling postOptimizeDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postOptimizeDocumentCall(name, options, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Optimize document.
     * 
     * @param name The document name. (required)
     * @param options The optimization options. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postOptimizeDocument(String name, OptimizeOptions options, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postOptimizeDocumentWithHttpInfo(name, options, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postOptimizeDocumentWithHttpInfo(name, options, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Optimize document.
     * 
     * @param name The document name. (required)
     * @param options The optimization options. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postOptimizeDocumentWithHttpInfo(String name, OptimizeOptions options, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postOptimizeDocumentValidateBeforeCall(name, options, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Optimize document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param options The optimization options. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOptimizeDocumentAsync(String name, OptimizeOptions options, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOptimizeDocumentValidateBeforeCall(name, options, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageCaretAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageCaretAnnotationsCall(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/caret"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageCaretAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageCaretAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageCaretAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageCaretAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageCaretAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page caret annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageCaretAnnotations(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageCaretAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageCaretAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page caret annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageCaretAnnotationsWithHttpInfo(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageCaretAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page caret annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageCaretAnnotationsAsync(String name, Integer pageNumber, List<CaretAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageCaretAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageCertify
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param sign Signature object containing signature data. (required)
     * @param docMdpAccessPermissionType The access permissions granted for this document. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageCertifyCall(String name, Integer pageNumber, Signature sign, String docMdpAccessPermissionType, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sign;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/certify"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (docMdpAccessPermissionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("docMdpAccessPermissionType", docMdpAccessPermissionType));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageCertifyValidateBeforeCall(String name, Integer pageNumber, Signature sign, String docMdpAccessPermissionType, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageCertify(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageCertify(Async)");
        }
        
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling postPageCertify(Async)");
        }
        
        // verify the required parameter 'docMdpAccessPermissionType' is set
        if (docMdpAccessPermissionType == null) {
            throw new ApiException("Missing the required parameter 'docMdpAccessPermissionType' when calling postPageCertify(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageCertifyCall(name, pageNumber, sign, docMdpAccessPermissionType, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Certify document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param sign Signature object containing signature data. (required)
     * @param docMdpAccessPermissionType The access permissions granted for this document. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageCertify(String name, Integer pageNumber, Signature sign, String docMdpAccessPermissionType, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageCertifyWithHttpInfo(name, pageNumber, sign, docMdpAccessPermissionType, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageCertifyWithHttpInfo(name, pageNumber, sign, docMdpAccessPermissionType, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Certify document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param sign Signature object containing signature data. (required)
     * @param docMdpAccessPermissionType The access permissions granted for this document. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageCertifyWithHttpInfo(String name, Integer pageNumber, Signature sign, String docMdpAccessPermissionType, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageCertifyValidateBeforeCall(name, pageNumber, sign, docMdpAccessPermissionType, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Certify document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param sign Signature object containing signature data. (required)
     * @param docMdpAccessPermissionType The access permissions granted for this document. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageCertifyAsync(String name, Integer pageNumber, Signature sign, String docMdpAccessPermissionType, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageCertifyValidateBeforeCall(name, pageNumber, sign, docMdpAccessPermissionType, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageCircleAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageCircleAnnotationsCall(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/circle"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageCircleAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageCircleAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageCircleAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageCircleAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageCircleAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page circle annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageCircleAnnotations(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageCircleAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageCircleAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page circle annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageCircleAnnotationsWithHttpInfo(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageCircleAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page circle annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageCircleAnnotationsAsync(String name, Integer pageNumber, List<CircleAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageCircleAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageFileAttachmentAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageFileAttachmentAnnotationsCall(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/fileattachment"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageFileAttachmentAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageFileAttachmentAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageFileAttachmentAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageFileAttachmentAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageFileAttachmentAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageFileAttachmentAnnotations(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageFileAttachmentAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageFileAttachmentAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page FileAttachment annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageFileAttachmentAnnotationsWithHttpInfo(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageFileAttachmentAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page FileAttachment annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageFileAttachmentAnnotationsAsync(String name, Integer pageNumber, List<FileAttachmentAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageFileAttachmentAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageFreeTextAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageFreeTextAnnotationsCall(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/freetext"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageFreeTextAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageFreeTextAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageFreeTextAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageFreeTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageFreeTextAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page free text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageFreeTextAnnotations(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageFreeTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page free text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageFreeTextAnnotationsWithHttpInfo(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageFreeTextAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page free text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageFreeTextAnnotationsAsync(String name, Integer pageNumber, List<FreeTextAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageFreeTextAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageHighlightAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageHighlightAnnotationsCall(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/highlight"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageHighlightAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageHighlightAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageHighlightAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageHighlightAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageHighlightAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page highlight annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageHighlightAnnotations(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageHighlightAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageHighlightAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page highlight annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageHighlightAnnotationsWithHttpInfo(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageHighlightAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page highlight annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageHighlightAnnotationsAsync(String name, Integer pageNumber, List<HighlightAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageHighlightAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageImageStamps
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageImageStampsCall(String name, Integer pageNumber, List<ImageStamp> stamps, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = stamps;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/stamps/image"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageImageStampsValidateBeforeCall(String name, Integer pageNumber, List<ImageStamp> stamps, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageImageStamps(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageImageStamps(Async)");
        }
        
        // verify the required parameter 'stamps' is set
        if (stamps == null) {
            throw new ApiException("Missing the required parameter 'stamps' when calling postPageImageStamps(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageImageStampsCall(name, pageNumber, stamps, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page image stamps.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageImageStamps(String name, Integer pageNumber, List<ImageStamp> stamps, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageImageStampsWithHttpInfo(name, pageNumber, stamps, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageImageStampsWithHttpInfo(name, pageNumber, stamps, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page image stamps.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageImageStampsWithHttpInfo(String name, Integer pageNumber, List<ImageStamp> stamps, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageImageStampsValidateBeforeCall(name, pageNumber, stamps, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page image stamps. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageImageStampsAsync(String name, Integer pageNumber, List<ImageStamp> stamps, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageImageStampsValidateBeforeCall(name, pageNumber, stamps, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageInkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageInkAnnotationsCall(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/ink"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageInkAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageInkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageInkAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageInkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageInkAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page ink annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageInkAnnotations(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageInkAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageInkAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page ink annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageInkAnnotationsWithHttpInfo(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageInkAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page ink annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageInkAnnotationsAsync(String name, Integer pageNumber, List<InkAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageInkAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageLineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageLineAnnotationsCall(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/line"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageLineAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageLineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageLineAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageLineAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page line annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageLineAnnotations(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page line annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageLineAnnotationsWithHttpInfo(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageLineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page line annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageLineAnnotationsAsync(String name, Integer pageNumber, List<LineAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageLineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageLinkAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param links Array of link annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageLinkAnnotationsCall(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = links;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/links"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageLinkAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageLinkAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageLinkAnnotations(Async)");
        }
        
        // verify the required parameter 'links' is set
        if (links == null) {
            throw new ApiException("Missing the required parameter 'links' when calling postPageLinkAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageLinkAnnotationsCall(name, pageNumber, links, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page link annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param links Array of link annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageLinkAnnotations(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageLinkAnnotationsWithHttpInfo(name, pageNumber, links, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageLinkAnnotationsWithHttpInfo(name, pageNumber, links, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page link annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param links Array of link annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageLinkAnnotationsWithHttpInfo(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageLinkAnnotationsValidateBeforeCall(name, pageNumber, links, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page link annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param links Array of link annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageLinkAnnotationsAsync(String name, Integer pageNumber, List<LinkAnnotation> links, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageLinkAnnotationsValidateBeforeCall(name, pageNumber, links, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageMovieAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageMovieAnnotationsCall(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/movie"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageMovieAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageMovieAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageMovieAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageMovieAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageMovieAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page movie annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageMovieAnnotations(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageMovieAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageMovieAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page movie annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageMovieAnnotationsWithHttpInfo(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageMovieAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page movie annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageMovieAnnotationsAsync(String name, Integer pageNumber, List<MovieAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageMovieAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPagePdfPageStamps
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPagePdfPageStampsCall(String name, Integer pageNumber, List<PdfPageStamp> stamps, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = stamps;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/stamps/pdfpage"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPagePdfPageStampsValidateBeforeCall(String name, Integer pageNumber, List<PdfPageStamp> stamps, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPagePdfPageStamps(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPagePdfPageStamps(Async)");
        }
        
        // verify the required parameter 'stamps' is set
        if (stamps == null) {
            throw new ApiException("Missing the required parameter 'stamps' when calling postPagePdfPageStamps(Async)");
        }
        

        com.squareup.okhttp.Call call = postPagePdfPageStampsCall(name, pageNumber, stamps, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document pdf page stamps.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPagePdfPageStamps(String name, Integer pageNumber, List<PdfPageStamp> stamps, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPagePdfPageStampsWithHttpInfo(name, pageNumber, stamps, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPagePdfPageStampsWithHttpInfo(name, pageNumber, stamps, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document pdf page stamps.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPagePdfPageStampsWithHttpInfo(String name, Integer pageNumber, List<PdfPageStamp> stamps, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPagePdfPageStampsValidateBeforeCall(name, pageNumber, stamps, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document pdf page stamps. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPagePdfPageStampsAsync(String name, Integer pageNumber, List<PdfPageStamp> stamps, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPagePdfPageStampsValidateBeforeCall(name, pageNumber, stamps, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPagePolyLineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPagePolyLineAnnotationsCall(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polyline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPagePolyLineAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPagePolyLineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPagePolyLineAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPagePolyLineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPagePolyLineAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page polyline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPagePolyLineAnnotations(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPagePolyLineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page polyline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPagePolyLineAnnotationsWithHttpInfo(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPagePolyLineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page polyline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPagePolyLineAnnotationsAsync(String name, Integer pageNumber, List<PolyLineAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPagePolyLineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPagePolygonAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPagePolygonAnnotationsCall(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/polygon"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPagePolygonAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPagePolygonAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPagePolygonAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPagePolygonAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPagePolygonAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page polygon annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPagePolygonAnnotations(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPagePolygonAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPagePolygonAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page polygon annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPagePolygonAnnotationsWithHttpInfo(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPagePolygonAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page polygon annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPagePolygonAnnotationsAsync(String name, Integer pageNumber, List<PolygonAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPagePolygonAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageRedactionAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param apply Apply redaction immediately after adding. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageRedactionAnnotationsCall(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder, Boolean apply, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/redaction"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (apply != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apply", apply));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageRedactionAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder, Boolean apply, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageRedactionAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageRedactionAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageRedactionAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageRedactionAnnotationsCall(name, pageNumber, annotations, storage, folder, apply, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page redaction annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param apply Apply redaction immediately after adding. (optional, default to false)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageRedactionAnnotations(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder, Boolean apply) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageRedactionAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder, apply);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageRedactionAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder, apply);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page redaction annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param apply Apply redaction immediately after adding. (optional, default to false)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageRedactionAnnotationsWithHttpInfo(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder, Boolean apply) throws ApiException {
        com.squareup.okhttp.Call call = postPageRedactionAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, apply, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page redaction annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param apply Apply redaction immediately after adding. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageRedactionAnnotationsAsync(String name, Integer pageNumber, List<RedactionAnnotation> annotations, String storage, String folder, Boolean apply, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageRedactionAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, apply, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageScreenAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageScreenAnnotationsCall(String name, Integer pageNumber, List<ScreenAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/screen"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageScreenAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<ScreenAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageScreenAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageScreenAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageScreenAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageScreenAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page screen annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageScreenAnnotations(String name, Integer pageNumber, List<ScreenAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageScreenAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageScreenAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page screen annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageScreenAnnotationsWithHttpInfo(String name, Integer pageNumber, List<ScreenAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageScreenAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page screen annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageScreenAnnotationsAsync(String name, Integer pageNumber, List<ScreenAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageScreenAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageSoundAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageSoundAnnotationsCall(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/sound"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageSoundAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageSoundAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageSoundAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageSoundAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageSoundAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page sound annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageSoundAnnotations(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageSoundAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageSoundAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page sound annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageSoundAnnotationsWithHttpInfo(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageSoundAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page sound annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageSoundAnnotationsAsync(String name, Integer pageNumber, List<SoundAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageSoundAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageSquareAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageSquareAnnotationsCall(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/square"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageSquareAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageSquareAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageSquareAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageSquareAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageSquareAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page square annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageSquareAnnotations(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageSquareAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageSquareAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page square annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageSquareAnnotationsWithHttpInfo(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageSquareAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page square annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageSquareAnnotationsAsync(String name, Integer pageNumber, List<SquareAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageSquareAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageSquigglyAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageSquigglyAnnotationsCall(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/squiggly"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageSquigglyAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageSquigglyAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageSquigglyAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageSquigglyAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageSquigglyAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageSquigglyAnnotations(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageSquigglyAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageSquigglyAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page squiggly annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageSquigglyAnnotationsWithHttpInfo(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageSquigglyAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page squiggly annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageSquigglyAnnotationsAsync(String name, Integer pageNumber, List<SquigglyAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageSquigglyAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageStampAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageStampAnnotationsCall(String name, Integer pageNumber, List<StampAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/stamp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageStampAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<StampAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageStampAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageStampAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageStampAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageStampAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page stamp annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageStampAnnotations(String name, Integer pageNumber, List<StampAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageStampAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageStampAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page stamp annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageStampAnnotationsWithHttpInfo(String name, Integer pageNumber, List<StampAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageStampAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page stamp annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageStampAnnotationsAsync(String name, Integer pageNumber, List<StampAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageStampAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageStrikeOutAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageStrikeOutAnnotationsCall(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/strikeout"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageStrikeOutAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageStrikeOutAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageStrikeOutAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageStrikeOutAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageStrikeOutAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageStrikeOutAnnotations(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageStrikeOutAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageStrikeOutAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page StrikeOut annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageStrikeOutAnnotationsWithHttpInfo(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageStrikeOutAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page StrikeOut annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageStrikeOutAnnotationsAsync(String name, Integer pageNumber, List<StrikeOutAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageStrikeOutAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageTables
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param tables The array of table. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageTablesCall(String name, Integer pageNumber, List<Table> tables, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tables;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/tables"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageTablesValidateBeforeCall(String name, Integer pageNumber, List<Table> tables, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageTables(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageTables(Async)");
        }
        
        // verify the required parameter 'tables' is set
        if (tables == null) {
            throw new ApiException("Missing the required parameter 'tables' when calling postPageTables(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageTablesCall(name, pageNumber, tables, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page tables.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param tables The array of table. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageTables(String name, Integer pageNumber, List<Table> tables, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageTablesWithHttpInfo(name, pageNumber, tables, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageTablesWithHttpInfo(name, pageNumber, tables, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page tables.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param tables The array of table. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageTablesWithHttpInfo(String name, Integer pageNumber, List<Table> tables, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageTablesValidateBeforeCall(name, pageNumber, tables, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page tables. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param tables The array of table. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageTablesAsync(String name, Integer pageNumber, List<Table> tables, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageTablesValidateBeforeCall(name, pageNumber, tables, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageTextAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageTextAnnotationsCall(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageTextAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageTextAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageTextAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageTextAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageTextAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageTextAnnotations(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageTextAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page text annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageTextAnnotationsWithHttpInfo(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageTextAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page text annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageTextAnnotationsAsync(String name, Integer pageNumber, List<TextAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageTextAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageTextReplace
     * @param name  (required)
     * @param pageNumber  (required)
     * @param textReplaceListRequest  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageTextReplaceCall(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = textReplaceListRequest;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/text/replace"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageTextReplaceValidateBeforeCall(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageTextReplace(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageTextReplace(Async)");
        }
        
        // verify the required parameter 'textReplaceListRequest' is set
        if (textReplaceListRequest == null) {
            throw new ApiException("Missing the required parameter 'textReplaceListRequest' when calling postPageTextReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageTextReplaceCall(name, pageNumber, textReplaceListRequest, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Page&#39;s replace text method.
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param textReplaceListRequest  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return TextReplaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextReplaceResponse postPageTextReplace(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextReplaceResponse> resp = postPageTextReplaceWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextReplaceResponse> resp = postPageTextReplaceWithHttpInfo(name, pageNumber, textReplaceListRequest, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Page&#39;s replace text method.
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param textReplaceListRequest  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;TextReplaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextReplaceResponse> postPageTextReplaceWithHttpInfo(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageTextReplaceValidateBeforeCall(name, pageNumber, textReplaceListRequest, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextReplaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Page&#39;s replace text method. (asynchronously)
     * 
     * @param name  (required)
     * @param pageNumber  (required)
     * @param textReplaceListRequest  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageTextReplaceAsync(String name, Integer pageNumber, TextReplaceListRequest textReplaceListRequest, String storage, String folder, final ApiCallback<TextReplaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageTextReplaceValidateBeforeCall(name, pageNumber, textReplaceListRequest, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextReplaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageTextStamps
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageTextStampsCall(String name, Integer pageNumber, List<TextStamp> stamps, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = stamps;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/stamps/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageTextStampsValidateBeforeCall(String name, Integer pageNumber, List<TextStamp> stamps, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageTextStamps(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageTextStamps(Async)");
        }
        
        // verify the required parameter 'stamps' is set
        if (stamps == null) {
            throw new ApiException("Missing the required parameter 'stamps' when calling postPageTextStamps(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageTextStampsCall(name, pageNumber, stamps, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page text stamps.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageTextStamps(String name, Integer pageNumber, List<TextStamp> stamps, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageTextStampsWithHttpInfo(name, pageNumber, stamps, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageTextStampsWithHttpInfo(name, pageNumber, stamps, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page text stamps.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageTextStampsWithHttpInfo(String name, Integer pageNumber, List<TextStamp> stamps, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageTextStampsValidateBeforeCall(name, pageNumber, stamps, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page text stamps. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamps The array of stamp. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageTextStampsAsync(String name, Integer pageNumber, List<TextStamp> stamps, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageTextStampsValidateBeforeCall(name, pageNumber, stamps, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPageUnderlineAnnotations
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPageUnderlineAnnotationsCall(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotations;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/annotations/underline"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPageUnderlineAnnotationsValidateBeforeCall(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPageUnderlineAnnotations(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postPageUnderlineAnnotations(Async)");
        }
        
        // verify the required parameter 'annotations' is set
        if (annotations == null) {
            throw new ApiException("Missing the required parameter 'annotations' when calling postPageUnderlineAnnotations(Async)");
        }
        

        com.squareup.okhttp.Call call = postPageUnderlineAnnotationsCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document page underline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPageUnderlineAnnotations(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPageUnderlineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPageUnderlineAnnotationsWithHttpInfo(name, pageNumber, annotations, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document page underline annotations.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPageUnderlineAnnotationsWithHttpInfo(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPageUnderlineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document page underline annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param annotations The array of annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPageUnderlineAnnotationsAsync(String name, Integer pageNumber, List<UnderlineAnnotation> annotations, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPageUnderlineAnnotationsValidateBeforeCall(name, pageNumber, annotations, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPopupAnnotation
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param annotation The annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPopupAnnotationCall(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/{annotationId}/popup"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPopupAnnotationValidateBeforeCall(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling postPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling postPopupAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = postPopupAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document popup annotations.
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param annotation The annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postPopupAnnotation(String name, String annotationId, PopupAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postPopupAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postPopupAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document popup annotations.
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param annotation The annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postPopupAnnotationWithHttpInfo(String name, String annotationId, PopupAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postPopupAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document popup annotations. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The parent annotation ID. (required)
     * @param annotation The annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPopupAnnotationAsync(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPopupAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postRadioButtonFields
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postRadioButtonFieldsCall(String name, List<RadioButtonField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fields;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/radiobutton"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postRadioButtonFieldsValidateBeforeCall(String name, List<RadioButtonField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postRadioButtonFields(Async)");
        }
        
        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling postRadioButtonFields(Async)");
        }
        

        com.squareup.okhttp.Call call = postRadioButtonFieldsCall(name, fields, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document RadioButton fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postRadioButtonFields(String name, List<RadioButtonField> fields, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postRadioButtonFieldsWithHttpInfo(name, fields, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postRadioButtonFieldsWithHttpInfo(name, fields, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document RadioButton fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postRadioButtonFieldsWithHttpInfo(String name, List<RadioButtonField> fields, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postRadioButtonFieldsValidateBeforeCall(name, fields, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document RadioButton fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postRadioButtonFieldsAsync(String name, List<RadioButtonField> fields, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postRadioButtonFieldsValidateBeforeCall(name, fields, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSignDocument
     * @param name The document name. (required)
     * @param sign Signature object containing signature data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSignDocumentCall(String name, Signature sign, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sign;

        // create path and map variables
        String localVarPath = "/pdf/{name}/sign"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSignDocumentValidateBeforeCall(String name, Signature sign, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSignDocument(Async)");
        }
        
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling postSignDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postSignDocumentCall(name, sign, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sign document.
     * 
     * @param name The document name. (required)
     * @param sign Signature object containing signature data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postSignDocument(String name, Signature sign, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postSignDocumentWithHttpInfo(name, sign, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postSignDocumentWithHttpInfo(name, sign, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Sign document.
     * 
     * @param name The document name. (required)
     * @param sign Signature object containing signature data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postSignDocumentWithHttpInfo(String name, Signature sign, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postSignDocumentValidateBeforeCall(name, sign, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sign document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param sign Signature object containing signature data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSignDocumentAsync(String name, Signature sign, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSignDocumentValidateBeforeCall(name, sign, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSignPage
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param sign Signature object containing signature data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSignPageCall(String name, Integer pageNumber, Signature sign, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sign;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/sign"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSignPageValidateBeforeCall(String name, Integer pageNumber, Signature sign, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSignPage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling postSignPage(Async)");
        }
        
        // verify the required parameter 'sign' is set
        if (sign == null) {
            throw new ApiException("Missing the required parameter 'sign' when calling postSignPage(Async)");
        }
        

        com.squareup.okhttp.Call call = postSignPageCall(name, pageNumber, sign, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sign page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param sign Signature object containing signature data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postSignPage(String name, Integer pageNumber, Signature sign, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postSignPageWithHttpInfo(name, pageNumber, sign, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postSignPageWithHttpInfo(name, pageNumber, sign, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Sign page.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param sign Signature object containing signature data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postSignPageWithHttpInfo(String name, Integer pageNumber, Signature sign, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postSignPageValidateBeforeCall(name, pageNumber, sign, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sign page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param sign Signature object containing signature data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSignPageAsync(String name, Integer pageNumber, Signature sign, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSignPageValidateBeforeCall(name, pageNumber, sign, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSignatureField
     * @param name The document name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSignatureFieldCall(String name, SignatureField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/signature"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSignatureFieldValidateBeforeCall(String name, SignatureField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSignatureField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling postSignatureField(Async)");
        }
        

        com.squareup.okhttp.Call call = postSignatureFieldCall(name, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document signature field.
     * 
     * @param name The document name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postSignatureField(String name, SignatureField field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postSignatureFieldWithHttpInfo(name, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postSignatureFieldWithHttpInfo(name, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document signature field.
     * 
     * @param name The document name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postSignatureFieldWithHttpInfo(String name, SignatureField field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postSignatureFieldValidateBeforeCall(name, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document signature field. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSignatureFieldAsync(String name, SignatureField field, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSignatureFieldValidateBeforeCall(name, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSplitDocument
     * @param name Document name. (required)
     * @param format Resulting documents format. (optional)
     * @param from Start page if defined. (optional)
     * @param to End page if defined. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSplitDocumentCall(String name, String format, Integer from, Integer to, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/split"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSplitDocumentValidateBeforeCall(String name, String format, Integer from, Integer to, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSplitDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postSplitDocumentCall(name, format, from, to, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Split document to parts.
     * 
     * @param name Document name. (required)
     * @param format Resulting documents format. (optional)
     * @param from Start page if defined. (optional)
     * @param to End page if defined. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SplitResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitResultResponse postSplitDocument(String name, String format, Integer from, Integer to, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SplitResultResponse> resp = postSplitDocumentWithHttpInfo(name, format, from, to, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SplitResultResponse> resp = postSplitDocumentWithHttpInfo(name, format, from, to, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Split document to parts.
     * 
     * @param name Document name. (required)
     * @param format Resulting documents format. (optional)
     * @param from Start page if defined. (optional)
     * @param to End page if defined. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SplitResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitResultResponse> postSplitDocumentWithHttpInfo(String name, String format, Integer from, Integer to, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postSplitDocumentValidateBeforeCall(name, format, from, to, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split document to parts. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param format Resulting documents format. (optional)
     * @param from Start page if defined. (optional)
     * @param to End page if defined. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSplitDocumentAsync(String name, String format, Integer from, Integer to, String storage, String folder, final ApiCallback<SplitResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSplitDocumentValidateBeforeCall(name, format, from, to, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSplitRangePdfDocument
     * @param name  (required)
     * @param options  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSplitRangePdfDocumentCall(String name, SplitRangePdfOptions options, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = options;

        // create path and map variables
        String localVarPath = "/pdf/{name}/splitrangepdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSplitRangePdfDocumentValidateBeforeCall(String name, SplitRangePdfOptions options, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSplitRangePdfDocument(Async)");
        }
        
        // verify the required parameter 'options' is set
        if (options == null) {
            throw new ApiException("Missing the required parameter 'options' when calling postSplitRangePdfDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postSplitRangePdfDocumentCall(name, options, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param options  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return SplitResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitResultResponse postSplitRangePdfDocument(String name, SplitRangePdfOptions options, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SplitResultResponse> resp = postSplitRangePdfDocumentWithHttpInfo(name, options, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SplitResultResponse> resp = postSplitRangePdfDocumentWithHttpInfo(name, options, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param options  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;SplitResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitResultResponse> postSplitRangePdfDocumentWithHttpInfo(String name, SplitRangePdfOptions options, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postSplitRangePdfDocumentValidateBeforeCall(name, options, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param options  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSplitRangePdfDocumentAsync(String name, SplitRangePdfOptions options, String storage, String folder, final ApiCallback<SplitResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSplitRangePdfDocumentValidateBeforeCall(name, options, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SplitResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTextBoxFields
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTextBoxFieldsCall(String name, List<TextBoxField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fields;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/textbox"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTextBoxFieldsValidateBeforeCall(String name, List<TextBoxField> fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postTextBoxFields(Async)");
        }
        
        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling postTextBoxFields(Async)");
        }
        

        com.squareup.okhttp.Call call = postTextBoxFieldsCall(name, fields, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add document text box fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse postTextBoxFields(String name, List<TextBoxField> fields, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = postTextBoxFieldsWithHttpInfo(name, fields, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = postTextBoxFieldsWithHttpInfo(name, fields, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add document text box fields.
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> postTextBoxFieldsWithHttpInfo(String name, List<TextBoxField> fields, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = postTextBoxFieldsValidateBeforeCall(name, fields, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add document text box fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fields The array of field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTextBoxFieldsAsync(String name, List<TextBoxField> fields, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTextBoxFieldsValidateBeforeCall(name, fields, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAddNewPage
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAddNewPageCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAddNewPageValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putAddNewPage(Async)");
        }
        

        com.squareup.okhttp.Call call = putAddNewPageCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add new page to end of the document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DocumentPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPagesResponse putAddNewPage(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPagesResponse> resp = putAddNewPageWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentPagesResponse> resp = putAddNewPageWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add new page to end of the document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DocumentPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPagesResponse> putAddNewPageWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putAddNewPageValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new page to end of the document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAddNewPageAsync(String name, String storage, String folder, final ApiCallback<DocumentPagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAddNewPageValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAddText
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param paragraph Paragraph data. (required)
     * @param folder Document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAddTextCall(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = paragraph;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/text"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAddTextValidateBeforeCall(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putAddText(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putAddText(Async)");
        }
        
        // verify the required parameter 'paragraph' is set
        if (paragraph == null) {
            throw new ApiException("Missing the required parameter 'paragraph' when calling putAddText(Async)");
        }
        

        com.squareup.okhttp.Call call = putAddTextCall(name, pageNumber, paragraph, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add text to PDF document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param paragraph Paragraph data. (required)
     * @param folder Document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putAddText(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putAddTextWithHttpInfo(name, pageNumber, paragraph, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putAddTextWithHttpInfo(name, pageNumber, paragraph, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add text to PDF document page.
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param paragraph Paragraph data. (required)
     * @param folder Document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putAddTextWithHttpInfo(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putAddTextValidateBeforeCall(name, pageNumber, paragraph, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add text to PDF document page. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber Number of page (starting from 1). (required)
     * @param paragraph Paragraph data. (required)
     * @param folder Document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAddTextAsync(String name, Integer pageNumber, Paragraph paragraph, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAddTextValidateBeforeCall(name, pageNumber, paragraph, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAnnotationsFlatten
     * @param name The document name. (required)
     * @param startPage The start page number. (optional)
     * @param endPage The end page number. (optional)
     * @param annotationTypes Array of annotation types. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAnnotationsFlattenCall(String name, Integer startPage, Integer endPage, List<AnnotationType> annotationTypes, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/flatten"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startPage", startPage));
        if (endPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endPage", endPage));
        if (annotationTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "annotationTypes", annotationTypes));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAnnotationsFlattenValidateBeforeCall(String name, Integer startPage, Integer endPage, List<AnnotationType> annotationTypes, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putAnnotationsFlatten(Async)");
        }
        

        com.squareup.okhttp.Call call = putAnnotationsFlattenCall(name, startPage, endPage, annotationTypes, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flattens the annotations of the specified types
     * 
     * @param name The document name. (required)
     * @param startPage The start page number. (optional)
     * @param endPage The end page number. (optional)
     * @param annotationTypes Array of annotation types. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putAnnotationsFlatten(String name, Integer startPage, Integer endPage, List<AnnotationType> annotationTypes, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putAnnotationsFlattenWithHttpInfo(name, startPage, endPage, annotationTypes, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putAnnotationsFlattenWithHttpInfo(name, startPage, endPage, annotationTypes, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Flattens the annotations of the specified types
     * 
     * @param name The document name. (required)
     * @param startPage The start page number. (optional)
     * @param endPage The end page number. (optional)
     * @param annotationTypes Array of annotation types. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putAnnotationsFlattenWithHttpInfo(String name, Integer startPage, Integer endPage, List<AnnotationType> annotationTypes, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putAnnotationsFlattenValidateBeforeCall(name, startPage, endPage, annotationTypes, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flattens the annotations of the specified types (asynchronously)
     * 
     * @param name The document name. (required)
     * @param startPage The start page number. (optional)
     * @param endPage The end page number. (optional)
     * @param annotationTypes Array of annotation types. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAnnotationsFlattenAsync(String name, Integer startPage, Integer endPage, List<AnnotationType> annotationTypes, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAnnotationsFlattenValidateBeforeCall(name, startPage, endPage, annotationTypes, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putBookmark
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param bookmark The bookmark. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putBookmarkCall(String name, String bookmarkPath, Bookmark bookmark, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bookmark;

        // create path and map variables
        String localVarPath = "/pdf/{name}/bookmarks/bookmark/{bookmarkPath}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "bookmarkPath" + "\\}", apiClient.escapePathSegmentString(bookmarkPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putBookmarkValidateBeforeCall(String name, String bookmarkPath, Bookmark bookmark, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putBookmark(Async)");
        }
        
        // verify the required parameter 'bookmarkPath' is set
        if (bookmarkPath == null) {
            throw new ApiException("Missing the required parameter 'bookmarkPath' when calling putBookmark(Async)");
        }
        
        // verify the required parameter 'bookmark' is set
        if (bookmark == null) {
            throw new ApiException("Missing the required parameter 'bookmark' when calling putBookmark(Async)");
        }
        

        com.squareup.okhttp.Call call = putBookmarkCall(name, bookmarkPath, bookmark, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update document bookmark.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param bookmark The bookmark. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return BookmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BookmarkResponse putBookmark(String name, String bookmarkPath, Bookmark bookmark, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<BookmarkResponse> resp = putBookmarkWithHttpInfo(name, bookmarkPath, bookmark, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<BookmarkResponse> resp = putBookmarkWithHttpInfo(name, bookmarkPath, bookmark, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update document bookmark.
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param bookmark The bookmark. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;BookmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BookmarkResponse> putBookmarkWithHttpInfo(String name, String bookmarkPath, Bookmark bookmark, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putBookmarkValidateBeforeCall(name, bookmarkPath, bookmark, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<BookmarkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update document bookmark. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param bookmarkPath The bookmark path. (required)
     * @param bookmark The bookmark. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putBookmarkAsync(String name, String bookmarkPath, Bookmark bookmark, String folder, String storage, final ApiCallback<BookmarkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putBookmarkValidateBeforeCall(name, bookmarkPath, bookmark, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BookmarkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCaretAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCaretAnnotationCall(String name, String annotationId, CaretAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/caret/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCaretAnnotationValidateBeforeCall(String name, String annotationId, CaretAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putCaretAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putCaretAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putCaretAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putCaretAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document caret annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CaretAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CaretAnnotationResponse putCaretAnnotation(String name, String annotationId, CaretAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CaretAnnotationResponse> resp = putCaretAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CaretAnnotationResponse> resp = putCaretAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document caret annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CaretAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CaretAnnotationResponse> putCaretAnnotationWithHttpInfo(String name, String annotationId, CaretAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putCaretAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CaretAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document caret annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCaretAnnotationAsync(String name, String annotationId, CaretAnnotation annotation, String storage, String folder, final ApiCallback<CaretAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCaretAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CaretAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putChangePasswordDocument
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param newUserPassword New user password (encrypted Base64). (required)
     * @param newOwnerPassword New owner password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param file A file to be changed password. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putChangePasswordDocumentCall(String outPath, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/changepassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (ownerPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ownerPassword", ownerPassword));
        if (newUserPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newUserPassword", newUserPassword));
        if (newOwnerPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newOwnerPassword", newOwnerPassword));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putChangePasswordDocumentValidateBeforeCall(String outPath, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putChangePasswordDocument(Async)");
        }
        
        // verify the required parameter 'ownerPassword' is set
        if (ownerPassword == null) {
            throw new ApiException("Missing the required parameter 'ownerPassword' when calling putChangePasswordDocument(Async)");
        }
        
        // verify the required parameter 'newUserPassword' is set
        if (newUserPassword == null) {
            throw new ApiException("Missing the required parameter 'newUserPassword' when calling putChangePasswordDocument(Async)");
        }
        
        // verify the required parameter 'newOwnerPassword' is set
        if (newOwnerPassword == null) {
            throw new ApiException("Missing the required parameter 'newOwnerPassword' when calling putChangePasswordDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = putChangePasswordDocumentCall(outPath, ownerPassword, newUserPassword, newOwnerPassword, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change document password from content.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param newUserPassword New user password (encrypted Base64). (required)
     * @param newOwnerPassword New owner password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param file A file to be changed password. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putChangePasswordDocument(String outPath, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putChangePasswordDocumentWithHttpInfo(outPath, ownerPassword, newUserPassword, newOwnerPassword, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putChangePasswordDocumentWithHttpInfo(outPath, ownerPassword, newUserPassword, newOwnerPassword, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Change document password from content.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param newUserPassword New user password (encrypted Base64). (required)
     * @param newOwnerPassword New owner password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param file A file to be changed password. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putChangePasswordDocumentWithHttpInfo(String outPath, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putChangePasswordDocumentValidateBeforeCall(outPath, ownerPassword, newUserPassword, newOwnerPassword, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change document password from content. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param newUserPassword New user password (encrypted Base64). (required)
     * @param newOwnerPassword New owner password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param file A file to be changed password. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putChangePasswordDocumentAsync(String outPath, String ownerPassword, String newUserPassword, String newOwnerPassword, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putChangePasswordDocumentValidateBeforeCall(outPath, ownerPassword, newUserPassword, newOwnerPassword, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCheckBoxField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCheckBoxFieldCall(String name, String fieldName, CheckBoxField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/checkbox/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCheckBoxFieldValidateBeforeCall(String name, String fieldName, CheckBoxField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putCheckBoxField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putCheckBoxField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling putCheckBoxField(Async)");
        }
        

        com.squareup.okhttp.Call call = putCheckBoxFieldCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document checkbox field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CheckBoxFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckBoxFieldResponse putCheckBoxField(String name, String fieldName, CheckBoxField field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CheckBoxFieldResponse> resp = putCheckBoxFieldWithHttpInfo(name, fieldName, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CheckBoxFieldResponse> resp = putCheckBoxFieldWithHttpInfo(name, fieldName, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document checkbox field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CheckBoxFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckBoxFieldResponse> putCheckBoxFieldWithHttpInfo(String name, String fieldName, CheckBoxField field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putCheckBoxFieldValidateBeforeCall(name, fieldName, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CheckBoxFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document checkbox field (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCheckBoxFieldAsync(String name, String fieldName, CheckBoxField field, String storage, String folder, final ApiCallback<CheckBoxFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCheckBoxFieldValidateBeforeCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckBoxFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCircleAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCircleAnnotationCall(String name, String annotationId, CircleAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/circle/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCircleAnnotationValidateBeforeCall(String name, String annotationId, CircleAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putCircleAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putCircleAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putCircleAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putCircleAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document circle annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return CircleAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CircleAnnotationResponse putCircleAnnotation(String name, String annotationId, CircleAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<CircleAnnotationResponse> resp = putCircleAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<CircleAnnotationResponse> resp = putCircleAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document circle annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;CircleAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CircleAnnotationResponse> putCircleAnnotationWithHttpInfo(String name, String annotationId, CircleAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putCircleAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<CircleAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document circle annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCircleAnnotationAsync(String name, String annotationId, CircleAnnotation annotation, String storage, String folder, final ApiCallback<CircleAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCircleAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CircleAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putComboBoxField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putComboBoxFieldCall(String name, String fieldName, ComboBoxField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/combobox/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putComboBoxFieldValidateBeforeCall(String name, String fieldName, ComboBoxField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putComboBoxField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putComboBoxField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling putComboBoxField(Async)");
        }
        

        com.squareup.okhttp.Call call = putComboBoxFieldCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document combobox field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ComboBoxFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComboBoxFieldResponse putComboBoxField(String name, String fieldName, ComboBoxField field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ComboBoxFieldResponse> resp = putComboBoxFieldWithHttpInfo(name, fieldName, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ComboBoxFieldResponse> resp = putComboBoxFieldWithHttpInfo(name, fieldName, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document combobox field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ComboBoxFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComboBoxFieldResponse> putComboBoxFieldWithHttpInfo(String name, String fieldName, ComboBoxField field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putComboBoxFieldValidateBeforeCall(name, fieldName, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ComboBoxFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document combobox field (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putComboBoxFieldAsync(String name, String fieldName, ComboBoxField field, String storage, String folder, final ApiCallback<ComboBoxFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putComboBoxFieldValidateBeforeCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComboBoxFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putCreateDocument
     * @param name The new document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putCreateDocumentCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putCreateDocumentValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putCreateDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = putCreateDocumentCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create empty document.
     * 
     * @param name The new document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse putCreateDocument(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentResponse> resp = putCreateDocumentWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentResponse> resp = putCreateDocumentWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Create empty document.
     * 
     * @param name The new document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> putCreateDocumentWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putCreateDocumentValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create empty document. (asynchronously)
     * 
     * @param name The new document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The new document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putCreateDocumentAsync(String name, String storage, String folder, final ApiCallback<DocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putCreateDocumentValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putDecryptDocument
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param password The password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param file A file to be decrypted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putDecryptDocumentCall(String outPath, String password, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/decrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putDecryptDocumentValidateBeforeCall(String outPath, String password, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putDecryptDocument(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling putDecryptDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = putDecryptDocumentCall(outPath, password, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Decrypt document from content.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param password The password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param file A file to be decrypted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putDecryptDocument(String outPath, String password, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putDecryptDocumentWithHttpInfo(outPath, password, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putDecryptDocumentWithHttpInfo(outPath, password, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Decrypt document from content.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param password The password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param file A file to be decrypted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putDecryptDocumentWithHttpInfo(String outPath, String password, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putDecryptDocumentValidateBeforeCall(outPath, password, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decrypt document from content. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param password The password (encrypted Base64). (required)
     * @param storage The document storage. (optional)
     * @param file A file to be decrypted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putDecryptDocumentAsync(String outPath, String password, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putDecryptDocumentValidateBeforeCall(outPath, password, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putDocumentDisplayProperties
     * @param name The document name. (required)
     * @param displayProperties The display properties. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putDocumentDisplayPropertiesCall(String name, DisplayProperties displayProperties, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = displayProperties;

        // create path and map variables
        String localVarPath = "/pdf/{name}/displayproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putDocumentDisplayPropertiesValidateBeforeCall(String name, DisplayProperties displayProperties, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putDocumentDisplayProperties(Async)");
        }
        
        // verify the required parameter 'displayProperties' is set
        if (displayProperties == null) {
            throw new ApiException("Missing the required parameter 'displayProperties' when calling putDocumentDisplayProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = putDocumentDisplayPropertiesCall(name, displayProperties, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update document display properties.
     * 
     * @param name The document name. (required)
     * @param displayProperties The display properties. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return DisplayPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DisplayPropertiesResponse putDocumentDisplayProperties(String name, DisplayProperties displayProperties, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DisplayPropertiesResponse> resp = putDocumentDisplayPropertiesWithHttpInfo(name, displayProperties, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DisplayPropertiesResponse> resp = putDocumentDisplayPropertiesWithHttpInfo(name, displayProperties, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update document display properties.
     * 
     * @param name The document name. (required)
     * @param displayProperties The display properties. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;DisplayPropertiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DisplayPropertiesResponse> putDocumentDisplayPropertiesWithHttpInfo(String name, DisplayProperties displayProperties, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putDocumentDisplayPropertiesValidateBeforeCall(name, displayProperties, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DisplayPropertiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update document display properties. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param displayProperties The display properties. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putDocumentDisplayPropertiesAsync(String name, DisplayProperties displayProperties, String storage, String folder, final ApiCallback<DisplayPropertiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putDocumentDisplayPropertiesValidateBeforeCall(name, displayProperties, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DisplayPropertiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putEncryptDocument
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param userPassword User password (encrypted Base64). (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param cryptoAlgorithm Cryptographic algorithm, see CryptoAlgorithm for details. (required)
     * @param permissionsFlags Array of document permissions, see PermissionsFlags for details. (optional)
     * @param usePdf20 Support for revision 6 (Extension 8). (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be encrypted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putEncryptDocumentCall(String outPath, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/encrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (userPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userPassword", userPassword));
        if (ownerPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ownerPassword", ownerPassword));
        if (cryptoAlgorithm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cryptoAlgorithm", cryptoAlgorithm));
        if (permissionsFlags != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "permissionsFlags", permissionsFlags));
        if (usePdf20 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("usePdf20", usePdf20));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putEncryptDocumentValidateBeforeCall(String outPath, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putEncryptDocument(Async)");
        }
        
        // verify the required parameter 'userPassword' is set
        if (userPassword == null) {
            throw new ApiException("Missing the required parameter 'userPassword' when calling putEncryptDocument(Async)");
        }
        
        // verify the required parameter 'ownerPassword' is set
        if (ownerPassword == null) {
            throw new ApiException("Missing the required parameter 'ownerPassword' when calling putEncryptDocument(Async)");
        }
        
        // verify the required parameter 'cryptoAlgorithm' is set
        if (cryptoAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'cryptoAlgorithm' when calling putEncryptDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = putEncryptDocumentCall(outPath, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Encrypt document from content.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param userPassword User password (encrypted Base64). (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param cryptoAlgorithm Cryptographic algorithm, see CryptoAlgorithm for details. (required)
     * @param permissionsFlags Array of document permissions, see PermissionsFlags for details. (optional)
     * @param usePdf20 Support for revision 6 (Extension 8). (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be encrypted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putEncryptDocument(String outPath, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putEncryptDocumentWithHttpInfo(outPath, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putEncryptDocumentWithHttpInfo(outPath, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Encrypt document from content.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param userPassword User password (encrypted Base64). (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param cryptoAlgorithm Cryptographic algorithm, see CryptoAlgorithm for details. (required)
     * @param permissionsFlags Array of document permissions, see PermissionsFlags for details. (optional)
     * @param usePdf20 Support for revision 6 (Extension 8). (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be encrypted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putEncryptDocumentWithHttpInfo(String outPath, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putEncryptDocumentValidateBeforeCall(outPath, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Encrypt document from content. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param userPassword User password (encrypted Base64). (required)
     * @param ownerPassword Owner password (encrypted Base64). (required)
     * @param cryptoAlgorithm Cryptographic algorithm, see CryptoAlgorithm for details. (required)
     * @param permissionsFlags Array of document permissions, see PermissionsFlags for details. (optional)
     * @param usePdf20 Support for revision 6 (Extension 8). (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be encrypted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putEncryptDocumentAsync(String outPath, String userPassword, String ownerPassword, String cryptoAlgorithm, List<PermissionsFlags> permissionsFlags, Boolean usePdf20, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putEncryptDocumentValidateBeforeCall(outPath, userPassword, ownerPassword, cryptoAlgorithm, permissionsFlags, usePdf20, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putEpubInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putEpubInStorageToPdfCall(String name, String srcPath, String storage, String dstFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/epub"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putEpubInStorageToPdfValidateBeforeCall(String name, String srcPath, String storage, String dstFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putEpubInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putEpubInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putEpubInStorageToPdfCall(name, srcPath, storage, dstFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putEpubInStorageToPdf(String name, String srcPath, String storage, String dstFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putEpubInStorageToPdfWithHttpInfo(name, srcPath, storage, dstFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putEpubInStorageToPdfWithHttpInfo(name, srcPath, storage, dstFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert EPUB file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putEpubInStorageToPdfWithHttpInfo(String name, String srcPath, String storage, String dstFolder) throws ApiException {
        com.squareup.okhttp.Call call = putEpubInStorageToPdfValidateBeforeCall(name, srcPath, storage, dstFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert EPUB file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.epub) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putEpubInStorageToPdfAsync(String name, String srcPath, String storage, String dstFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putEpubInStorageToPdfValidateBeforeCall(name, srcPath, storage, dstFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putExportFieldsFromPdfToFdfInStorage
     * @param name The document name. (required)
     * @param fdfOutputFilePath The output Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putExportFieldsFromPdfToFdfInStorageCall(String name, String fdfOutputFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/export/fdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fdfOutputFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fdfOutputFilePath", fdfOutputFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putExportFieldsFromPdfToFdfInStorageValidateBeforeCall(String name, String fdfOutputFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putExportFieldsFromPdfToFdfInStorage(Async)");
        }
        
        // verify the required parameter 'fdfOutputFilePath' is set
        if (fdfOutputFilePath == null) {
            throw new ApiException("Missing the required parameter 'fdfOutputFilePath' when calling putExportFieldsFromPdfToFdfInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = putExportFieldsFromPdfToFdfInStorageCall(name, fdfOutputFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export fields from from PDF in storage to FDF file in storage.
     * 
     * @param name The document name. (required)
     * @param fdfOutputFilePath The output Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putExportFieldsFromPdfToFdfInStorage(String name, String fdfOutputFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putExportFieldsFromPdfToFdfInStorageWithHttpInfo(name, fdfOutputFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putExportFieldsFromPdfToFdfInStorageWithHttpInfo(name, fdfOutputFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Export fields from from PDF in storage to FDF file in storage.
     * 
     * @param name The document name. (required)
     * @param fdfOutputFilePath The output Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putExportFieldsFromPdfToFdfInStorageWithHttpInfo(String name, String fdfOutputFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putExportFieldsFromPdfToFdfInStorageValidateBeforeCall(name, fdfOutputFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export fields from from PDF in storage to FDF file in storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fdfOutputFilePath The output Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putExportFieldsFromPdfToFdfInStorageAsync(String name, String fdfOutputFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putExportFieldsFromPdfToFdfInStorageValidateBeforeCall(name, fdfOutputFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putExportFieldsFromPdfToXfdfInStorage
     * @param name The document name. (required)
     * @param xfdfOutputFilePath The output xfdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putExportFieldsFromPdfToXfdfInStorageCall(String name, String xfdfOutputFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/export/xfdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (xfdfOutputFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xfdfOutputFilePath", xfdfOutputFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putExportFieldsFromPdfToXfdfInStorageValidateBeforeCall(String name, String xfdfOutputFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putExportFieldsFromPdfToXfdfInStorage(Async)");
        }
        
        // verify the required parameter 'xfdfOutputFilePath' is set
        if (xfdfOutputFilePath == null) {
            throw new ApiException("Missing the required parameter 'xfdfOutputFilePath' when calling putExportFieldsFromPdfToXfdfInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = putExportFieldsFromPdfToXfdfInStorageCall(name, xfdfOutputFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export fields from from PDF in storage to XFDF file in storage.
     * 
     * @param name The document name. (required)
     * @param xfdfOutputFilePath The output xfdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putExportFieldsFromPdfToXfdfInStorage(String name, String xfdfOutputFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putExportFieldsFromPdfToXfdfInStorageWithHttpInfo(name, xfdfOutputFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putExportFieldsFromPdfToXfdfInStorageWithHttpInfo(name, xfdfOutputFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Export fields from from PDF in storage to XFDF file in storage.
     * 
     * @param name The document name. (required)
     * @param xfdfOutputFilePath The output xfdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putExportFieldsFromPdfToXfdfInStorageWithHttpInfo(String name, String xfdfOutputFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putExportFieldsFromPdfToXfdfInStorageValidateBeforeCall(name, xfdfOutputFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export fields from from PDF in storage to XFDF file in storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param xfdfOutputFilePath The output xfdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putExportFieldsFromPdfToXfdfInStorageAsync(String name, String xfdfOutputFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putExportFieldsFromPdfToXfdfInStorageValidateBeforeCall(name, xfdfOutputFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putExportFieldsFromPdfToXmlInStorage
     * @param name The document name. (required)
     * @param xmlOutputFilePath The output xml file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putExportFieldsFromPdfToXmlInStorageCall(String name, String xmlOutputFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/export/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (xmlOutputFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xmlOutputFilePath", xmlOutputFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putExportFieldsFromPdfToXmlInStorageValidateBeforeCall(String name, String xmlOutputFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putExportFieldsFromPdfToXmlInStorage(Async)");
        }
        
        // verify the required parameter 'xmlOutputFilePath' is set
        if (xmlOutputFilePath == null) {
            throw new ApiException("Missing the required parameter 'xmlOutputFilePath' when calling putExportFieldsFromPdfToXmlInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = putExportFieldsFromPdfToXmlInStorageCall(name, xmlOutputFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export fields from from PDF in storage to XML file in storage.
     * 
     * @param name The document name. (required)
     * @param xmlOutputFilePath The output xml file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putExportFieldsFromPdfToXmlInStorage(String name, String xmlOutputFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putExportFieldsFromPdfToXmlInStorageWithHttpInfo(name, xmlOutputFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putExportFieldsFromPdfToXmlInStorageWithHttpInfo(name, xmlOutputFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Export fields from from PDF in storage to XML file in storage.
     * 
     * @param name The document name. (required)
     * @param xmlOutputFilePath The output xml file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putExportFieldsFromPdfToXmlInStorageWithHttpInfo(String name, String xmlOutputFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putExportFieldsFromPdfToXmlInStorageValidateBeforeCall(name, xmlOutputFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export fields from from PDF in storage to XML file in storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param xmlOutputFilePath The output xml file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putExportFieldsFromPdfToXmlInStorageAsync(String name, String xmlOutputFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putExportFieldsFromPdfToXmlInStorageValidateBeforeCall(name, xmlOutputFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFieldsFlatten
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFieldsFlattenCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/flatten"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFieldsFlattenValidateBeforeCall(String name, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putFieldsFlatten(Async)");
        }
        

        com.squareup.okhttp.Call call = putFieldsFlattenCall(name, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Flatten form fields in document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putFieldsFlatten(String name, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putFieldsFlattenWithHttpInfo(name, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putFieldsFlattenWithHttpInfo(name, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Flatten form fields in document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putFieldsFlattenWithHttpInfo(String name, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putFieldsFlattenValidateBeforeCall(name, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Flatten form fields in document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFieldsFlattenAsync(String name, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFieldsFlattenValidateBeforeCall(name, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFileAttachmentAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFileAttachmentAnnotationCall(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFileAttachmentAnnotationValidateBeforeCall(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putFileAttachmentAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putFileAttachmentAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putFileAttachmentAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putFileAttachmentAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document FileAttachment annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FileAttachmentAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileAttachmentAnnotationResponse putFileAttachmentAnnotation(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FileAttachmentAnnotationResponse> resp = putFileAttachmentAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FileAttachmentAnnotationResponse> resp = putFileAttachmentAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document FileAttachment annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FileAttachmentAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileAttachmentAnnotationResponse> putFileAttachmentAnnotationWithHttpInfo(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putFileAttachmentAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document FileAttachment annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFileAttachmentAnnotationAsync(String name, String annotationId, FileAttachmentAnnotation annotation, String storage, String folder, final ApiCallback<FileAttachmentAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFileAttachmentAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileAttachmentAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFileAttachmentAnnotationDataExtract
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFolder The output folder. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFileAttachmentAnnotationDataExtractCall(String name, String annotationId, String outFolder, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/fileattachment/{annotationId}/data/extract"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outFolder", outFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFileAttachmentAnnotationDataExtractValidateBeforeCall(String name, String annotationId, String outFolder, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putFileAttachmentAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putFileAttachmentAnnotationDataExtract(Async)");
        }
        

        com.squareup.okhttp.Call call = putFileAttachmentAnnotationDataExtractCall(name, annotationId, outFolder, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document FileAttachment annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFolder The output folder. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putFileAttachmentAnnotationDataExtract(String name, String annotationId, String outFolder, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putFileAttachmentAnnotationDataExtractWithHttpInfo(name, annotationId, outFolder, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putFileAttachmentAnnotationDataExtractWithHttpInfo(name, annotationId, outFolder, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document FileAttachment annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFolder The output folder. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putFileAttachmentAnnotationDataExtractWithHttpInfo(String name, String annotationId, String outFolder, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putFileAttachmentAnnotationDataExtractValidateBeforeCall(name, annotationId, outFolder, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document FileAttachment annotation content to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFolder The output folder. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFileAttachmentAnnotationDataExtractAsync(String name, String annotationId, String outFolder, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFileAttachmentAnnotationDataExtractValidateBeforeCall(name, annotationId, outFolder, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putFreeTextAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putFreeTextAnnotationCall(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/freetext/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putFreeTextAnnotationValidateBeforeCall(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putFreeTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putFreeTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putFreeTextAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putFreeTextAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document free text annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FreeTextAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FreeTextAnnotationResponse putFreeTextAnnotation(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FreeTextAnnotationResponse> resp = putFreeTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FreeTextAnnotationResponse> resp = putFreeTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document free text annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FreeTextAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FreeTextAnnotationResponse> putFreeTextAnnotationWithHttpInfo(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putFreeTextAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document free text annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putFreeTextAnnotationAsync(String name, String annotationId, FreeTextAnnotation annotation, String storage, String folder, final ApiCallback<FreeTextAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putFreeTextAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FreeTextAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putHighlightAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putHighlightAnnotationCall(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/highlight/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putHighlightAnnotationValidateBeforeCall(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putHighlightAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putHighlightAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putHighlightAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putHighlightAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document highlight annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return HighlightAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HighlightAnnotationResponse putHighlightAnnotation(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<HighlightAnnotationResponse> resp = putHighlightAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<HighlightAnnotationResponse> resp = putHighlightAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document highlight annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;HighlightAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HighlightAnnotationResponse> putHighlightAnnotationWithHttpInfo(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putHighlightAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<HighlightAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document highlight annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putHighlightAnnotationAsync(String name, String annotationId, HighlightAnnotation annotation, String storage, String folder, final ApiCallback<HighlightAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putHighlightAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HighlightAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putHtmlInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putHtmlInStorageToPdfCall(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/html"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (htmlFileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlFileName", htmlFileName));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putHtmlInStorageToPdfValidateBeforeCall(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putHtmlInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putHtmlInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putHtmlInStorageToPdfCall(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putHtmlInStorageToPdf(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putHtmlInStorageToPdfWithHttpInfo(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putHtmlInStorageToPdfWithHttpInfo(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert HTML file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putHtmlInStorageToPdfWithHttpInfo(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putHtmlInStorageToPdfValidateBeforeCall(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert HTML file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.zip) (required)
     * @param htmlFileName Name of HTML file in ZIP. (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putHtmlInStorageToPdfAsync(String name, String srcPath, String htmlFileName, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putHtmlInStorageToPdfValidateBeforeCall(name, srcPath, htmlFileName, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageExtractAsGif
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsGifCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageExtractAsGifValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageExtractAsGif(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putImageExtractAsGif(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageExtractAsGifCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in GIF format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageExtractAsGif(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImageExtractAsGifWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in GIF format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageExtractAsGifWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImageExtractAsGifValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in GIF format to folder (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsGifAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageExtractAsGifValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageExtractAsJpeg
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsJpegCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageExtractAsJpegValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageExtractAsJpeg(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putImageExtractAsJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageExtractAsJpegCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in JPEG format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageExtractAsJpeg(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImageExtractAsJpegWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in JPEG format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageExtractAsJpegWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImageExtractAsJpegValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in JPEG format to folder (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsJpegAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageExtractAsJpegValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageExtractAsPng
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsPngCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageExtractAsPngValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageExtractAsPng(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putImageExtractAsPng(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageExtractAsPngCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in PNG format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageExtractAsPng(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImageExtractAsPngWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in PNG format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageExtractAsPngWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImageExtractAsPngValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in PNG format to folder (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsPngAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageExtractAsPngValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageExtractAsTiff
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsTiffCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}/extract/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageExtractAsTiffValidateBeforeCall(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageExtractAsTiff(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putImageExtractAsTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageExtractAsTiffCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document image in TIFF format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageExtractAsTiff(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImageExtractAsTiffWithHttpInfo(name, imageId, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document image in TIFF format to folder
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageExtractAsTiffWithHttpInfo(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImageExtractAsTiffValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document image in TIFF format to folder (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId Image ID. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageExtractAsTiffAsync(String name, String imageId, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageExtractAsTiffValidateBeforeCall(name, imageId, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImageInStorageToPdf
     * @param name The document name. (required)
     * @param imageTemplates ImageTemplatesRequestImage templates (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImageInStorageToPdfCall(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = imageTemplates;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImageInStorageToPdfValidateBeforeCall(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImageInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'imageTemplates' is set
        if (imageTemplates == null) {
            throw new ApiException("Missing the required parameter 'imageTemplates' when calling putImageInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putImageInStorageToPdfCall(name, imageTemplates, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert image file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param imageTemplates ImageTemplatesRequestImage templates (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImageInStorageToPdf(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImageInStorageToPdfWithHttpInfo(name, imageTemplates, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImageInStorageToPdfWithHttpInfo(name, imageTemplates, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert image file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param imageTemplates ImageTemplatesRequestImage templates (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImageInStorageToPdfWithHttpInfo(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putImageInStorageToPdfValidateBeforeCall(name, imageTemplates, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert image file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageTemplates ImageTemplatesRequestImage templates (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImageInStorageToPdfAsync(String name, ImageTemplatesRequest imageTemplates, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImageInStorageToPdfValidateBeforeCall(name, imageTemplates, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImagesExtractAsGif
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsGifCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImagesExtractAsGifValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesExtractAsGif(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putImagesExtractAsGif(Async)");
        }
        

        com.squareup.okhttp.Call call = putImagesExtractAsGifCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document images in GIF format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImagesExtractAsGif(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImagesExtractAsGifWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImagesExtractAsGifWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document images in GIF format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImagesExtractAsGifWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImagesExtractAsGifValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document images in GIF format to folder. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsGifAsync(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImagesExtractAsGifValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImagesExtractAsJpeg
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsJpegCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImagesExtractAsJpegValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesExtractAsJpeg(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putImagesExtractAsJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = putImagesExtractAsJpegCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document images in JPEG format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImagesExtractAsJpeg(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImagesExtractAsJpegWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImagesExtractAsJpegWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document images in JPEG format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImagesExtractAsJpegWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImagesExtractAsJpegValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document images in JPEG format to folder. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsJpegAsync(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImagesExtractAsJpegValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImagesExtractAsPng
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsPngCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImagesExtractAsPngValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesExtractAsPng(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putImagesExtractAsPng(Async)");
        }
        

        com.squareup.okhttp.Call call = putImagesExtractAsPngCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document images in PNG format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImagesExtractAsPng(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImagesExtractAsPngWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImagesExtractAsPngWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document images in PNG format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImagesExtractAsPngWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImagesExtractAsPngValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document images in PNG format to folder. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsPngAsync(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImagesExtractAsPngValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImagesExtractAsTiff
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsTiffCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/images/extract/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (destFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destFolder", destFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImagesExtractAsTiffValidateBeforeCall(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesExtractAsTiff(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putImagesExtractAsTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putImagesExtractAsTiffCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document images in TIFF format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImagesExtractAsTiff(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImagesExtractAsTiffWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImagesExtractAsTiffWithHttpInfo(name, pageNumber, width, height, storage, folder, destFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document images in TIFF format to folder.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImagesExtractAsTiffWithHttpInfo(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder) throws ApiException {
        com.squareup.okhttp.Call call = putImagesExtractAsTiffValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document images in TIFF format to folder. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param destFolder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImagesExtractAsTiffAsync(String name, Integer pageNumber, Integer width, Integer height, String storage, String folder, String destFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImagesExtractAsTiffValidateBeforeCall(name, pageNumber, width, height, storage, folder, destFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImportFieldsFromFdfInStorage
     * @param name The document name. (required)
     * @param fdfFilePath The Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImportFieldsFromFdfInStorageCall(String name, String fdfFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/fdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fdfFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fdfFilePath", fdfFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImportFieldsFromFdfInStorageValidateBeforeCall(String name, String fdfFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImportFieldsFromFdfInStorage(Async)");
        }
        
        // verify the required parameter 'fdfFilePath' is set
        if (fdfFilePath == null) {
            throw new ApiException("Missing the required parameter 'fdfFilePath' when calling putImportFieldsFromFdfInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = putImportFieldsFromFdfInStorageCall(name, fdfFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields from FDF file in storage.
     * 
     * @param name The document name. (required)
     * @param fdfFilePath The Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImportFieldsFromFdfInStorage(String name, String fdfFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImportFieldsFromFdfInStorageWithHttpInfo(name, fdfFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImportFieldsFromFdfInStorageWithHttpInfo(name, fdfFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields from FDF file in storage.
     * 
     * @param name The document name. (required)
     * @param fdfFilePath The Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImportFieldsFromFdfInStorageWithHttpInfo(String name, String fdfFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putImportFieldsFromFdfInStorageValidateBeforeCall(name, fdfFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields from FDF file in storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fdfFilePath The Fdf file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImportFieldsFromFdfInStorageAsync(String name, String fdfFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImportFieldsFromFdfInStorageValidateBeforeCall(name, fdfFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImportFieldsFromXfdfInStorage
     * @param name The document name. (required)
     * @param xfdfFilePath The XFDF file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImportFieldsFromXfdfInStorageCall(String name, String xfdfFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/xfdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (xfdfFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xfdfFilePath", xfdfFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImportFieldsFromXfdfInStorageValidateBeforeCall(String name, String xfdfFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImportFieldsFromXfdfInStorage(Async)");
        }
        
        // verify the required parameter 'xfdfFilePath' is set
        if (xfdfFilePath == null) {
            throw new ApiException("Missing the required parameter 'xfdfFilePath' when calling putImportFieldsFromXfdfInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = putImportFieldsFromXfdfInStorageCall(name, xfdfFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields from XFDF file in storage.
     * 
     * @param name The document name. (required)
     * @param xfdfFilePath The XFDF file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImportFieldsFromXfdfInStorage(String name, String xfdfFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImportFieldsFromXfdfInStorageWithHttpInfo(name, xfdfFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImportFieldsFromXfdfInStorageWithHttpInfo(name, xfdfFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields from XFDF file in storage.
     * 
     * @param name The document name. (required)
     * @param xfdfFilePath The XFDF file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImportFieldsFromXfdfInStorageWithHttpInfo(String name, String xfdfFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putImportFieldsFromXfdfInStorageValidateBeforeCall(name, xfdfFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields from XFDF file in storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param xfdfFilePath The XFDF file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImportFieldsFromXfdfInStorageAsync(String name, String xfdfFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImportFieldsFromXfdfInStorageValidateBeforeCall(name, xfdfFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putImportFieldsFromXmlInStorage
     * @param name The document name. (required)
     * @param xmlFilePath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putImportFieldsFromXmlInStorageCall(String name, String xmlFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/import/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (xmlFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xmlFilePath", xmlFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putImportFieldsFromXmlInStorageValidateBeforeCall(String name, String xmlFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImportFieldsFromXmlInStorage(Async)");
        }
        
        // verify the required parameter 'xmlFilePath' is set
        if (xmlFilePath == null) {
            throw new ApiException("Missing the required parameter 'xmlFilePath' when calling putImportFieldsFromXmlInStorage(Async)");
        }
        

        com.squareup.okhttp.Call call = putImportFieldsFromXmlInStorageCall(name, xmlFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields from XML file in storage.
     * 
     * @param name The document name. (required)
     * @param xmlFilePath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putImportFieldsFromXmlInStorage(String name, String xmlFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putImportFieldsFromXmlInStorageWithHttpInfo(name, xmlFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putImportFieldsFromXmlInStorageWithHttpInfo(name, xmlFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields from XML file in storage.
     * 
     * @param name The document name. (required)
     * @param xmlFilePath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putImportFieldsFromXmlInStorageWithHttpInfo(String name, String xmlFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putImportFieldsFromXmlInStorageValidateBeforeCall(name, xmlFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields from XML file in storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param xmlFilePath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putImportFieldsFromXmlInStorageAsync(String name, String xmlFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putImportFieldsFromXmlInStorageValidateBeforeCall(name, xmlFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putInkAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putInkAnnotationCall(String name, String annotationId, InkAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/ink/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putInkAnnotationValidateBeforeCall(String name, String annotationId, InkAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putInkAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putInkAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putInkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putInkAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document ink annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return InkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InkAnnotationResponse putInkAnnotation(String name, String annotationId, InkAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<InkAnnotationResponse> resp = putInkAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<InkAnnotationResponse> resp = putInkAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document ink annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;InkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InkAnnotationResponse> putInkAnnotationWithHttpInfo(String name, String annotationId, InkAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putInkAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<InkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document ink annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putInkAnnotationAsync(String name, String annotationId, InkAnnotation annotation, String storage, String folder, final ApiCallback<InkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putInkAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putLineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putLineAnnotationCall(String name, String annotationId, LineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/line/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putLineAnnotationValidateBeforeCall(String name, String annotationId, LineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putLineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putLineAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document line annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LineAnnotationResponse putLineAnnotation(String name, String annotationId, LineAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LineAnnotationResponse> resp = putLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<LineAnnotationResponse> resp = putLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document line annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LineAnnotationResponse> putLineAnnotationWithHttpInfo(String name, String annotationId, LineAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putLineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document line annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putLineAnnotationAsync(String name, String annotationId, LineAnnotation annotation, String storage, String folder, final ApiCallback<LineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putLineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putLinkAnnotation
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param link Link annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putLinkAnnotationCall(String name, String linkId, LinkAnnotation link, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = link;

        // create path and map variables
        String localVarPath = "/pdf/{name}/links/{linkId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "linkId" + "\\}", apiClient.escapePathSegmentString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putLinkAnnotationValidateBeforeCall(String name, String linkId, LinkAnnotation link, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling putLinkAnnotation(Async)");
        }
        
        // verify the required parameter 'link' is set
        if (link == null) {
            throw new ApiException("Missing the required parameter 'link' when calling putLinkAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putLinkAnnotationCall(name, linkId, link, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document page link annotations
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param link Link annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return LinkAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinkAnnotationResponse putLinkAnnotation(String name, String linkId, LinkAnnotation link, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<LinkAnnotationResponse> resp = putLinkAnnotationWithHttpInfo(name, linkId, link, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<LinkAnnotationResponse> resp = putLinkAnnotationWithHttpInfo(name, linkId, link, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document page link annotations
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param link Link annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;LinkAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinkAnnotationResponse> putLinkAnnotationWithHttpInfo(String name, String linkId, LinkAnnotation link, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putLinkAnnotationValidateBeforeCall(name, linkId, link, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document page link annotations (asynchronously)
     * 
     * @param name The document name. (required)
     * @param linkId The link ID. (required)
     * @param link Link annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putLinkAnnotationAsync(String name, String linkId, LinkAnnotation link, String storage, String folder, final ApiCallback<LinkAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putLinkAnnotationValidateBeforeCall(name, linkId, link, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinkAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putListBoxField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putListBoxFieldCall(String name, String fieldName, ListBoxField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/listbox/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putListBoxFieldValidateBeforeCall(String name, String fieldName, ListBoxField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putListBoxField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putListBoxField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling putListBoxField(Async)");
        }
        

        com.squareup.okhttp.Call call = putListBoxFieldCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document listbox field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ListBoxFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListBoxFieldResponse putListBoxField(String name, String fieldName, ListBoxField field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ListBoxFieldResponse> resp = putListBoxFieldWithHttpInfo(name, fieldName, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ListBoxFieldResponse> resp = putListBoxFieldWithHttpInfo(name, fieldName, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document listbox field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ListBoxFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListBoxFieldResponse> putListBoxFieldWithHttpInfo(String name, String fieldName, ListBoxField field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putListBoxFieldValidateBeforeCall(name, fieldName, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ListBoxFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document listbox field (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putListBoxFieldAsync(String name, String fieldName, ListBoxField field, String storage, String folder, final ApiCallback<ListBoxFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putListBoxFieldValidateBeforeCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListBoxFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMarkdownInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.md) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putMarkdownInStorageToPdfCall(String name, String srcPath, String storage, String dstFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/markdown"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putMarkdownInStorageToPdfValidateBeforeCall(String name, String srcPath, String storage, String dstFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putMarkdownInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putMarkdownInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putMarkdownInStorageToPdfCall(name, srcPath, storage, dstFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert MD file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.md) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putMarkdownInStorageToPdf(String name, String srcPath, String storage, String dstFolder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putMarkdownInStorageToPdfWithHttpInfo(name, srcPath, storage, dstFolder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putMarkdownInStorageToPdfWithHttpInfo(name, srcPath, storage, dstFolder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert MD file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.md) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putMarkdownInStorageToPdfWithHttpInfo(String name, String srcPath, String storage, String dstFolder) throws ApiException {
        com.squareup.okhttp.Call call = putMarkdownInStorageToPdfValidateBeforeCall(name, srcPath, storage, dstFolder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert MD file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.md) (required)
     * @param storage The document storage. (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putMarkdownInStorageToPdfAsync(String name, String srcPath, String storage, String dstFolder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putMarkdownInStorageToPdfValidateBeforeCall(name, srcPath, storage, dstFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMergeDocuments
     * @param name Resulting document name. (required)
     * @param mergeDocuments MergeDocuments with a list of documents. (required)
     * @param storage Resulting document storage. (optional)
     * @param folder Resulting document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putMergeDocumentsCall(String name, MergeDocuments mergeDocuments, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mergeDocuments;

        // create path and map variables
        String localVarPath = "/pdf/{name}/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putMergeDocumentsValidateBeforeCall(String name, MergeDocuments mergeDocuments, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putMergeDocuments(Async)");
        }
        
        // verify the required parameter 'mergeDocuments' is set
        if (mergeDocuments == null) {
            throw new ApiException("Missing the required parameter 'mergeDocuments' when calling putMergeDocuments(Async)");
        }
        

        com.squareup.okhttp.Call call = putMergeDocumentsCall(name, mergeDocuments, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Merge a list of documents.
     * 
     * @param name Resulting document name. (required)
     * @param mergeDocuments MergeDocuments with a list of documents. (required)
     * @param storage Resulting document storage. (optional)
     * @param folder Resulting document folder. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentResponse putMergeDocuments(String name, MergeDocuments mergeDocuments, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentResponse> resp = putMergeDocumentsWithHttpInfo(name, mergeDocuments, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentResponse> resp = putMergeDocumentsWithHttpInfo(name, mergeDocuments, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Merge a list of documents.
     * 
     * @param name Resulting document name. (required)
     * @param mergeDocuments MergeDocuments with a list of documents. (required)
     * @param storage Resulting document storage. (optional)
     * @param folder Resulting document folder. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentResponse> putMergeDocumentsWithHttpInfo(String name, MergeDocuments mergeDocuments, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putMergeDocumentsValidateBeforeCall(name, mergeDocuments, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge a list of documents. (asynchronously)
     * 
     * @param name Resulting document name. (required)
     * @param mergeDocuments MergeDocuments with a list of documents. (required)
     * @param storage Resulting document storage. (optional)
     * @param folder Resulting document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putMergeDocumentsAsync(String name, MergeDocuments mergeDocuments, String storage, String folder, final ApiCallback<DocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putMergeDocumentsValidateBeforeCall(name, mergeDocuments, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMhtInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putMhtInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/mht"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putMhtInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putMhtInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putMhtInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putMhtInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putMhtInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putMhtInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putMhtInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert MHT file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putMhtInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putMhtInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert MHT file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.mht) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putMhtInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putMhtInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMovieAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putMovieAnnotationCall(String name, String annotationId, MovieAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/movie/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putMovieAnnotationValidateBeforeCall(String name, String annotationId, MovieAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putMovieAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putMovieAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putMovieAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putMovieAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document movie annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return MovieAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MovieAnnotationResponse putMovieAnnotation(String name, String annotationId, MovieAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<MovieAnnotationResponse> resp = putMovieAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<MovieAnnotationResponse> resp = putMovieAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document movie annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;MovieAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MovieAnnotationResponse> putMovieAnnotationWithHttpInfo(String name, String annotationId, MovieAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putMovieAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<MovieAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document movie annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putMovieAnnotationAsync(String name, String annotationId, MovieAnnotation annotation, String storage, String folder, final ApiCallback<MovieAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putMovieAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MovieAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageAddStamp
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamp Stamp with data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageAddStampCall(String name, Integer pageNumber, Stamp stamp, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = stamp;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/stamp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageAddStampValidateBeforeCall(String name, Integer pageNumber, Stamp stamp, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageAddStamp(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageAddStamp(Async)");
        }
        
        // verify the required parameter 'stamp' is set
        if (stamp == null) {
            throw new ApiException("Missing the required parameter 'stamp' when calling putPageAddStamp(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageAddStampCall(name, pageNumber, stamp, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add page stamp.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamp Stamp with data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageAddStamp(String name, Integer pageNumber, Stamp stamp, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageAddStampWithHttpInfo(name, pageNumber, stamp, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPageAddStampWithHttpInfo(name, pageNumber, stamp, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add page stamp.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamp Stamp with data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageAddStampWithHttpInfo(String name, Integer pageNumber, Stamp stamp, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPageAddStampValidateBeforeCall(name, pageNumber, stamp, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add page stamp. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param stamp Stamp with data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageAddStampAsync(String name, Integer pageNumber, Stamp stamp, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageAddStampValidateBeforeCall(name, pageNumber, stamp, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToBmp
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToBmpCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/bmp"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToBmpValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToBmp(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToBmp(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToBmp(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToBmpCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to bmp image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToBmp(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToBmpWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToBmpWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to bmp image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToBmpWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToBmpValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to bmp image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToBmpAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToBmpValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToEmf
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToEmfCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/emf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToEmfValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToEmf(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToEmf(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToEmf(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToEmfCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to emf image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToEmf(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToEmfWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToEmfWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to emf image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToEmfWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToEmfValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to emf image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToEmfAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToEmfValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToGif
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToGifCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/gif"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToGifValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToGif(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToGif(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToGif(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToGifCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to gif image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToGif(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToGifWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToGifWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to gif image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToGifWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToGifValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to gif image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToGifAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToGifValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToJpeg
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToJpegCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/jpeg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToJpegValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToJpeg(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToJpeg(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToJpeg(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToJpegCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Jpeg image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToJpeg(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToJpegWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToJpegWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Jpeg image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToJpegWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToJpegValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Jpeg image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToJpegAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToJpegValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToPng
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToPngCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/png"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToPngValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToPng(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToPng(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToPng(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToPngCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to png image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToPng(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToPngWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToPngWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to png image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToPngWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToPngValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to png image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToPngAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToPngValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPageConvertToTiff
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToTiffCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/pages/{pageNumber}/convert/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "pageNumber" + "\\}", apiClient.escapePathSegmentString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPageConvertToTiffValidateBeforeCall(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPageConvertToTiff(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling putPageConvertToTiff(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPageConvertToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putPageConvertToTiffCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert document page to Tiff image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPageConvertToTiff(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPageConvertToTiffWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPageConvertToTiffWithHttpInfo(name, pageNumber, outPath, width, height, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert document page to Tiff image and upload resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPageConvertToTiffWithHttpInfo(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = putPageConvertToTiffValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert document page to Tiff image and upload resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param pageNumber The page number. (required)
     * @param outPath The out path of result image. (required)
     * @param width The converted image width. (optional, default to 0)
     * @param height The converted image height. (optional, default to 0)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPageConvertToTiffAsync(String name, Integer pageNumber, String outPath, Integer width, Integer height, String folder, String storage, String password, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPageConvertToTiffValidateBeforeCall(name, pageNumber, outPath, width, height, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPclInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPclInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/pcl"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPclInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPclInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putPclInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putPclInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPclInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPclInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPclInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PCL file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPclInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPclInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PCL file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pcl) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPclInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPclInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfAInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pdf) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param dontOptimize If set, document resources will not be optimized. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfAInStorageToPdfCall(String name, String srcPath, String dstFolder, Boolean dontOptimize, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/pdfa"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (dontOptimize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dontOptimize", dontOptimize));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfAInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, Boolean dontOptimize, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfAInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putPdfAInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfAInStorageToPdfCall(name, srcPath, dstFolder, dontOptimize, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PDFA file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pdf) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param dontOptimize If set, document resources will not be optimized. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfAInStorageToPdf(String name, String srcPath, String dstFolder, Boolean dontOptimize, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfAInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, dontOptimize, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfAInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, dontOptimize, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PDFA file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pdf) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param dontOptimize If set, document resources will not be optimized. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfAInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, Boolean dontOptimize, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfAInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, dontOptimize, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PDFA file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.pdf) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param dontOptimize If set, document resources will not be optimized. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfAInStorageToPdfAsync(String name, String srcPath, String dstFolder, Boolean dontOptimize, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfAInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, dontOptimize, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToDoc
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToDocCall(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, String password, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/doc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (addReturnToLineEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addReturnToLineEnd", addReturnToLineEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (imageResolutionX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionX", imageResolutionX));
        if (imageResolutionY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionY", imageResolutionY));
        if (maxDistanceBetweenTextLines != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxDistanceBetweenTextLines", maxDistanceBetweenTextLines));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        if (recognizeBullets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recognizeBullets", recognizeBullets));
        if (relativeHorizontalProximity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("relativeHorizontalProximity", relativeHorizontalProximity));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToDocValidateBeforeCall(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, String password, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToDocCall(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, password, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToDoc(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, String password, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToDocWithHttpInfo(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, password, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToDocWithHttpInfo(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, password, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to DOC format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToDocWithHttpInfo(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, String password, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToDocValidateBeforeCall(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, password, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to DOC format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToDocAsync(String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String storage, String password, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToDocValidateBeforeCall(outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, storage, password, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToEpub
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToEpubCall(String outPath, String contentRecognitionMode, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/epub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (contentRecognitionMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentRecognitionMode", contentRecognitionMode));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToEpubValidateBeforeCall(String outPath, String contentRecognitionMode, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToEpub(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToEpubCall(outPath, contentRecognitionMode, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToEpub(String outPath, String contentRecognitionMode, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToEpubWithHttpInfo(outPath, contentRecognitionMode, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToEpubWithHttpInfo(outPath, contentRecognitionMode, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to EPUB format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToEpubWithHttpInfo(String outPath, String contentRecognitionMode, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToEpubValidateBeforeCall(outPath, contentRecognitionMode, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to EPUB format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToEpubAsync(String outPath, String contentRecognitionMode, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToEpubValidateBeforeCall(outPath, contentRecognitionMode, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToHtml
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param outputFormat This parameter determines the type of result. The zip archive will be uploaded into the storage if the parameter is \&quot;Zip\&quot; or missed (default). In case of the \&quot;Folder\&quot;, all resulting files and directories will be uploaded to the folder of the resulting HTML file. (optional, default to Zip)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToHtmlCall(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (additionalMarginWidthInPoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additionalMarginWidthInPoints", additionalMarginWidthInPoints));
        if (compressSvgGraphicsIfAny != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressSvgGraphicsIfAny", compressSvgGraphicsIfAny));
        if (convertMarkedContentToLayers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convertMarkedContentToLayers", convertMarkedContentToLayers));
        if (defaultFontName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultFontName", defaultFontName));
        if (documentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("documentType", documentType));
        if (fixedLayout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fixedLayout", fixedLayout));
        if (imageResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolution", imageResolution));
        if (minimalLineWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimalLineWidth", minimalLineWidth));
        if (preventGlyphsGrouping != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preventGlyphsGrouping", preventGlyphsGrouping));
        if (splitCssIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitCssIntoPages", splitCssIntoPages));
        if (splitIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitIntoPages", splitIntoPages));
        if (useZOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useZOrder", useZOrder));
        if (antialiasingProcessing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("antialiasingProcessing", antialiasingProcessing));
        if (cssClassNamesPrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cssClassNamesPrefix", cssClassNamesPrefix));
        if (explicitListOfSavedPages != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "explicitListOfSavedPages", explicitListOfSavedPages));
        if (fontEncodingStrategy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontEncodingStrategy", fontEncodingStrategy));
        if (fontSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSavingMode", fontSavingMode));
        if (htmlMarkupGenerationMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlMarkupGenerationMode", htmlMarkupGenerationMode));
        if (lettersPositioningMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lettersPositioningMethod", lettersPositioningMethod));
        if (pagesFlowTypeDependsOnViewersScreenSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesFlowTypeDependsOnViewersScreenSize", pagesFlowTypeDependsOnViewersScreenSize));
        if (partsEmbeddingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partsEmbeddingMode", partsEmbeddingMode));
        if (rasterImagesSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rasterImagesSavingMode", rasterImagesSavingMode));
        if (removeEmptyAreasOnTopAndBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeEmptyAreasOnTopAndBottom", removeEmptyAreasOnTopAndBottom));
        if (saveShadowedTextsAsTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveShadowedTextsAsTransparentTexts", saveShadowedTextsAsTransparentTexts));
        if (saveTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveTransparentTexts", saveTransparentTexts));
        if (specialFolderForAllImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForAllImages", specialFolderForAllImages));
        if (specialFolderForSvgImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForSvgImages", specialFolderForSvgImages));
        if (trySaveTextUnderliningAndStrikeoutingInCss != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trySaveTextUnderliningAndStrikeoutingInCss", trySaveTextUnderliningAndStrikeoutingInCss));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (flowLayoutParagraphFullWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flowLayoutParagraphFullWidth", flowLayoutParagraphFullWidth));
        if (outputFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputFormat", outputFormat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToHtmlValidateBeforeCall(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToHtml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToHtmlCall(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, flowLayoutParagraphFullWidth, outputFormat, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to Html format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param outputFormat This parameter determines the type of result. The zip archive will be uploaded into the storage if the parameter is \&quot;Zip\&quot; or missed (default). In case of the \&quot;Folder\&quot;, all resulting files and directories will be uploaded to the folder of the resulting HTML file. (optional, default to Zip)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToHtml(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToHtmlWithHttpInfo(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, flowLayoutParagraphFullWidth, outputFormat, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToHtmlWithHttpInfo(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, flowLayoutParagraphFullWidth, outputFormat, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to Html format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param outputFormat This parameter determines the type of result. The zip archive will be uploaded into the storage if the parameter is \&quot;Zip\&quot; or missed (default). In case of the \&quot;Folder\&quot;, all resulting files and directories will be uploaded to the folder of the resulting HTML file. (optional, default to Zip)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToHtmlWithHttpInfo(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToHtmlValidateBeforeCall(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, flowLayoutParagraphFullWidth, outputFormat, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to Html format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param outputFormat This parameter determines the type of result. The zip archive will be uploaded into the storage if the parameter is \&quot;Zip\&quot; or missed (default). In case of the \&quot;Folder\&quot;, all resulting files and directories will be uploaded to the folder of the resulting HTML file. (optional, default to Zip)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToHtmlAsync(String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToHtmlValidateBeforeCall(outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, storage, flowLayoutParagraphFullWidth, outputFormat, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToMobiXml
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToMobiXmlCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/mobixml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToMobiXmlValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToMobiXml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToMobiXmlCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to MOBIXML format and uploads resulting ZIP archive file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToMobiXml(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToMobiXmlWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToMobiXmlWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to MOBIXML format and uploads resulting ZIP archive file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToMobiXmlWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToMobiXmlValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to MOBIXML format and uploads resulting ZIP archive file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToMobiXmlAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToMobiXmlValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToPdfA
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToPdfACall(String outPath, String type, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/pdfa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToPdfAValidateBeforeCall(String outPath, String type, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToPdfA(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putPdfInRequestToPdfA(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToPdfACall(outPath, type, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToPdfA(String outPath, String type, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToPdfAWithHttpInfo(outPath, type, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToPdfAWithHttpInfo(outPath, type, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to PdfA format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToPdfAWithHttpInfo(String outPath, String type, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToPdfAValidateBeforeCall(outPath, type, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to PdfA format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToPdfAAsync(String outPath, String type, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToPdfAValidateBeforeCall(outPath, type, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToPptx
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToPptxCall(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/pptx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (separateImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separateImages", separateImages));
        if (slidesAsImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slidesAsImages", slidesAsImages));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToPptxValidateBeforeCall(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToPptx(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToPptxCall(outPath, separateImages, slidesAsImages, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToPptx(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToPptxWithHttpInfo(outPath, separateImages, slidesAsImages, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToPptxWithHttpInfo(outPath, separateImages, slidesAsImages, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to PPTX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToPptxWithHttpInfo(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToPptxValidateBeforeCall(outPath, separateImages, slidesAsImages, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to PPTX format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToPptxAsync(String outPath, Boolean separateImages, Boolean slidesAsImages, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToPptxValidateBeforeCall(outPath, separateImages, slidesAsImages, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToSvg
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToSvgCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/svg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToSvgValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToSvg(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToSvgCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToSvg(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToSvgWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToSvgWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to SVG format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToSvgWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToSvgValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to SVG format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToSvgAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToSvgValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToTeX
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToTeXCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/tex";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToTeXValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToTeX(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToTeXCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to TeX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToTeX(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToTeXWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToTeXWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to TeX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToTeXWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToTeXValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to TeX format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToTeXAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToTeXValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToTiff
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToTiffCall(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/tiff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (brightness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("brightness", brightness));
        if (compression != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compression", compression));
        if (colorDepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("colorDepth", colorDepth));
        if (leftMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("leftMargin", leftMargin));
        if (rightMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rightMargin", rightMargin));
        if (topMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topMargin", topMargin));
        if (bottomMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bottomMargin", bottomMargin));
        if (orientation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orientation", orientation));
        if (skipBlankPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipBlankPages", skipBlankPages));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (xResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xResolution", xResolution));
        if (yResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yResolution", yResolution));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageCount", pageCount));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToTiffValidateBeforeCall(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToTiffCall(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToTiff(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToTiffWithHttpInfo(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToTiffWithHttpInfo(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to TIFF format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToTiffWithHttpInfo(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToTiffValidateBeforeCall(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to TIFF format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToTiffAsync(String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToTiffValidateBeforeCall(outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToXls
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXlsCall(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToXlsValidateBeforeCall(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToXls(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToXlsCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToXls(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToXlsWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToXlsWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to XLS format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToXlsWithHttpInfo(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToXlsValidateBeforeCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to XLS format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXlsAsync(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToXlsValidateBeforeCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToXlsx
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xlsx) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXlsxCall(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xlsx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToXlsxValidateBeforeCall(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToXlsx(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToXlsxCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to XLSX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xlsx) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToXlsx(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToXlsxWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToXlsxWithHttpInfo(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to XLSX format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xlsx) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToXlsxWithHttpInfo(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToXlsxValidateBeforeCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to XLSX format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xlsx) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXlsxAsync(String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToXlsxValidateBeforeCall(outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToXml
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXmlCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToXmlValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToXmlCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to XML format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToXml(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToXmlWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToXmlWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to XML format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToXmlWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToXmlValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to XML format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXmlAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToXmlValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInRequestToXps
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXpsCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInRequestToXpsValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInRequestToXps(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInRequestToXpsCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInRequestToXps(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInRequestToXpsWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInRequestToXpsWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (in request content) to XPS format and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInRequestToXpsWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInRequestToXpsValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (in request content) to XPS format and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInRequestToXpsAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInRequestToXpsValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToDoc
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToDocCall(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/doc"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (addReturnToLineEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addReturnToLineEnd", addReturnToLineEnd));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (imageResolutionX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionX", imageResolutionX));
        if (imageResolutionY != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolutionY", imageResolutionY));
        if (maxDistanceBetweenTextLines != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxDistanceBetweenTextLines", maxDistanceBetweenTextLines));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        if (recognizeBullets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recognizeBullets", recognizeBullets));
        if (relativeHorizontalProximity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("relativeHorizontalProximity", relativeHorizontalProximity));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToDocValidateBeforeCall(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToDoc(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToDoc(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToDocCall(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to DOC format and uploads resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToDoc(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToDocWithHttpInfo(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToDocWithHttpInfo(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to DOC format and uploads resulting file to storage.
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToDocWithHttpInfo(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToDocValidateBeforeCall(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to DOC format and uploads resulting file to storage. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.doc) (required)
     * @param addReturnToLineEnd Add return to line end. (optional)
     * @param format Allows to specify .doc or .docx file format. (optional)
     * @param imageResolutionX Image resolution X. (optional)
     * @param imageResolutionY Image resolution Y. (optional)
     * @param maxDistanceBetweenTextLines Max distance between text lines. (optional)
     * @param mode Allows to control how a PDF document is converted into a word processing document. (optional)
     * @param recognizeBullets Recognize bullets. (optional)
     * @param relativeHorizontalProximity Relative horizontal proximity. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param password The password (Base64). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToDocAsync(String name, String outPath, Boolean addReturnToLineEnd, String format, Integer imageResolutionX, Integer imageResolutionY, Double maxDistanceBetweenTextLines, String mode, Boolean recognizeBullets, Double relativeHorizontalProximity, String folder, String storage, String password, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToDocValidateBeforeCall(name, outPath, addReturnToLineEnd, format, imageResolutionX, imageResolutionY, maxDistanceBetweenTextLines, mode, recognizeBullets, relativeHorizontalProximity, folder, storage, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToEpub
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToEpubCall(String name, String outPath, String contentRecognitionMode, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/epub"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (contentRecognitionMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentRecognitionMode", contentRecognitionMode));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToEpubValidateBeforeCall(String name, String outPath, String contentRecognitionMode, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToEpub(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToEpub(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToEpubCall(name, outPath, contentRecognitionMode, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToEpub(String name, String outPath, String contentRecognitionMode, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToEpubWithHttpInfo(name, outPath, contentRecognitionMode, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToEpubWithHttpInfo(name, outPath, contentRecognitionMode, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToEpubWithHttpInfo(String name, String outPath, String contentRecognitionMode, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToEpubValidateBeforeCall(name, outPath, contentRecognitionMode, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to EPUB format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.epub) (required)
     * @param contentRecognitionMode Property tunes conversion for this or that desirable method of recognition of content. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToEpubAsync(String name, String outPath, String contentRecognitionMode, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToEpubValidateBeforeCall(name, outPath, contentRecognitionMode, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToHtml
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param outputFormat This parameter determines the type of result. The zip archive will be uploaded into the storage if the parameter is \&quot;Zip\&quot; or missed (default). In case of the \&quot;Folder\&quot;, all resulting files and directories will be uploaded to the folder of the resulting HTML file. (optional, default to Zip)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToHtmlCall(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/html"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (additionalMarginWidthInPoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additionalMarginWidthInPoints", additionalMarginWidthInPoints));
        if (compressSvgGraphicsIfAny != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressSvgGraphicsIfAny", compressSvgGraphicsIfAny));
        if (convertMarkedContentToLayers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convertMarkedContentToLayers", convertMarkedContentToLayers));
        if (defaultFontName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultFontName", defaultFontName));
        if (documentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("documentType", documentType));
        if (fixedLayout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fixedLayout", fixedLayout));
        if (imageResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageResolution", imageResolution));
        if (minimalLineWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimalLineWidth", minimalLineWidth));
        if (preventGlyphsGrouping != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preventGlyphsGrouping", preventGlyphsGrouping));
        if (splitCssIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitCssIntoPages", splitCssIntoPages));
        if (splitIntoPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitIntoPages", splitIntoPages));
        if (useZOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useZOrder", useZOrder));
        if (antialiasingProcessing != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("antialiasingProcessing", antialiasingProcessing));
        if (cssClassNamesPrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cssClassNamesPrefix", cssClassNamesPrefix));
        if (explicitListOfSavedPages != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "explicitListOfSavedPages", explicitListOfSavedPages));
        if (fontEncodingStrategy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontEncodingStrategy", fontEncodingStrategy));
        if (fontSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSavingMode", fontSavingMode));
        if (htmlMarkupGenerationMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("htmlMarkupGenerationMode", htmlMarkupGenerationMode));
        if (lettersPositioningMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lettersPositioningMethod", lettersPositioningMethod));
        if (pagesFlowTypeDependsOnViewersScreenSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesFlowTypeDependsOnViewersScreenSize", pagesFlowTypeDependsOnViewersScreenSize));
        if (partsEmbeddingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partsEmbeddingMode", partsEmbeddingMode));
        if (rasterImagesSavingMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rasterImagesSavingMode", rasterImagesSavingMode));
        if (removeEmptyAreasOnTopAndBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeEmptyAreasOnTopAndBottom", removeEmptyAreasOnTopAndBottom));
        if (saveShadowedTextsAsTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveShadowedTextsAsTransparentTexts", saveShadowedTextsAsTransparentTexts));
        if (saveTransparentTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveTransparentTexts", saveTransparentTexts));
        if (specialFolderForAllImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForAllImages", specialFolderForAllImages));
        if (specialFolderForSvgImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("specialFolderForSvgImages", specialFolderForSvgImages));
        if (trySaveTextUnderliningAndStrikeoutingInCss != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trySaveTextUnderliningAndStrikeoutingInCss", trySaveTextUnderliningAndStrikeoutingInCss));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (flowLayoutParagraphFullWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flowLayoutParagraphFullWidth", flowLayoutParagraphFullWidth));
        if (outputFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputFormat", outputFormat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToHtmlValidateBeforeCall(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToHtml(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToHtml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToHtmlCall(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth, outputFormat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to Html format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param outputFormat This parameter determines the type of result. The zip archive will be uploaded into the storage if the parameter is \&quot;Zip\&quot; or missed (default). In case of the \&quot;Folder\&quot;, all resulting files and directories will be uploaded to the folder of the resulting HTML file. (optional, default to Zip)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToHtml(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToHtmlWithHttpInfo(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth, outputFormat);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToHtmlWithHttpInfo(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth, outputFormat);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to Html format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param outputFormat This parameter determines the type of result. The zip archive will be uploaded into the storage if the parameter is \&quot;Zip\&quot; or missed (default). In case of the \&quot;Folder\&quot;, all resulting files and directories will be uploaded to the folder of the resulting HTML file. (optional, default to Zip)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToHtmlWithHttpInfo(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToHtmlValidateBeforeCall(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth, outputFormat, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to Html format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.html) (required)
     * @param additionalMarginWidthInPoints Defines width of margin that will be forcibly left around that output HTML-areas. (optional)
     * @param compressSvgGraphicsIfAny The flag that indicates whether found SVG graphics(if any) will be compressed(zipped) into SVGZ format during saving. (optional)
     * @param convertMarkedContentToLayers If attribute ConvertMarkedContentToLayers set to true then an all elements inside a PDF marked content (layer) will be put into an HTML div with \&quot;data-pdflayer\&quot; attribute specifying a layer name. This layer name will be extracted from optional properties of PDF marked content. If this attribute is false (by default) then no any layers will be created from PDF marked content. (optional)
     * @param defaultFontName Specifies the name of an installed font which is used to substitute any document font that is not embedded and not installed in the system. If null then default substitution font is used. (optional)
     * @param documentType Result document type. (optional)
     * @param fixedLayout The value indicating whether that HTML is created as fixed layout. (optional)
     * @param imageResolution Resolution for image rendering. (optional)
     * @param minimalLineWidth This attribute sets minimal width of graphic path line. If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers. (optional)
     * @param preventGlyphsGrouping This attribute switch on the mode when text glyphs will not be grouped into words and strings This mode allows to keep maximum precision during positioning of glyphs on the page and it can be used for conversion documents with music notes or glyphs that should be placed separately each other. This parameter will be applied to document only when the value of FixedLayout attribute is true. (optional)
     * @param splitCssIntoPages When multipage-mode selected(i.e &#39;SplitIntoPages&#39; is &#39;true&#39;), then this attribute defines whether should be created separate CSS-file for each result HTML page. (optional)
     * @param splitIntoPages The flag that indicates whether each page of source document will be converted into it&#39;s own target HTML document, i.e whether result HTML will be splitted into several HTML-pages. (optional)
     * @param useZOrder If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects. (optional)
     * @param antialiasingProcessing The parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML. (optional)
     * @param cssClassNamesPrefix When PDFtoHTML converter generates result CSSs, CSS class names (something like \&quot;.stl_01 {}\&quot; ... \&quot;.stl_NN {}) are generated and used in result CSS. This property allows forcibly set class name prefix. (optional)
     * @param explicitListOfSavedPages With this property You can explicitely define what pages of document should be converted. Pages in this list must have 1-based numbers. I.e. valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument]) Order of appearing of pages in this list does not affect their order in result HTML page(s) - in result pages allways will go in order in which they are present in source PDF. (optional)
     * @param fontEncodingStrategy Defines encoding special rule to tune PDF decoding for current document. (optional)
     * @param fontSavingMode Defines font saving mode that will be used during saving of PDF to desirable format. (optional)
     * @param htmlMarkupGenerationMode Sometimes specific reqirments to generation of HTML markup are present. This parameter defines HTML preparing modes that can be used during conversion of PDF to HTML to match such specific requirments. (optional)
     * @param lettersPositioningMethod The mode of positioning of letters in words in result HTML. (optional)
     * @param pagesFlowTypeDependsOnViewersScreenSize If attribute &#39;SplitOnPages&#x3D;false&#39;, than whole HTML representing all input PDF pages will be put into one big result HTML file. This flag defines whether result HTML will be generated in such way that flow of areas that represent PDF pages in result HTML will depend on screen resolution of viewer. (optional)
     * @param partsEmbeddingMode It defines whether referenced files (HTML, Fonts,Images, CSSes) will be embedded into main HTML file or will be generated as apart binary entities. (optional)
     * @param rasterImagesSavingMode Converted PDF can contain raster images This parameter defines how they should be handled during conversion of PDF to HTML. (optional)
     * @param removeEmptyAreasOnTopAndBottom Defines whether in created HTML will be removed top and bottom empty area without any content (if any). (optional)
     * @param saveShadowedTextsAsTransparentTexts Pdf can contain texts that are shadowed by another elements (f.e. by images) but can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard). (optional)
     * @param saveTransparentTexts Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it). This settings tells to converter whether we need save such texts as transparent selectable texts in result HTML. (optional)
     * @param specialFolderForAllImages The path to directory to which must be saved any images if they are encountered during saving of document as HTML. If parameter is empty or null then image files(if any) wil be saved together with other files linked to HTML It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param specialFolderForSvgImages The path to directory to which must be saved only SVG-images if they are encountered during saving of document as HTML. If parameter is empty or null then SVG files(if any) wil be saved together with other image-files (near to output file) or in special folder for images (if it specified in SpecialImagesFolderIfAny option). It does not affect anything if CustomImageSavingStrategy property was successfully used to process relevant image file. (optional)
     * @param trySaveTextUnderliningAndStrikeoutingInCss PDF itself does not contain underlining markers for texts. It emulated with line situated under text. This option allows converter try guess that this or that line is a text&#39;s underlining and put this info into CSS instead of drawing of underlining graphically. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param flowLayoutParagraphFullWidth This attribute specifies full width paragraph text for Flow mode, FixedLayout &#x3D; false. (optional)
     * @param outputFormat This parameter determines the type of result. The zip archive will be uploaded into the storage if the parameter is \&quot;Zip\&quot; or missed (default). In case of the \&quot;Folder\&quot;, all resulting files and directories will be uploaded to the folder of the resulting HTML file. (optional, default to Zip)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToHtmlAsync(String name, String outPath, Integer additionalMarginWidthInPoints, Boolean compressSvgGraphicsIfAny, Boolean convertMarkedContentToLayers, String defaultFontName, String documentType, Boolean fixedLayout, Integer imageResolution, Integer minimalLineWidth, Boolean preventGlyphsGrouping, Boolean splitCssIntoPages, Boolean splitIntoPages, Boolean useZOrder, String antialiasingProcessing, String cssClassNamesPrefix, List<Integer> explicitListOfSavedPages, String fontEncodingStrategy, String fontSavingMode, String htmlMarkupGenerationMode, String lettersPositioningMethod, Boolean pagesFlowTypeDependsOnViewersScreenSize, String partsEmbeddingMode, String rasterImagesSavingMode, Boolean removeEmptyAreasOnTopAndBottom, Boolean saveShadowedTextsAsTransparentTexts, Boolean saveTransparentTexts, String specialFolderForAllImages, String specialFolderForSvgImages, Boolean trySaveTextUnderliningAndStrikeoutingInCss, String folder, String storage, Boolean flowLayoutParagraphFullWidth, String outputFormat, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToHtmlValidateBeforeCall(name, outPath, additionalMarginWidthInPoints, compressSvgGraphicsIfAny, convertMarkedContentToLayers, defaultFontName, documentType, fixedLayout, imageResolution, minimalLineWidth, preventGlyphsGrouping, splitCssIntoPages, splitIntoPages, useZOrder, antialiasingProcessing, cssClassNamesPrefix, explicitListOfSavedPages, fontEncodingStrategy, fontSavingMode, htmlMarkupGenerationMode, lettersPositioningMethod, pagesFlowTypeDependsOnViewersScreenSize, partsEmbeddingMode, rasterImagesSavingMode, removeEmptyAreasOnTopAndBottom, saveShadowedTextsAsTransparentTexts, saveTransparentTexts, specialFolderForAllImages, specialFolderForSvgImages, trySaveTextUnderliningAndStrikeoutingInCss, folder, storage, flowLayoutParagraphFullWidth, outputFormat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToMobiXml
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToMobiXmlCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/mobixml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToMobiXmlValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToMobiXml(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToMobiXml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToMobiXmlCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and uploads resulting ZIP archive file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToMobiXml(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToMobiXmlWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToMobiXmlWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and uploads resulting ZIP archive file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToMobiXmlWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToMobiXmlValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to MOBIXML format and uploads resulting ZIP archive file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.mobixml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToMobiXmlAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToMobiXmlValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToPdfA
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToPdfACall(String name, String outPath, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/pdfa"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToPdfAValidateBeforeCall(String name, String outPath, String type, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToPdfA(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToPdfA(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putPdfInStorageToPdfA(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToPdfACall(name, outPath, type, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToPdfA(String name, String outPath, String type, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToPdfAWithHttpInfo(name, outPath, type, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToPdfAWithHttpInfo(name, outPath, type, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToPdfAWithHttpInfo(String name, String outPath, String type, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToPdfAValidateBeforeCall(name, outPath, type, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to PdfA format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param type Type of PdfA format. (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToPdfAAsync(String name, String outPath, String type, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToPdfAValidateBeforeCall(name, outPath, type, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToPptx
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToPptxCall(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/pptx"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (separateImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separateImages", separateImages));
        if (slidesAsImages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slidesAsImages", slidesAsImages));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToPptxValidateBeforeCall(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToPptx(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToPptx(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToPptxCall(name, outPath, separateImages, slidesAsImages, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToPptx(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToPptxWithHttpInfo(name, outPath, separateImages, slidesAsImages, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToPptxWithHttpInfo(name, outPath, separateImages, slidesAsImages, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToPptxWithHttpInfo(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToPptxValidateBeforeCall(name, outPath, separateImages, slidesAsImages, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to PPTX format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pptx) (required)
     * @param separateImages Separate images. (optional)
     * @param slidesAsImages Slides as images. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToPptxAsync(String name, String outPath, Boolean separateImages, Boolean slidesAsImages, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToPptxValidateBeforeCall(name, outPath, separateImages, slidesAsImages, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToSvg
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToSvgCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/svg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToSvgValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToSvg(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToSvg(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToSvgCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToSvg(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToSvgWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToSvgWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to SVG format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToSvgWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToSvgValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to SVG format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.svg) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToSvgAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToSvgValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToTeX
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToTeXCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/tex"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToTeXValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToTeX(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToTeX(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToTeXCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to TeX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToTeX(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToTeXWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToTeXWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to TeX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToTeXWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToTeXValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to TeX format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tex) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToTeXAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToTeXValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToTiff
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToTiffCall(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/tiff"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (brightness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("brightness", brightness));
        if (compression != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compression", compression));
        if (colorDepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("colorDepth", colorDepth));
        if (leftMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("leftMargin", leftMargin));
        if (rightMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rightMargin", rightMargin));
        if (topMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topMargin", topMargin));
        if (bottomMargin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bottomMargin", bottomMargin));
        if (orientation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orientation", orientation));
        if (skipBlankPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipBlankPages", skipBlankPages));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (xResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xResolution", xResolution));
        if (yResolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("yResolution", yResolution));
        if (pageIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageIndex", pageIndex));
        if (pageCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageCount", pageCount));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToTiffValidateBeforeCall(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToTiff(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToTiff(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToTiffCall(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToTiff(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToTiffWithHttpInfo(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToTiffWithHttpInfo(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToTiffWithHttpInfo(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToTiffValidateBeforeCall(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to TIFF format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.tiff) (required)
     * @param brightness Image brightness. (optional)
     * @param compression Tiff compression. Possible values are: LZW, CCITT4, CCITT3, RLE, None. (optional)
     * @param colorDepth Image color depth. Possible valuse are: Default, Format8bpp, Format4bpp, Format1bpp. (optional)
     * @param leftMargin Left image margin. (optional)
     * @param rightMargin Right image margin. (optional)
     * @param topMargin Top image margin. (optional)
     * @param bottomMargin Bottom image margin. (optional)
     * @param orientation Image orientation. Possible values are: None, Landscape, Portait. (optional)
     * @param skipBlankPages Skip blank pages flag. (optional)
     * @param width Image width. (optional)
     * @param height Image height. (optional)
     * @param xResolution Horizontal resolution. (optional)
     * @param yResolution Vertical resolution. (optional)
     * @param pageIndex Start page to export. (optional)
     * @param pageCount Number of pages to export. (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToTiffAsync(String name, String outPath, Double brightness, String compression, String colorDepth, Integer leftMargin, Integer rightMargin, Integer topMargin, Integer bottomMargin, String orientation, Boolean skipBlankPages, Integer width, Integer height, Integer xResolution, Integer yResolution, Integer pageIndex, Integer pageCount, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToTiffValidateBeforeCall(name, outPath, brightness, compression, colorDepth, leftMargin, rightMargin, topMargin, bottomMargin, orientation, skipBlankPages, width, height, xResolution, yResolution, pageIndex, pageCount, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToXls
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXlsCall(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xls"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToXlsValidateBeforeCall(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToXls(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToXls(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToXlsCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToXls(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToXlsWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToXlsWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XLS format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToXlsWithHttpInfo(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToXlsValidateBeforeCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XLS format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xls) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXlsAsync(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToXlsValidateBeforeCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToXlsx
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xlsx) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXlsxCall(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xlsx"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (insertBlankColumnAtFirst != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertBlankColumnAtFirst", insertBlankColumnAtFirst));
        if (minimizeTheNumberOfWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimizeTheNumberOfWorksheets", minimizeTheNumberOfWorksheets));
        if (scaleFactor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scaleFactor", scaleFactor));
        if (uniformWorksheets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uniformWorksheets", uniformWorksheets));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToXlsxValidateBeforeCall(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToXlsx(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToXlsx(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToXlsxCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XLSX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xlsx) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToXlsx(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToXlsxWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToXlsxWithHttpInfo(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XLSX format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xlsx) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToXlsxWithHttpInfo(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToXlsxValidateBeforeCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XLSX format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xlsx) (required)
     * @param insertBlankColumnAtFirst Insert blank column at first (optional)
     * @param minimizeTheNumberOfWorksheets Minimize the number of worksheets (optional)
     * @param scaleFactor Scale factor (Obsolete) (optional)
     * @param uniformWorksheets Uniform worksheets (optional)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXlsxAsync(String name, String outPath, Boolean insertBlankColumnAtFirst, Boolean minimizeTheNumberOfWorksheets, Double scaleFactor, Boolean uniformWorksheets, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToXlsxValidateBeforeCall(name, outPath, insertBlankColumnAtFirst, minimizeTheNumberOfWorksheets, scaleFactor, uniformWorksheets, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToXml
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXmlCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToXmlValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToXml(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToXml(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToXmlCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XML format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToXml(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToXmlWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToXmlWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XML format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToXmlWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToXmlValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XML format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xml) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXmlAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToXmlValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPdfInStorageToXps
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXpsCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPdfInStorageToXpsValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPdfInStorageToXps(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putPdfInStorageToXps(Async)");
        }
        

        com.squareup.okhttp.Call call = putPdfInStorageToXpsCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPdfInStorageToXps(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPdfInStorageToXpsWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPdfInStorageToXpsWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document (located on storage) to XPS format and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPdfInStorageToXpsWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPdfInStorageToXpsValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document (located on storage) to XPS format and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.xps) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPdfInStorageToXpsAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPdfInStorageToXpsValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPolyLineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPolyLineAnnotationCall(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polyline/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPolyLineAnnotationValidateBeforeCall(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPolyLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putPolyLineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putPolyLineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putPolyLineAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document polyline annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolyLineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolyLineAnnotationResponse putPolyLineAnnotation(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolyLineAnnotationResponse> resp = putPolyLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PolyLineAnnotationResponse> resp = putPolyLineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document polyline annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolyLineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolyLineAnnotationResponse> putPolyLineAnnotationWithHttpInfo(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPolyLineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document polyline annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPolyLineAnnotationAsync(String name, String annotationId, PolyLineAnnotation annotation, String storage, String folder, final ApiCallback<PolyLineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPolyLineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolyLineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPolygonAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPolygonAnnotationCall(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/polygon/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPolygonAnnotationValidateBeforeCall(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPolygonAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putPolygonAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putPolygonAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putPolygonAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document polygon annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PolygonAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PolygonAnnotationResponse putPolygonAnnotation(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PolygonAnnotationResponse> resp = putPolygonAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PolygonAnnotationResponse> resp = putPolygonAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document polygon annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PolygonAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PolygonAnnotationResponse> putPolygonAnnotationWithHttpInfo(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPolygonAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PolygonAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document polygon annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPolygonAnnotationAsync(String name, String annotationId, PolygonAnnotation annotation, String storage, String folder, final ApiCallback<PolygonAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPolygonAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PolygonAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPopupAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPopupAnnotationCall(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/popup/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPopupAnnotationValidateBeforeCall(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putPopupAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putPopupAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putPopupAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document popup annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return PopupAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PopupAnnotationResponse putPopupAnnotation(String name, String annotationId, PopupAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<PopupAnnotationResponse> resp = putPopupAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<PopupAnnotationResponse> resp = putPopupAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document popup annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;PopupAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PopupAnnotationResponse> putPopupAnnotationWithHttpInfo(String name, String annotationId, PopupAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPopupAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<PopupAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document popup annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPopupAnnotationAsync(String name, String annotationId, PopupAnnotation annotation, String storage, String folder, final ApiCallback<PopupAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPopupAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PopupAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPrivileges
     * @param name The document name. (required)
     * @param privileges Document privileges. DocumentPrivilege (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPrivilegesCall(String name, DocumentPrivilege privileges, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = privileges;

        // create path and map variables
        String localVarPath = "/pdf/{name}/privileges"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPrivilegesValidateBeforeCall(String name, DocumentPrivilege privileges, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPrivileges(Async)");
        }
        
        // verify the required parameter 'privileges' is set
        if (privileges == null) {
            throw new ApiException("Missing the required parameter 'privileges' when calling putPrivileges(Async)");
        }
        

        com.squareup.okhttp.Call call = putPrivilegesCall(name, privileges, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update privilege document.
     * 
     * @param name The document name. (required)
     * @param privileges Document privileges. DocumentPrivilege (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPrivileges(String name, DocumentPrivilege privileges, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPrivilegesWithHttpInfo(name, privileges, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPrivilegesWithHttpInfo(name, privileges, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update privilege document.
     * 
     * @param name The document name. (required)
     * @param privileges Document privileges. DocumentPrivilege (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPrivilegesWithHttpInfo(String name, DocumentPrivilege privileges, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putPrivilegesValidateBeforeCall(name, privileges, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update privilege document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param privileges Document privileges. DocumentPrivilege (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPrivilegesAsync(String name, DocumentPrivilege privileges, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPrivilegesValidateBeforeCall(name, privileges, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putPsInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putPsInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/ps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putPsInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPsInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putPsInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putPsInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putPsInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putPsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putPsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert PS file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putPsInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putPsInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert PS file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.ps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putPsInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putPsInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putRadioButtonField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putRadioButtonFieldCall(String name, String fieldName, RadioButtonField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/radiobutton/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putRadioButtonFieldValidateBeforeCall(String name, String fieldName, RadioButtonField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putRadioButtonField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putRadioButtonField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling putRadioButtonField(Async)");
        }
        

        com.squareup.okhttp.Call call = putRadioButtonFieldCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document RadioButton field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return RadioButtonFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RadioButtonFieldResponse putRadioButtonField(String name, String fieldName, RadioButtonField field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<RadioButtonFieldResponse> resp = putRadioButtonFieldWithHttpInfo(name, fieldName, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<RadioButtonFieldResponse> resp = putRadioButtonFieldWithHttpInfo(name, fieldName, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document RadioButton field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;RadioButtonFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RadioButtonFieldResponse> putRadioButtonFieldWithHttpInfo(String name, String fieldName, RadioButtonField field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putRadioButtonFieldValidateBeforeCall(name, fieldName, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<RadioButtonFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document RadioButton field (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putRadioButtonFieldAsync(String name, String fieldName, RadioButtonField field, String storage, String folder, final ApiCallback<RadioButtonFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putRadioButtonFieldValidateBeforeCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RadioButtonFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putRedactionAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param apply Apply redaction immediately after adding. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putRedactionAnnotationCall(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder, Boolean apply, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/redaction/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (apply != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apply", apply));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putRedactionAnnotationValidateBeforeCall(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder, Boolean apply, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putRedactionAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putRedactionAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putRedactionAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putRedactionAnnotationCall(name, annotationId, annotation, storage, folder, apply, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document redaction annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param apply Apply redaction immediately after adding. (optional, default to false)
     * @return RedactionAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedactionAnnotationResponse putRedactionAnnotation(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder, Boolean apply) throws ApiException {
        try
        {
            ApiResponse<RedactionAnnotationResponse> resp = putRedactionAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder, apply);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<RedactionAnnotationResponse> resp = putRedactionAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder, apply);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document redaction annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param apply Apply redaction immediately after adding. (optional, default to false)
     * @return ApiResponse&lt;RedactionAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedactionAnnotationResponse> putRedactionAnnotationWithHttpInfo(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder, Boolean apply) throws ApiException {
        com.squareup.okhttp.Call call = putRedactionAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, apply, null, null);
        Type localVarReturnType = new TypeToken<RedactionAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document redaction annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param apply Apply redaction immediately after adding. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putRedactionAnnotationAsync(String name, String annotationId, RedactionAnnotation annotation, String storage, String folder, Boolean apply, final ApiCallback<RedactionAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putRedactionAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, apply, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RedactionAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putReplaceImage
     * @param name The document name. (required)
     * @param imageId The image ID. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putReplaceImageCall(String name, String imageId, String imageFilePath, String storage, String folder, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = image;

        // create path and map variables
        String localVarPath = "/pdf/{name}/images/{imageId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapePathSegmentString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (imageFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageFilePath", imageFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putReplaceImageValidateBeforeCall(String name, String imageId, String imageFilePath, String storage, String folder, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putReplaceImage(Async)");
        }
        
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling putReplaceImage(Async)");
        }
        

        com.squareup.okhttp.Call call = putReplaceImageCall(name, imageId, imageFilePath, storage, folder, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document image.
     * 
     * @param name The document name. (required)
     * @param imageId The image ID. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @return ImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageResponse putReplaceImage(String name, String imageId, String imageFilePath, String storage, String folder, File image) throws ApiException {
        try
        {
            ApiResponse<ImageResponse> resp = putReplaceImageWithHttpInfo(name, imageId, imageFilePath, storage, folder, image);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ImageResponse> resp = putReplaceImageWithHttpInfo(name, imageId, imageFilePath, storage, folder, image);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document image.
     * 
     * @param name The document name. (required)
     * @param imageId The image ID. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @return ApiResponse&lt;ImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageResponse> putReplaceImageWithHttpInfo(String name, String imageId, String imageFilePath, String storage, String folder, File image) throws ApiException {
        com.squareup.okhttp.Call call = putReplaceImageValidateBeforeCall(name, imageId, imageFilePath, storage, folder, image, null, null);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document image. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param imageId The image ID. (required)
     * @param imageFilePath Path to image file if specified. Request content is used otherwise. (optional)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param image Image file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putReplaceImageAsync(String name, String imageId, String imageFilePath, String storage, String folder, File image, final ApiCallback<ImageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putReplaceImageValidateBeforeCall(name, imageId, imageFilePath, storage, folder, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putScreenAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putScreenAnnotationCall(String name, String annotationId, ScreenAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/screen/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putScreenAnnotationValidateBeforeCall(String name, String annotationId, ScreenAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putScreenAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putScreenAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putScreenAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putScreenAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document screen annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ScreenAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenAnnotationResponse putScreenAnnotation(String name, String annotationId, ScreenAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<ScreenAnnotationResponse> resp = putScreenAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<ScreenAnnotationResponse> resp = putScreenAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document screen annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;ScreenAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenAnnotationResponse> putScreenAnnotationWithHttpInfo(String name, String annotationId, ScreenAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putScreenAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<ScreenAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document screen annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putScreenAnnotationAsync(String name, String annotationId, ScreenAnnotation annotation, String storage, String folder, final ApiCallback<ScreenAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putScreenAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putScreenAnnotationDataExtract
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putScreenAnnotationDataExtractCall(String name, String annotationId, String outFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/screen/{annotationId}/data/extract"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outFilePath", outFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putScreenAnnotationDataExtractValidateBeforeCall(String name, String annotationId, String outFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putScreenAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putScreenAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'outFilePath' is set
        if (outFilePath == null) {
            throw new ApiException("Missing the required parameter 'outFilePath' when calling putScreenAnnotationDataExtract(Async)");
        }
        

        com.squareup.okhttp.Call call = putScreenAnnotationDataExtractCall(name, annotationId, outFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document screen annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putScreenAnnotationDataExtract(String name, String annotationId, String outFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putScreenAnnotationDataExtractWithHttpInfo(name, annotationId, outFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putScreenAnnotationDataExtractWithHttpInfo(name, annotationId, outFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document screen annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putScreenAnnotationDataExtractWithHttpInfo(String name, String annotationId, String outFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putScreenAnnotationDataExtractValidateBeforeCall(name, annotationId, outFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document screen annotation content to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putScreenAnnotationDataExtractAsync(String name, String annotationId, String outFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putScreenAnnotationDataExtractValidateBeforeCall(name, annotationId, outFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSearchableDocument
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSearchableDocumentCall(String name, String storage, String folder, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/ocr"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSearchableDocumentValidateBeforeCall(String name, String storage, String folder, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSearchableDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = putSearchableDocumentCall(name, storage, folder, lang, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create searchable PDF document. Generate OCR layer for images in input PDF document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putSearchableDocument(String name, String storage, String folder, String lang) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putSearchableDocumentWithHttpInfo(name, storage, folder, lang);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putSearchableDocumentWithHttpInfo(name, storage, folder, lang);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Create searchable PDF document. Generate OCR layer for images in input PDF document.
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putSearchableDocumentWithHttpInfo(String name, String storage, String folder, String lang) throws ApiException {
        com.squareup.okhttp.Call call = putSearchableDocumentValidateBeforeCall(name, storage, folder, lang, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create searchable PDF document. Generate OCR layer for images in input PDF document. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param lang language for OCR engine. Possible values: eng, ara, bel, ben, bul, ces, dan, deu, ell, fin, fra, heb, hin, ind, isl, ita, jpn, kor, nld, nor, pol, por, ron, rus, spa, swe, tha, tur, ukr, vie, chi_sim, chi_tra or thier combination e.g. eng,rus  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSearchableDocumentAsync(String name, String storage, String folder, String lang, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSearchableDocumentValidateBeforeCall(name, storage, folder, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSetProperty
     * @param name  (required)
     * @param propertyName  (required)
     * @param value  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSetPropertyCall(String name, String propertyName, String value, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "propertyName" + "\\}", apiClient.escapePathSegmentString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSetPropertyValidateBeforeCall(String name, String propertyName, String value, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSetProperty(Async)");
        }
        
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling putSetProperty(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling putSetProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = putSetPropertyCall(name, propertyName, value, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add/update document property.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param value  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPropertyResponse putSetProperty(String name, String propertyName, String value, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<DocumentPropertyResponse> resp = putSetPropertyWithHttpInfo(name, propertyName, value, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<DocumentPropertyResponse> resp = putSetPropertyWithHttpInfo(name, propertyName, value, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Add/update document property.
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param value  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;DocumentPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPropertyResponse> putSetPropertyWithHttpInfo(String name, String propertyName, String value, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSetPropertyValidateBeforeCall(name, propertyName, value, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add/update document property. (asynchronously)
     * 
     * @param name  (required)
     * @param propertyName  (required)
     * @param value  (required)
     * @param storage  (optional)
     * @param folder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSetPropertyAsync(String name, String propertyName, String value, String storage, String folder, final ApiCallback<DocumentPropertyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSetPropertyValidateBeforeCall(name, propertyName, value, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPropertyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSignatureField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSignatureFieldCall(String name, String fieldName, SignatureField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/signature/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSignatureFieldValidateBeforeCall(String name, String fieldName, SignatureField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSignatureField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putSignatureField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling putSignatureField(Async)");
        }
        

        com.squareup.okhttp.Call call = putSignatureFieldCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document signature field.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SignatureFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignatureFieldResponse putSignatureField(String name, String fieldName, SignatureField field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SignatureFieldResponse> resp = putSignatureFieldWithHttpInfo(name, fieldName, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SignatureFieldResponse> resp = putSignatureFieldWithHttpInfo(name, fieldName, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document signature field.
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SignatureFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignatureFieldResponse> putSignatureFieldWithHttpInfo(String name, String fieldName, SignatureField field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSignatureFieldValidateBeforeCall(name, fieldName, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SignatureFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document signature field. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSignatureFieldAsync(String name, String fieldName, SignatureField field, String storage, String folder, final ApiCallback<SignatureFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSignatureFieldValidateBeforeCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignatureFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSoundAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSoundAnnotationCall(String name, String annotationId, SoundAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSoundAnnotationValidateBeforeCall(String name, String annotationId, SoundAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSoundAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putSoundAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putSoundAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putSoundAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document sound annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SoundAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SoundAnnotationResponse putSoundAnnotation(String name, String annotationId, SoundAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SoundAnnotationResponse> resp = putSoundAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SoundAnnotationResponse> resp = putSoundAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document sound annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SoundAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SoundAnnotationResponse> putSoundAnnotationWithHttpInfo(String name, String annotationId, SoundAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSoundAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SoundAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document sound annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSoundAnnotationAsync(String name, String annotationId, SoundAnnotation annotation, String storage, String folder, final ApiCallback<SoundAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSoundAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SoundAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSoundAnnotationDataExtract
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSoundAnnotationDataExtractCall(String name, String annotationId, String outFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/sound/{annotationId}/data/extract"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outFilePath", outFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSoundAnnotationDataExtractValidateBeforeCall(String name, String annotationId, String outFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSoundAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putSoundAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'outFilePath' is set
        if (outFilePath == null) {
            throw new ApiException("Missing the required parameter 'outFilePath' when calling putSoundAnnotationDataExtract(Async)");
        }
        

        com.squareup.okhttp.Call call = putSoundAnnotationDataExtractCall(name, annotationId, outFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document sound annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putSoundAnnotationDataExtract(String name, String annotationId, String outFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putSoundAnnotationDataExtractWithHttpInfo(name, annotationId, outFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putSoundAnnotationDataExtractWithHttpInfo(name, annotationId, outFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document sound annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putSoundAnnotationDataExtractWithHttpInfo(String name, String annotationId, String outFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSoundAnnotationDataExtractValidateBeforeCall(name, annotationId, outFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document sound annotation content to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSoundAnnotationDataExtractAsync(String name, String annotationId, String outFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSoundAnnotationDataExtractValidateBeforeCall(name, annotationId, outFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSquareAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSquareAnnotationCall(String name, String annotationId, SquareAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/square/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSquareAnnotationValidateBeforeCall(String name, String annotationId, SquareAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSquareAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putSquareAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putSquareAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putSquareAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document square annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquareAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquareAnnotationResponse putSquareAnnotation(String name, String annotationId, SquareAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquareAnnotationResponse> resp = putSquareAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SquareAnnotationResponse> resp = putSquareAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document square annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquareAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquareAnnotationResponse> putSquareAnnotationWithHttpInfo(String name, String annotationId, SquareAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSquareAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquareAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document square annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSquareAnnotationAsync(String name, String annotationId, SquareAnnotation annotation, String storage, String folder, final ApiCallback<SquareAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSquareAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquareAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSquigglyAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSquigglyAnnotationCall(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/squiggly/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSquigglyAnnotationValidateBeforeCall(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSquigglyAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putSquigglyAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putSquigglyAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putSquigglyAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document squiggly annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return SquigglyAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SquigglyAnnotationResponse putSquigglyAnnotation(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<SquigglyAnnotationResponse> resp = putSquigglyAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<SquigglyAnnotationResponse> resp = putSquigglyAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document squiggly annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;SquigglyAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SquigglyAnnotationResponse> putSquigglyAnnotationWithHttpInfo(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putSquigglyAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document squiggly annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSquigglyAnnotationAsync(String name, String annotationId, SquigglyAnnotation annotation, String storage, String folder, final ApiCallback<SquigglyAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSquigglyAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SquigglyAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putStampAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putStampAnnotationCall(String name, String annotationId, StampAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/stamp/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putStampAnnotationValidateBeforeCall(String name, String annotationId, StampAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putStampAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putStampAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putStampAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putStampAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document stamp annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StampAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StampAnnotationResponse putStampAnnotation(String name, String annotationId, StampAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StampAnnotationResponse> resp = putStampAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StampAnnotationResponse> resp = putStampAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document stamp annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StampAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StampAnnotationResponse> putStampAnnotationWithHttpInfo(String name, String annotationId, StampAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putStampAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StampAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document stamp annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putStampAnnotationAsync(String name, String annotationId, StampAnnotation annotation, String storage, String folder, final ApiCallback<StampAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putStampAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StampAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putStampAnnotationDataExtract
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putStampAnnotationDataExtractCall(String name, String annotationId, String outFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/stamp/{annotationId}/data/extract"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outFilePath", outFilePath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putStampAnnotationDataExtractValidateBeforeCall(String name, String annotationId, String outFilePath, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putStampAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putStampAnnotationDataExtract(Async)");
        }
        
        // verify the required parameter 'outFilePath' is set
        if (outFilePath == null) {
            throw new ApiException("Missing the required parameter 'outFilePath' when calling putStampAnnotationDataExtract(Async)");
        }
        

        com.squareup.okhttp.Call call = putStampAnnotationDataExtractCall(name, annotationId, outFilePath, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Extract document stamp annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putStampAnnotationDataExtract(String name, String annotationId, String outFilePath, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putStampAnnotationDataExtractWithHttpInfo(name, annotationId, outFilePath, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putStampAnnotationDataExtractWithHttpInfo(name, annotationId, outFilePath, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Extract document stamp annotation content to storage
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putStampAnnotationDataExtractWithHttpInfo(String name, String annotationId, String outFilePath, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putStampAnnotationDataExtractValidateBeforeCall(name, annotationId, outFilePath, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract document stamp annotation content to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param outFilePath The output file path. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putStampAnnotationDataExtractAsync(String name, String annotationId, String outFilePath, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putStampAnnotationDataExtractValidateBeforeCall(name, annotationId, outFilePath, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putStrikeOutAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putStrikeOutAnnotationCall(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/strikeout/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putStrikeOutAnnotationValidateBeforeCall(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putStrikeOutAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putStrikeOutAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putStrikeOutAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putStrikeOutAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document StrikeOut annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return StrikeOutAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StrikeOutAnnotationResponse putStrikeOutAnnotation(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<StrikeOutAnnotationResponse> resp = putStrikeOutAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StrikeOutAnnotationResponse> resp = putStrikeOutAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document StrikeOut annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;StrikeOutAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StrikeOutAnnotationResponse> putStrikeOutAnnotationWithHttpInfo(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putStrikeOutAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document StrikeOut annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putStrikeOutAnnotationAsync(String name, String annotationId, StrikeOutAnnotation annotation, String storage, String folder, final ApiCallback<StrikeOutAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putStrikeOutAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StrikeOutAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putSvgInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putSvgInStorageToPdfCall(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/svg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (adjustPageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("adjustPageSize", adjustPageSize));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putSvgInStorageToPdfValidateBeforeCall(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSvgInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putSvgInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putSvgInStorageToPdfCall(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putSvgInStorageToPdf(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putSvgInStorageToPdfWithHttpInfo(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putSvgInStorageToPdfWithHttpInfo(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert SVG file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putSvgInStorageToPdfWithHttpInfo(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putSvgInStorageToPdfValidateBeforeCall(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert SVG file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.svg) (required)
     * @param adjustPageSize Adjust page size (optional)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putSvgInStorageToPdfAsync(String name, String srcPath, Boolean adjustPageSize, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSvgInStorageToPdfValidateBeforeCall(name, srcPath, adjustPageSize, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTable
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param table The table. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTableCall(String name, String tableId, Table table, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = table;

        // create path and map variables
        String localVarPath = "/pdf/{name}/tables/{tableId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "tableId" + "\\}", apiClient.escapePathSegmentString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTableValidateBeforeCall(String name, String tableId, Table table, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putTable(Async)");
        }
        
        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling putTable(Async)");
        }
        
        // verify the required parameter 'table' is set
        if (table == null) {
            throw new ApiException("Missing the required parameter 'table' when calling putTable(Async)");
        }
        

        com.squareup.okhttp.Call call = putTableCall(name, tableId, table, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document page table.
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param table The table. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putTable(String name, String tableId, Table table, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putTableWithHttpInfo(name, tableId, table, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putTableWithHttpInfo(name, tableId, table, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document page table.
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param table The table. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putTableWithHttpInfo(String name, String tableId, Table table, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putTableValidateBeforeCall(name, tableId, table, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document page table. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param tableId The table ID. (required)
     * @param table The table. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTableAsync(String name, String tableId, Table table, String storage, String folder, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTableValidateBeforeCall(name, tableId, table, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTeXInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTeXInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/tex"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTeXInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putTeXInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putTeXInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putTeXInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert TeX file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putTeXInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putTeXInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putTeXInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert TeX file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putTeXInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putTeXInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert TeX file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.tex) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTeXInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTeXInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTextAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTextAnnotationCall(String name, String annotationId, TextAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/text/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTextAnnotationValidateBeforeCall(String name, String annotationId, TextAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putTextAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putTextAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putTextAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document text annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextAnnotationResponse putTextAnnotation(String name, String annotationId, TextAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextAnnotationResponse> resp = putTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextAnnotationResponse> resp = putTextAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document text annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextAnnotationResponse> putTextAnnotationWithHttpInfo(String name, String annotationId, TextAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putTextAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document text annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTextAnnotationAsync(String name, String annotationId, TextAnnotation annotation, String storage, String folder, final ApiCallback<TextAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTextAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTextBoxField
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTextBoxFieldCall(String name, String fieldName, TextBoxField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/textbox/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTextBoxFieldValidateBeforeCall(String name, String fieldName, TextBoxField field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putTextBoxField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putTextBoxField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling putTextBoxField(Async)");
        }
        

        com.squareup.okhttp.Call call = putTextBoxFieldCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document text box field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return TextBoxFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextBoxFieldResponse putTextBoxField(String name, String fieldName, TextBoxField field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<TextBoxFieldResponse> resp = putTextBoxFieldWithHttpInfo(name, fieldName, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<TextBoxFieldResponse> resp = putTextBoxFieldWithHttpInfo(name, fieldName, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document text box field
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;TextBoxFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextBoxFieldResponse> putTextBoxFieldWithHttpInfo(String name, String fieldName, TextBoxField field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putTextBoxFieldValidateBeforeCall(name, fieldName, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<TextBoxFieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document text box field (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The field name. (required)
     * @param field The field. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTextBoxFieldAsync(String name, String fieldName, TextBoxField field, String storage, String folder, final ApiCallback<TextBoxFieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTextBoxFieldValidateBeforeCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TextBoxFieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putUnderlineAnnotation
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putUnderlineAnnotationCall(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;

        // create path and map variables
        String localVarPath = "/pdf/{name}/annotations/underline/{annotationId}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "annotationId" + "\\}", apiClient.escapePathSegmentString(annotationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putUnderlineAnnotationValidateBeforeCall(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUnderlineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotationId' is set
        if (annotationId == null) {
            throw new ApiException("Missing the required parameter 'annotationId' when calling putUnderlineAnnotation(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling putUnderlineAnnotation(Async)");
        }
        

        com.squareup.okhttp.Call call = putUnderlineAnnotationCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace document underline annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return UnderlineAnnotationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnderlineAnnotationResponse putUnderlineAnnotation(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<UnderlineAnnotationResponse> resp = putUnderlineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<UnderlineAnnotationResponse> resp = putUnderlineAnnotationWithHttpInfo(name, annotationId, annotation, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replace document underline annotation
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;UnderlineAnnotationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnderlineAnnotationResponse> putUnderlineAnnotationWithHttpInfo(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putUnderlineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace document underline annotation (asynchronously)
     * 
     * @param name The document name. (required)
     * @param annotationId The annotation ID. (required)
     * @param annotation Annotation. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putUnderlineAnnotationAsync(String name, String annotationId, UnderlineAnnotation annotation, String storage, String folder, final ApiCallback<UnderlineAnnotationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putUnderlineAnnotationValidateBeforeCall(name, annotationId, annotation, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnderlineAnnotationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putUpdateField
     * @param name The document name. (required)
     * @param fieldName The name of a field to be updated. (required)
     * @param field Field with the field data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putUpdateFieldCall(String name, String fieldName, Field field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = field;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields/{fieldName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()))
            .replaceAll("\\{" + "fieldName" + "\\}", apiClient.escapePathSegmentString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putUpdateFieldValidateBeforeCall(String name, String fieldName, Field field, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUpdateField(Async)");
        }
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putUpdateField(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling putUpdateField(Async)");
        }
        

        com.squareup.okhttp.Call call = putUpdateFieldCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update field.
     * 
     * @param name The document name. (required)
     * @param fieldName The name of a field to be updated. (required)
     * @param field Field with the field data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResponse putUpdateField(String name, String fieldName, Field field, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FieldResponse> resp = putUpdateFieldWithHttpInfo(name, fieldName, field, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FieldResponse> resp = putUpdateFieldWithHttpInfo(name, fieldName, field, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update field.
     * 
     * @param name The document name. (required)
     * @param fieldName The name of a field to be updated. (required)
     * @param field Field with the field data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResponse> putUpdateFieldWithHttpInfo(String name, String fieldName, Field field, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putUpdateFieldValidateBeforeCall(name, fieldName, field, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FieldResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update field. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fieldName The name of a field to be updated. (required)
     * @param field Field with the field data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putUpdateFieldAsync(String name, String fieldName, Field field, String storage, String folder, final ApiCallback<FieldResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putUpdateFieldValidateBeforeCall(name, fieldName, field, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putUpdateFields
     * @param name The document name. (required)
     * @param fields Fields with the fields data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putUpdateFieldsCall(String name, Fields fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fields;

        // create path and map variables
        String localVarPath = "/pdf/{name}/fields"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putUpdateFieldsValidateBeforeCall(String name, Fields fields, String storage, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUpdateFields(Async)");
        }
        
        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling putUpdateFields(Async)");
        }
        

        com.squareup.okhttp.Call call = putUpdateFieldsCall(name, fields, storage, folder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update fields.
     * 
     * @param name The document name. (required)
     * @param fields Fields with the fields data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return FieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldsResponse putUpdateFields(String name, Fields fields, String storage, String folder) throws ApiException {
        try
        {
            ApiResponse<FieldsResponse> resp = putUpdateFieldsWithHttpInfo(name, fields, storage, folder);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FieldsResponse> resp = putUpdateFieldsWithHttpInfo(name, fields, storage, folder);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Update fields.
     * 
     * @param name The document name. (required)
     * @param fields Fields with the fields data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @return ApiResponse&lt;FieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldsResponse> putUpdateFieldsWithHttpInfo(String name, Fields fields, String storage, String folder) throws ApiException {
        com.squareup.okhttp.Call call = putUpdateFieldsValidateBeforeCall(name, fields, storage, folder, null, null);
        Type localVarReturnType = new TypeToken<FieldsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update fields. (asynchronously)
     * 
     * @param name The document name. (required)
     * @param fields Fields with the fields data. (required)
     * @param storage The document storage. (optional)
     * @param folder The document folder. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putUpdateFieldsAsync(String name, Fields fields, String storage, String folder, final ApiCallback<FieldsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putUpdateFieldsValidateBeforeCall(name, fields, storage, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putWebInStorageToPdf
     * @param name The document name. (required)
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putWebInStorageToPdfCall(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/web"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (isLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isLandscape", isLandscape));
        if (marginLeft != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginLeft", marginLeft));
        if (marginBottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginBottom", marginBottom));
        if (marginRight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginRight", marginRight));
        if (marginTop != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marginTop", marginTop));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putWebInStorageToPdfValidateBeforeCall(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putWebInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling putWebInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putWebInStorageToPdfCall(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert web page to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putWebInStorageToPdf(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putWebInStorageToPdfWithHttpInfo(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putWebInStorageToPdfWithHttpInfo(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert web page to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putWebInStorageToPdfWithHttpInfo(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putWebInStorageToPdfValidateBeforeCall(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert web page to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param url Source url (required)
     * @param height Page height (optional)
     * @param width Page width (optional)
     * @param isLandscape Is page landscaped (optional)
     * @param marginLeft Page margin left (optional)
     * @param marginBottom Page margin bottom (optional)
     * @param marginRight Page margin right (optional)
     * @param marginTop Page margin top (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putWebInStorageToPdfAsync(String name, String url, Double height, Double width, Boolean isLandscape, Double marginLeft, Double marginBottom, Double marginRight, Double marginTop, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putWebInStorageToPdfValidateBeforeCall(name, url, height, width, isLandscape, marginLeft, marginBottom, marginRight, marginTop, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXfaPdfInRequestToAcroForm
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXfaPdfInRequestToAcroFormCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/convert/xfatoacroform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXfaPdfInRequestToAcroFormValidateBeforeCall(String outPath, String storage, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putXfaPdfInRequestToAcroForm(Async)");
        }
        

        com.squareup.okhttp.Call call = putXfaPdfInRequestToAcroFormCall(outPath, storage, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document which contains XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXfaPdfInRequestToAcroForm(String outPath, String storage, File file) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXfaPdfInRequestToAcroFormWithHttpInfo(outPath, storage, file);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putXfaPdfInRequestToAcroFormWithHttpInfo(outPath, storage, file);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document which contains XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage.
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXfaPdfInRequestToAcroFormWithHttpInfo(String outPath, String storage, File file) throws ApiException {
        com.squareup.okhttp.Call call = putXfaPdfInRequestToAcroFormValidateBeforeCall(outPath, storage, file, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document which contains XFA form (in request content) to PDF with AcroForm and uploads resulting file to storage. (asynchronously)
     * 
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param storage The document storage. (optional)
     * @param file A file to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXfaPdfInRequestToAcroFormAsync(String outPath, String storage, File file, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXfaPdfInRequestToAcroFormValidateBeforeCall(outPath, storage, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXfaPdfInStorageToAcroForm
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXfaPdfInStorageToAcroFormCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/convert/xfatoacroform"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outPath", outPath));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXfaPdfInStorageToAcroFormValidateBeforeCall(String name, String outPath, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putXfaPdfInStorageToAcroForm(Async)");
        }
        
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putXfaPdfInStorageToAcroForm(Async)");
        }
        

        com.squareup.okhttp.Call call = putXfaPdfInStorageToAcroFormCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts PDF document which contains XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXfaPdfInStorageToAcroForm(String name, String outPath, String folder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXfaPdfInStorageToAcroFormWithHttpInfo(name, outPath, folder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putXfaPdfInStorageToAcroFormWithHttpInfo(name, outPath, folder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts PDF document which contains XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXfaPdfInStorageToAcroFormWithHttpInfo(String name, String outPath, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putXfaPdfInStorageToAcroFormValidateBeforeCall(name, outPath, folder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts PDF document which contains XFA form (located on storage) to PDF with AcroForm and uploads resulting file to storage (asynchronously)
     * 
     * @param name The document name. (required)
     * @param outPath Full resulting filename (ex. /folder1/folder2/result.pdf) (required)
     * @param folder The document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXfaPdfInStorageToAcroFormAsync(String name, String outPath, String folder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXfaPdfInStorageToAcroFormValidateBeforeCall(name, outPath, folder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXmlInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXmlInStorageToPdfCall(String name, String srcPath, String xslFilePath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/xml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (xslFilePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xslFilePath", xslFilePath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXmlInStorageToPdfValidateBeforeCall(String name, String srcPath, String xslFilePath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putXmlInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putXmlInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putXmlInStorageToPdfCall(name, srcPath, xslFilePath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXmlInStorageToPdf(String name, String srcPath, String xslFilePath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXmlInStorageToPdfWithHttpInfo(name, srcPath, xslFilePath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putXmlInStorageToPdfWithHttpInfo(name, srcPath, xslFilePath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XML file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXmlInStorageToPdfWithHttpInfo(String name, String srcPath, String xslFilePath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putXmlInStorageToPdfValidateBeforeCall(name, srcPath, xslFilePath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XML file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xml) (required)
     * @param xslFilePath Full XSL source filename (ex. /folder1/folder2/template.xsl) (optional)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXmlInStorageToPdfAsync(String name, String srcPath, String xslFilePath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXmlInStorageToPdfValidateBeforeCall(name, srcPath, xslFilePath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXpsInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXpsInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/xps"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXpsInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putXpsInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putXpsInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putXpsInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXpsInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXpsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putXpsInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XPS file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXpsInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putXpsInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XPS file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xps) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXpsInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXpsInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putXslFoInStorageToPdf
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xpsfo) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putXslFoInStorageToPdfCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/{name}/create/xslfo"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapePathSegmentString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (srcPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("srcPath", srcPath));
        if (dstFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dstFolder", dstFolder));
        if (storage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storage", storage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putXslFoInStorageToPdfValidateBeforeCall(String name, String srcPath, String dstFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putXslFoInStorageToPdf(Async)");
        }
        
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling putXslFoInStorageToPdf(Async)");
        }
        

        com.squareup.okhttp.Call call = putXslFoInStorageToPdfCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xpsfo) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return AsposeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsposeResponse putXslFoInStorageToPdf(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        try
        {
            ApiResponse<AsposeResponse> resp = putXslFoInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<AsposeResponse> resp = putXslFoInStorageToPdfWithHttpInfo(name, srcPath, dstFolder, storage);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Convert XslFo file (located on storage) to PDF format and upload resulting file to storage. 
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xpsfo) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @return ApiResponse&lt;AsposeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsposeResponse> putXslFoInStorageToPdfWithHttpInfo(String name, String srcPath, String dstFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putXslFoInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, null, null);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XslFo file (located on storage) to PDF format and upload resulting file to storage.  (asynchronously)
     * 
     * @param name The document name. (required)
     * @param srcPath Full source filename (ex. /folder1/folder2/template.xpsfo) (required)
     * @param dstFolder The destination document folder. (optional)
     * @param storage The document storage. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putXslFoInStorageToPdfAsync(String name, String srcPath, String dstFolder, String storage, final ApiCallback<AsposeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putXslFoInStorageToPdfValidateBeforeCall(name, srcPath, dstFolder, storage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsposeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageExists
     * @param storageName Storage name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageExistsCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pdf/storage/{storageName}/exist"
            .replaceAll("\\{" + "storageName" + "\\}", apiClient.escapePathSegmentString(storageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageExistsValidateBeforeCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageName' is set
        if (storageName == null) {
            throw new ApiException("Missing the required parameter 'storageName' when calling storageExists(Async)");
        }
        

        com.squareup.okhttp.Call call = storageExistsCall(storageName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check if storage exists
     * 
     * @param storageName Storage name (required)
     * @return StorageExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageExist storageExists(String storageName) throws ApiException {
        try
        {
            ApiResponse<StorageExist> resp = storageExistsWithHttpInfo(storageName);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<StorageExist> resp = storageExistsWithHttpInfo(storageName);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Check if storage exists
     * 
     * @param storageName Storage name (required)
     * @return ApiResponse&lt;StorageExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageExist> storageExistsWithHttpInfo(String storageName) throws ApiException {
        com.squareup.okhttp.Call call = storageExistsValidateBeforeCall(storageName, null, null);
        Type localVarReturnType = new TypeToken<StorageExist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if storage exists (asynchronously)
     * 
     * @param storageName Storage name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageExistsAsync(String storageName, final ApiCallback<StorageExist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageExistsValidateBeforeCall(storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageExist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadFile
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              (required)
     * @param file File to upload (required)
     * @param storageName Storage name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileCall(String path, File file, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;

        // create path and map variables
        String localVarPath = "/pdf/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapePathSegmentString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storageName", storageName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFileValidateBeforeCall(String path, File file, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling uploadFile(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadFile(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadFileCall(path, file, storageName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload file
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              (required)
     * @param file File to upload (required)
     * @param storageName Storage name (optional)
     * @return FilesUploadResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesUploadResult uploadFile(String path, File file, String storageName) throws ApiException {
        try
        {
            ApiResponse<FilesUploadResult> resp = uploadFileWithHttpInfo(path, file, storageName);
            return resp.getData();
        }
        catch (ApiException ex)
        {
            if (ex.getCode() == 401)
            {
                apiClient.requestToken();
                ApiResponse<FilesUploadResult> resp = uploadFileWithHttpInfo(path, file, storageName);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Upload file
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              (required)
     * @param file File to upload (required)
     * @param storageName Storage name (optional)
     * @return ApiResponse&lt;FilesUploadResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesUploadResult> uploadFileWithHttpInfo(String path, File file, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(path, file, storageName, null, null);
        Type localVarReturnType = new TypeToken<FilesUploadResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload file (asynchronously)
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              (required)
     * @param file File to upload (required)
     * @param storageName Storage name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(String path, File file, String storageName, final ApiCallback<FilesUploadResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(path, file, storageName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilesUploadResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
